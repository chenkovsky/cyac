/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "cyac.trie",
        "sources": [
            "lib/cyac/trie.pyx"
        ]
    },
    "module_name": "cyac.trie"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cyac__trie
#define __PYX_HAVE_API__cyac__trie
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include <stdio.h>
#include <string>
#include <sstream>
#include <algorithm>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lib/cyac/trie.pyx",
  "lib/cyac/trie.pxd",
  "stringsource",
  "lib/cyac/xstring.pxd",
};

/* "utf8.pxd":3
 * 
 * # distutils: language=c++
 * ctypedef unsigned char byte_t             # <<<<<<<<<<<<<<
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):
 *     cdef int result = 0
 */
typedef unsigned char __pyx_t_4cyac_4utf8_byte_t;

/*--- Type declarations ---*/
struct __pyx_obj_4cyac_7xstring_xstring;
struct __pyx_obj_4cyac_7xstring_ignore_case_alignment;
struct __pyx_obj_4cyac_4trie_Trie;
struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix;
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict;
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items;
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest;
struct __pyx_t_4cyac_4trie_Block;
struct __pyx_t_4cyac_4trie_Node;

/* "cyac/trie.pxd":12
 * 
 * 
 * cdef struct Block:             # <<<<<<<<<<<<<<
 *     int prev
 *     int next_
 */
struct __pyx_t_4cyac_4trie_Block {
  int prev;
  int next_;
  int num;
  int reject;
  int trial;
  int ehead;
};

/* "cyac/trie.pxd":21
 * 
 * 
 * cdef struct Node:             # <<<<<<<<<<<<<<
 *     int value
 *     int check
 */
struct __pyx_t_4cyac_4trie_Node {
  int value;
  int check;
  __pyx_t_4cyac_4utf8_byte_t sibling;
  __pyx_t_4cyac_4utf8_byte_t child;
  unsigned short flags;
};

/* "xstring.pxd":16
 *     int
 * 
 * cdef class xstring(object):             # <<<<<<<<<<<<<<
 *     cdef unicode py_unicode
 *     cdef bytes py_bytes
 */
struct __pyx_obj_4cyac_7xstring_xstring {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cyac_7xstring_xstring *__pyx_vtab;
  PyObject *py_unicode;
  PyObject *py_bytes;
  __pyx_t_4cyac_4utf8_byte_t *bytes_;
  int byte_num;
  int char_num;
  int *char_idx_of_byte;
  int *char_offsets;
  int *chars;
};


/* "xstring.pxd":31
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 * cdef class ignore_case_alignment(object):             # <<<<<<<<<<<<<<
 *     cdef xstring original
 *     cdef xstring lowercase
 */
struct __pyx_obj_4cyac_7xstring_ignore_case_alignment {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_xstring *original;
  struct __pyx_obj_4cyac_7xstring_xstring *lowercase;
  int *lowercase_char_index_mapping;
};


/* "cyac/trie.pxd":43
 *     return align.lowercase_char_index_mapping[char_offset]
 * 
 * cdef class Trie(object):             # <<<<<<<<<<<<<<
 *     cdef int key_num
 *     cdef int key_capacity
 */
struct __pyx_obj_4cyac_4trie_Trie {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cyac_4trie_Trie *__pyx_vtab;
  int key_num;
  int key_capacity;
  struct __pyx_t_4cyac_4trie_Node *array;
  struct __pyx_t_4cyac_4trie_Block *blocks;
  int reject[0x101];
  int bheadF;
  int bheadC;
  int bheadO;
  int array_size;
  int capacity;
  bool ignore_case;
  bool ordered;
  int max_trial;
  int last_remove_leaf;
  int *leafs;
  int leaf_size;
  Py_buffer *buff;
};


/* "cyac/trie.pyx":672
 * 
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */
struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_b;
  int __pyx_v_bi;
  int __pyx_v_node;
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self;
  int __pyx_v_vk;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "cyac/trie.pyx":703
 *                 break
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align;
  int __pyx_v_child_num;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_children[0x100];
  int __pyx_v_children_nodes[0x100];
  int __pyx_v_cid;
  int __pyx_v_idx;
  int __pyx_v_node;
  int __pyx_v_num;
  std::deque<int>  __pyx_v_q;
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self;
  int __pyx_v_vk;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs;
};


/* "cyac/trie.pyx":739
 *                 q.push_back(children_nodes[idx])
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items {
  PyObject_HEAD
  int __pyx_v_id_;
  PyObject *__pyx_v_key_;
  int __pyx_v_lnode;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "cyac/trie.pyx":765
 *             free(self.buff)
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */
struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_b;
  int __pyx_v_bi;
  int __pyx_v_last_b;
  int __pyx_v_last_vk;
  int __pyx_v_node;
  int __pyx_v_offset;
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self;
  PyObject *__pyx_v_sep;
  int __pyx_v_vk;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs;
};



/* "xstring.pxd":16
 *     int
 * 
 * cdef class xstring(object):             # <<<<<<<<<<<<<<
 *     cdef unicode py_unicode
 *     cdef bytes py_bytes
 */

struct __pyx_vtabstruct_4cyac_7xstring_xstring {
  int (*char_at)(struct __pyx_obj_4cyac_7xstring_xstring *, int, int __pyx_skip_dispatch);
  int (*char_byte_num)(struct __pyx_obj_4cyac_7xstring_xstring *, int);
};
static struct __pyx_vtabstruct_4cyac_7xstring_xstring *__pyx_vtabptr_4cyac_7xstring_xstring;
static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *, int);


/* "cyac/trie.pyx":31
 * 
 * 
 * cdef class Trie(object):             # <<<<<<<<<<<<<<
 * 
 *     """Trie
 */

struct __pyx_vtabstruct_4cyac_4trie_Trie {
  int (*_get)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int, int);
  int (*follow)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  bool (*has_label)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  int (*child)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  int (*children)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t *, int *, int);
  int (*jump)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t, int);
  int (*jump_bytes)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int);
  int (*jump_uchar)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_obj_4cyac_7xstring_xstring *, int, int);
  PyObject *(*substring)(struct __pyx_obj_4cyac_4trie_Trie *, int, int);
  PyObject *(*key)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*value)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  bool (*has_value)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*insert)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*remove)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*get)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*get_bytes)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
  void (*_node_init)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int, int);
  int (*_node_child_num)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  void (*_node_set_child_num)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
  int (*_node_base)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  bool (*_node_is_child)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
  __pyx_t_4cyac_4utf8_byte_t *(*_node_child_ptr)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  __pyx_t_4cyac_4utf8_byte_t *(*_node_sibling_ptr)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  void (*_block_init)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Block *, int, int, int, int, int, int);
  struct __pyx_t_4cyac_4trie_Node *(*_node)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  void (*pop_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
  void (*push_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
  int (*add_block)(struct __pyx_obj_4cyac_4trie_Trie *);
  void (*transfer_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, int *);
  int (*pop_enode)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, int);
  void (*push_enode)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  void (*push_sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t, bool);
  void (*pop_sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  bool (*consult)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, struct __pyx_t_4cyac_4trie_Node *);
  int (*sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*set_child)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, __pyx_t_4cyac_4utf8_byte_t, bool, __pyx_t_4cyac_4utf8_byte_t *);
  int (*find_place)(struct __pyx_obj_4cyac_4trie_Trie *);
  int (*find_places)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
  int (*resolve)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t);
  void (*_to_buff)(struct __pyx_obj_4cyac_4trie_Trie *, void *);
  PyObject *(*write)(struct __pyx_obj_4cyac_4trie_Trie *, FILE *);
};
static struct __pyx_vtabstruct_4cyac_4trie_Trie *__pyx_vtabptr_4cyac_4trie_Trie;
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__get(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_follow(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_child(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_children(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t *, int *, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_bytes(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_uchar(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_obj_4cyac_7xstring_xstring *, int, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_value(struct __pyx_obj_4cyac_4trie_Trie *, int);
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_has_value(struct __pyx_obj_4cyac_4trie_Trie *, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_get_bytes(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_init(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_child_num(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_set_child_num(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_base(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie__node_is_child(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_child_ptr(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__block_init(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Block *, int, int, int, int, int, int);
static CYTHON_INLINE struct __pyx_t_4cyac_4trie_Node *__pyx_f_4cyac_4trie_4Trie__node(struct __pyx_obj_4cyac_4trie_Trie *, int);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_block(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_block(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_transfer_block(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, int *);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_pop_enode(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, int);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_sibling(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t, bool);
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_sibling(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_consult(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, struct __pyx_t_4cyac_4trie_Node *);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_sibling(struct __pyx_obj_4cyac_4trie_Trie *, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_place(struct __pyx_obj_4cyac_4trie_Trie *);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_places(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_resolve(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeCppStringH.proto */
#include <string>

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_short(unsigned short value, Py_ssize_t width, char padding_char, char format_char);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_init(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_value, int __pyx_v_check); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_child_num(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_set_child_num(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_val); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_base(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n); /* proto*/
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie__node_is_child(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_par); /* proto*/
static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_child_ptr(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n); /* proto*/
static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__block_init(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Block *__pyx_v_block, int __pyx_v_prev, int __pyx_v_next_, int __pyx_v_trial, int __pyx_v_ehead, int __pyx_v_num, int __pyx_v_reject); /* proto*/
static CYTHON_INLINE struct __pyx_t_4cyac_4trie_Node *__pyx_f_4cyac_4trie_4Trie__node(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_nid); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_key, int __pyx_v_key_size, int __pyx_v_from_, int __pyx_v_start); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_follow(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_in, bool __pyx_v_last); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_out, bool __pyx_v_empty); /* proto*/
static int __pyx_f_4cyac_4trie_4Trie_add_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_transfer_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_in, int *__pyx_v_head_out); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_pop_enode(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, int __pyx_v_from_); /* proto*/
static void __pyx_f_4cyac_4trie_4Trie_push_enode(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_e); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, bool __pyx_v_has_child); /* proto*/
static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label); /* proto*/
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_consult(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_nref, struct __pyx_t_4cyac_4trie_Node *__pyx_v_pref); /* proto*/
static bool __pyx_f_4cyac_4trie_4Trie_has_label(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_child(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_children(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_labels, int *__pyx_v_children_arr, int __pyx_v_first_n); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_to); /* proto*/
static int __pyx_f_4cyac_4trie_4Trie_set_child(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_c, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, bool __pyx_v_append_label, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_children); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_place(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_places(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_child, int __pyx_v_child_num); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_resolve(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_n, int __pyx_v_base_n, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label_n); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t __pyx_v_byte, int __pyx_v_from_); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_bytes(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_bytes_, int __pyx_v_byte_num, int __pyx_v_from_); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_uchar(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_text, int __pyx_v_char_idx, int __pyx_v_from_); /* proto*/
static PyObject *__pyx_f_4cyac_4trie_4Trie_substring(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, int __pyx_v_start_id); /* proto*/
static PyObject *__pyx_f_4cyac_4trie_4Trie_key(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_value(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_); /* proto*/
static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_has_value(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_); /* proto*/
static int __pyx_f_4cyac_4trie_4Trie_insert(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4cyac_4trie_4Trie_remove(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_4cyac_4trie_4Trie_get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_get_bytes(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_key, int __pyx_v_size); /* proto*/
static PyObject *__pyx_f_4cyac_4trie_4Trie_write(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, FILE *__pyx_v_ptr_fw); /* proto*/
static void __pyx_f_4cyac_4trie_4Trie__to_buff(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, void *__pyx_v_buf); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_self, int __pyx_v_i); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cyac.utf8' */

/* Module declarations from 'cyac.xstring' */
static PyTypeObject *__pyx_ptype_4cyac_7xstring_xstring = 0;
static PyTypeObject *__pyx_ptype_4cyac_7xstring_ignore_case_alignment = 0;

/* Module declarations from 'cyac.util' */
static int *__pyx_vp_4cyac_4util_magic_number = 0;
#define __pyx_v_4cyac_4util_magic_number (*__pyx_vp_4cyac_4util_magic_number)
static void (*__pyx_f_4cyac_4util_check_buffer)(PyObject *); /*proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cyac.trie' */
static PyTypeObject *__pyx_ptype_4cyac_4trie_Trie = 0;
static PyTypeObject *__pyx_ptype_4cyac_4trie___pyx_scope_struct__prefix = 0;
static PyTypeObject *__pyx_ptype_4cyac_4trie___pyx_scope_struct_1_predict = 0;
static PyTypeObject *__pyx_ptype_4cyac_4trie___pyx_scope_struct_2_items = 0;
static PyTypeObject *__pyx_ptype_4cyac_4trie___pyx_scope_struct_3_match_longest = 0;
static int __pyx_v_4cyac_4trie_CHILD_NUM_MASK;
static int __pyx_v_4cyac_4trie_END_MASK;
static int __pyx_v_4cyac_4trie_value_limit;
static CYTHON_INLINE PyObject *__pyx_f_4cyac_4trie_array_to_bytes(char *, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE char *__pyx_f_4cyac_4trie_bytes_to_array(PyObject *, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_offset(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *, struct __pyx_obj_4cyac_7xstring_xstring *, int); /*proto*/
static struct __pyx_obj_4cyac_4trie_Trie *__pyx_f_4cyac_4trie_trie_from_buff(void *, int, bool); /*proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "cyac.trie"
extern int __pyx_module_is_main_cyac__trie;
int __pyx_module_is_main_cyac__trie = 0;

/* Implementation of 'cyac.trie' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_open;
static const char __pyx_k_s[] = "s";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__3[] = "\n";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_Trie[] = "Trie";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_buff[] = "buff";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_check[] = ", check=";
static const char __pyx_k_child[] = ", child=";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_flags[] = ", flags=";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_value[] = "value=";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_ordered[] = "ordered";
static const char __pyx_k_predict[] = "predict";
static const char __pyx_k_sibling[] = ", sibling=";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_capacity[] = "capacity";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_buff_size[] = "buff_size";
static const char __pyx_k_cyac_trie[] = "cyac.trie";
static const char __pyx_k_from_buff[] = "from_buff";
static const char __pyx_k_Trie_items[] = "Trie.items";
static const char __pyx_k_new_object[] = "new_object";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_Trie_prefix[] = "Trie.prefix";
static const char __pyx_k_ignore_case[] = "ignore_case";
static const char __pyx_k_Trie_predict[] = "Trie.predict";
static const char __pyx_k_Cannot_find_s[] = "Cannot find: %s";
static const char __pyx_k_match_longest[] = "match_longest";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_Trie_get_line_643[] = "Trie.get (line 643)";
static const char __pyx_k_lib_cyac_trie_pyx[] = "lib/cyac/trie.pyx";
static const char __pyx_k_Cannot_open_file_s[] = "Cannot open file: %s";
static const char __pyx_k_Trie_match_longest[] = "Trie.match_longest";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Trie_items_line_739[] = "Trie.items (line 739)";
static const char __pyx_k_Trie_insert_line_557[] = "Trie.insert (line 557)";
static const char __pyx_k_Trie_prefix_line_672[] = "Trie.prefix (line 672)";
static const char __pyx_k_Trie_remove_line_595[] = "Trie.remove (line 595)";
static const char __pyx_k_Trie_predict_line_703[] = "Trie.predict (line 703)";
static const char __pyx_k_Trie___getitem___line_535[] = "Trie.__getitem__ (line 535)";
static const char __pyx_k_Index_type_is_not_supported[] = "Index type is not supported";
static const char __pyx_k_Trie_match_longest_line_765[] = "Trie.match_longest (line 765)";
static const char __pyx_k_Trie_replace_longest_line_820[] = "Trie.replace_longest (line 820)";
static const char __pyx_k_extract_trie_s_keys_from_given[] = "\n        extract trie's keys from given string. only return the longest.\n        Args:\n            s : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in trie.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static const char __pyx_k_get_key_by_id_or_get_id_by_key[] = "\n        get key by id, or get id by key, raise exception if cannot find.\n        Args:\n            sid (unicode | int): key or id\n\n        Examples:\n            >>> trie[\"python\"]\n        Raises:\n            AttributeError: If `sid` is not unicode or int\n        ";
static const char __pyx_k_replace_trie_s_keys_from_given[] = "\n        replace trie's keys from given string. only replace the longest.\n        Args:\n            s : unicode\n            callback : lambda | list | dict\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Returns:\n            replaced text\n        Examples:\n            >>> python_id = trie.insert(\"python\")\n            >>> text = trie.replace_longest(\"python\", {python_id: \"hahah\"}, set([ord(\" \")]))\n        ";
static const char __pyx_k_Replaced_result_should_be_bytes[] = "Replaced result should be bytes or unicode";
static const char __pyx_k_get_id_of_given_key_if_it_doesn[] = "\n        get id of given key, if it doesn't exist, return -1.\n        Args:\n            key : string\n                keyword that you want to get if it's present.\n        Returns:\n            id : bool\n                the id of key.\n                if this key doesn't exist in trie, then return -1.\n        Examples:\n            >>> trie.get(\"python\")\n        ";
static const char __pyx_k_insert_key_into_the_trie_return[] = "insert key into the trie, return the id of this key.\n        Args:\n            key : string, Cannot be empty.\n        Returns:\n            id  : int\n                The id is continuously increasing. you can use this id to index other values.\n                If some key is removed, and a new key is inserted, the old key's id will be assigned to the new key.\n        Examples:\n            >>> trie.insert(\"python\")\n        ";
static const char __pyx_k_remove_the_given_key_from_the_t[] = "\n        remove the given key from the trie\n        Args:\n            key : string\n                keyword that you want to remove if it's present.\n        Returns:\n            id : bool\n                the id of key.\n                if this key doesn't exist in trie, then return -1.\n        Examples:\n            >>> trie.remove(\"python\")\n        ";
static const char __pyx_k_return_all_key_and_id_ordered_b[] = "\n        return all key and id ordered by id\n        Iterates:\n            items : (unicode, int)\n        Examples:\n            >>> for key, id_ in trie.items():\n            >>>     print(id_, key)\n        ";
static const char __pyx_k_return_the_prefix_of_given_stri[] = "\n        return the prefix of given string which is in the trie.\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            prefixes : tuple(id, end_offset)\n                s[:end_offset] matches id\n        Examples:\n            >>> for id_, offset in trie.prefix(\"python\"):\n            >>>     print(id_, offset)\n        ";
static const char __pyx_k_return_the_string_in_the_trie_w[] = "\n        return the string in the trie which starts with given string\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            predicts : id\n        Examples:\n            >>> for id_ in trie.predict(\"python\"):\n            >>>     print(id_)\n        ";
static const char __pyx_k_buff_size_is_smaller_than_needed[] = "buff size is smaller than needed.";
static const char __pyx_k_cannot_get_readable_buffer_https[] = "cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html";
static const char __pyx_k_cannot_get_writable_buffer_https[] = "cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html";
static const char __pyx_k_invalid_data_buf_size_is_not_cor[] = "invalid data, buf size is not correct";
static const char __pyx_k_invalid_data_magic_number_is_not[] = "invalid data, magic number is not correct";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_u_Cannot_find_s;
static PyObject *__pyx_kp_u_Cannot_open_file_s;
static PyObject *__pyx_kp_u_Index_type_is_not_supported;
static PyObject *__pyx_kp_u_Replaced_result_should_be_bytes;
static PyObject *__pyx_n_s_Trie;
static PyObject *__pyx_kp_u_Trie___getitem___line_535;
static PyObject *__pyx_kp_u_Trie_get_line_643;
static PyObject *__pyx_kp_u_Trie_insert_line_557;
static PyObject *__pyx_n_s_Trie_items;
static PyObject *__pyx_kp_u_Trie_items_line_739;
static PyObject *__pyx_n_s_Trie_match_longest;
static PyObject *__pyx_kp_u_Trie_match_longest_line_765;
static PyObject *__pyx_n_s_Trie_predict;
static PyObject *__pyx_kp_u_Trie_predict_line_703;
static PyObject *__pyx_n_s_Trie_prefix;
static PyObject *__pyx_kp_u_Trie_prefix_line_672;
static PyObject *__pyx_kp_u_Trie_remove_line_595;
static PyObject *__pyx_kp_u_Trie_replace_longest_line_820;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_buff;
static PyObject *__pyx_n_s_buff_size;
static PyObject *__pyx_kp_u_buff_size_is_smaller_than_needed;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_kp_u_cannot_get_readable_buffer_https;
static PyObject *__pyx_kp_u_cannot_get_writable_buffer_https;
static PyObject *__pyx_n_s_capacity;
static PyObject *__pyx_kp_u_check;
static PyObject *__pyx_kp_u_child;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cyac_trie;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_kp_u_extract_trie_s_keys_from_given;
static PyObject *__pyx_kp_u_flags;
static PyObject *__pyx_n_s_from_buff;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_kp_u_get_id_of_given_key_if_it_doesn;
static PyObject *__pyx_kp_u_get_key_by_id_or_get_id_by_key;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ignore_case;
static PyObject *__pyx_n_s_insert;
static PyObject *__pyx_kp_u_insert_key_into_the_trie_return;
static PyObject *__pyx_kp_u_invalid_data_buf_size_is_not_cor;
static PyObject *__pyx_kp_u_invalid_data_magic_number_is_not;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_kp_s_lib_cyac_trie_pyx;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_match_longest;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_object;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_ordered;
static PyObject *__pyx_n_s_predict;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_kp_u_remove_the_given_key_from_the_t;
static PyObject *__pyx_kp_u_replace_trie_s_keys_from_given;
static PyObject *__pyx_kp_u_return_all_key_and_id_ordered_b;
static PyObject *__pyx_kp_u_return_the_prefix_of_given_stri;
static PyObject *__pyx_kp_u_return_the_string_in_the_trie_w;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_kp_u_sibling;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_kp_u_value;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_pf_4cyac_4trie_4new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_arr_size(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_7key_num___get__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_4size___get__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_4cyac_4trie_4Trie_2__len__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static int __pyx_pf_4cyac_4trie_4Trie_4__cinit__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, bool __pyx_v_ignore_case, bool __pyx_v_ordered); /* proto */
static int __pyx_pf_4cyac_4trie_4Trie_6__contains__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_8__getitem__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_sid); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_10insert(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_12remove(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_14get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_16prefix(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_19predict(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_22items(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static void __pyx_pf_4cyac_4trie_4Trie_25__dealloc__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_27match_longest(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_sep); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_30replace_longest(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_callback, PyObject *__pyx_v_sep); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_32_dump_array(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_34__reduce__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_36__getstate__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_38__setstate__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_40buff_size(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_42save(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_44to_buff(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_buff); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_4Trie_46from_buff(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_buff, PyObject *__pyx_v_copy); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_array_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_ptr, int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_2bytes_to_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, int __pyx_v_capacity); /* proto */
static PyObject *__pyx_tp_new_4cyac_4trie_Trie(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct__prefix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_1_predict(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_2_items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_3_match_longest(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_codeobj__11;
/* Late includes */

/* "cyac/trie.pyx":12
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_5new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static PyMethodDef __pyx_mdef_4cyac_4trie_5new_object = {"new_object", (PyCFunction)__pyx_pw_4cyac_4trie_5new_object, METH_O, 0};
static PyObject *__pyx_pw_4cyac_4trie_5new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_object (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4new_object(__pyx_self, ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_object", 0);

  /* "cyac/trie.pyx":13
 * 
 * def new_object(obj):
 *     return obj.__new__(obj)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "<algorithm>" namespace "std" nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":12
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.trie.new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":22
 * cdef int value_limit = (1 << 31) - 1
 * 
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):             # <<<<<<<<<<<<<<
 *     if align is None:
 *         return byte_idx
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align, int __pyx_v_byte_idx) {
  int __pyx_v_char_offset;
  int __pyx_v_ret;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("ignore_case_byte_index_mapping", 0);

  /* "cyac/trie.pyx":23
 * 
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return byte_idx
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_align) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":24
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):
 *     if align is None:
 *         return byte_idx             # <<<<<<<<<<<<<<
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]
 *     char_offset = align.lowercase_char_index_mapping[char_offset]
 */
    __pyx_r = __pyx_v_byte_idx;
    goto __pyx_L0;

    /* "cyac/trie.pyx":23
 * 
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return byte_idx
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]
 */
  }

  /* "cyac/trie.pyx":25
 *     if align is None:
 *         return byte_idx
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]             # <<<<<<<<<<<<<<
 *     char_offset = align.lowercase_char_index_mapping[char_offset]
 *     cdef int ret = align.original.char_offsets[char_offset]
 */
  __pyx_v_char_offset = (__pyx_v_align->lowercase->char_idx_of_byte[__pyx_v_byte_idx]);

  /* "cyac/trie.pyx":26
 *         return byte_idx
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]
 *     char_offset = align.lowercase_char_index_mapping[char_offset]             # <<<<<<<<<<<<<<
 *     cdef int ret = align.original.char_offsets[char_offset]
 *     return ret
 */
  __pyx_v_char_offset = (__pyx_v_align->lowercase_char_index_mapping[__pyx_v_char_offset]);

  /* "cyac/trie.pyx":27
 *     cdef int char_offset = align.lowercase.char_idx_of_byte[byte_idx]
 *     char_offset = align.lowercase_char_index_mapping[char_offset]
 *     cdef int ret = align.original.char_offsets[char_offset]             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret = (__pyx_v_align->original->char_offsets[__pyx_v_char_offset]);

  /* "cyac/trie.pyx":28
 *     char_offset = align.lowercase_char_index_mapping[char_offset]
 *     cdef int ret = align.original.char_offsets[char_offset]
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "cyac/trie.pyx":22
 * cdef int value_limit = (1 << 31) - 1
 * 
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):             # <<<<<<<<<<<<<<
 *     if align is None:
 *         return byte_idx
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":51
 *     """
 * 
 *     cdef inline void _node_init(self, Node* n, int value, int check):             # <<<<<<<<<<<<<<
 *         n.value = value
 *         n.check = check
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_init(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_value, int __pyx_v_check) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_init", 0);

  /* "cyac/trie.pyx":52
 * 
 *     cdef inline void _node_init(self, Node* n, int value, int check):
 *         n.value = value             # <<<<<<<<<<<<<<
 *         n.check = check
 *         n.flags = 0
 */
  __pyx_v_n->value = __pyx_v_value;

  /* "cyac/trie.pyx":53
 *     cdef inline void _node_init(self, Node* n, int value, int check):
 *         n.value = value
 *         n.check = check             # <<<<<<<<<<<<<<
 *         n.flags = 0
 *         n.child = 0
 */
  __pyx_v_n->check = __pyx_v_check;

  /* "cyac/trie.pyx":54
 *         n.value = value
 *         n.check = check
 *         n.flags = 0             # <<<<<<<<<<<<<<
 *         n.child = 0
 *         n.sibling = 0
 */
  __pyx_v_n->flags = 0;

  /* "cyac/trie.pyx":55
 *         n.check = check
 *         n.flags = 0
 *         n.child = 0             # <<<<<<<<<<<<<<
 *         n.sibling = 0
 * 
 */
  __pyx_v_n->child = 0;

  /* "cyac/trie.pyx":56
 *         n.flags = 0
 *         n.child = 0
 *         n.sibling = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int _node_child_num(self, Node *n):
 */
  __pyx_v_n->sibling = 0;

  /* "cyac/trie.pyx":51
 *     """
 * 
 *     cdef inline void _node_init(self, Node* n, int value, int check):             # <<<<<<<<<<<<<<
 *         n.value = value
 *         n.check = check
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":58
 *         n.sibling = 0
 * 
 *     cdef inline int _node_child_num(self, Node *n):             # <<<<<<<<<<<<<<
 *         return n.flags
 * 
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_child_num(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_child_num", 0);

  /* "cyac/trie.pyx":59
 * 
 *     cdef inline int _node_child_num(self, Node *n):
 *         return n.flags             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void _node_set_child_num(self, Node *n, int val):
 */
  __pyx_r = __pyx_v_n->flags;
  goto __pyx_L0;

  /* "cyac/trie.pyx":58
 *         n.sibling = 0
 * 
 *     cdef inline int _node_child_num(self, Node *n):             # <<<<<<<<<<<<<<
 *         return n.flags
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":61
 *         return n.flags
 * 
 *     cdef inline void _node_set_child_num(self, Node *n, int val):             # <<<<<<<<<<<<<<
 *         n.flags = val
 * 
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__node_set_child_num(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_val) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_set_child_num", 0);

  /* "cyac/trie.pyx":62
 * 
 *     cdef inline void _node_set_child_num(self, Node *n, int val):
 *         n.flags = val             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int _node_base(self, Node *n):
 */
  __pyx_v_n->flags = __pyx_v_val;

  /* "cyac/trie.pyx":61
 *         return n.flags
 * 
 *     cdef inline void _node_set_child_num(self, Node *n, int val):             # <<<<<<<<<<<<<<
 *         n.flags = val
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":64
 *         n.flags = val
 * 
 *     cdef inline int _node_base(self, Node *n):             # <<<<<<<<<<<<<<
 *         return -(n.value + 1)
 * 
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__node_base(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_base", 0);

  /* "cyac/trie.pyx":65
 * 
 *     cdef inline int _node_base(self, Node *n):
 *         return -(n.value + 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool _node_is_child(self, Node *n, int par):
 */
  __pyx_r = (-(__pyx_v_n->value + 1));
  goto __pyx_L0;

  /* "cyac/trie.pyx":64
 *         n.flags = val
 * 
 *     cdef inline int _node_base(self, Node *n):             # <<<<<<<<<<<<<<
 *         return -(n.value + 1)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":67
 *         return -(n.value + 1)
 * 
 *     cdef inline bool _node_is_child(self, Node *n, int par):             # <<<<<<<<<<<<<<
 *         return n.check == par
 * 
 */

static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie__node_is_child(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n, int __pyx_v_par) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_is_child", 0);

  /* "cyac/trie.pyx":68
 * 
 *     cdef inline bool _node_is_child(self, Node *n, int par):
 *         return n.check == par             # <<<<<<<<<<<<<<
 * 
 *     cdef inline byte_t* _node_child_ptr(self, Node *n):
 */
  __pyx_r = (__pyx_v_n->check == __pyx_v_par);
  goto __pyx_L0;

  /* "cyac/trie.pyx":67
 *         return -(n.value + 1)
 * 
 *     cdef inline bool _node_is_child(self, Node *n, int par):             # <<<<<<<<<<<<<<
 *         return n.check == par
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":70
 *         return n.check == par
 * 
 *     cdef inline byte_t* _node_child_ptr(self, Node *n):             # <<<<<<<<<<<<<<
 *         return &n.child
 * 
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_child_ptr(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n) {
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_child_ptr", 0);

  /* "cyac/trie.pyx":71
 * 
 *     cdef inline byte_t* _node_child_ptr(self, Node *n):
 *         return &n.child             # <<<<<<<<<<<<<<
 * 
 *     cdef inline byte_t* _node_sibling_ptr(self, Node *n):
 */
  __pyx_r = (&__pyx_v_n->child);
  goto __pyx_L0;

  /* "cyac/trie.pyx":70
 *         return n.check == par
 * 
 *     cdef inline byte_t* _node_child_ptr(self, Node *n):             # <<<<<<<<<<<<<<
 *         return &n.child
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":73
 *         return &n.child
 * 
 *     cdef inline byte_t* _node_sibling_ptr(self, Node *n):             # <<<<<<<<<<<<<<
 *         return &n.sibling
 * 
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_n) {
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node_sibling_ptr", 0);

  /* "cyac/trie.pyx":74
 * 
 *     cdef inline byte_t* _node_sibling_ptr(self, Node *n):
 *         return &n.sibling             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (&__pyx_v_n->sibling);
  goto __pyx_L0;

  /* "cyac/trie.pyx":73
 *         return &n.child
 * 
 *     cdef inline byte_t* _node_sibling_ptr(self, Node *n):             # <<<<<<<<<<<<<<
 *         return &n.sibling
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":77
 * 
 * 
 *     cdef inline void _block_init(self, Block* block, int prev, int next_, int trial, int ehead, int num, int reject):             # <<<<<<<<<<<<<<
 *         block.prev = prev
 *         block.next_ = next_
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie__block_init(CYTHON_UNUSED struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Block *__pyx_v_block, int __pyx_v_prev, int __pyx_v_next_, int __pyx_v_trial, int __pyx_v_ehead, int __pyx_v_num, int __pyx_v_reject) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_block_init", 0);

  /* "cyac/trie.pyx":78
 * 
 *     cdef inline void _block_init(self, Block* block, int prev, int next_, int trial, int ehead, int num, int reject):
 *         block.prev = prev             # <<<<<<<<<<<<<<
 *         block.next_ = next_
 *         block.trial = trial
 */
  __pyx_v_block->prev = __pyx_v_prev;

  /* "cyac/trie.pyx":79
 *     cdef inline void _block_init(self, Block* block, int prev, int next_, int trial, int ehead, int num, int reject):
 *         block.prev = prev
 *         block.next_ = next_             # <<<<<<<<<<<<<<
 *         block.trial = trial
 *         block.ehead = ehead
 */
  __pyx_v_block->next_ = __pyx_v_next_;

  /* "cyac/trie.pyx":80
 *         block.prev = prev
 *         block.next_ = next_
 *         block.trial = trial             # <<<<<<<<<<<<<<
 *         block.ehead = ehead
 *         block.num = num
 */
  __pyx_v_block->trial = __pyx_v_trial;

  /* "cyac/trie.pyx":81
 *         block.next_ = next_
 *         block.trial = trial
 *         block.ehead = ehead             # <<<<<<<<<<<<<<
 *         block.num = num
 *         block.reject = reject
 */
  __pyx_v_block->ehead = __pyx_v_ehead;

  /* "cyac/trie.pyx":82
 *         block.trial = trial
 *         block.ehead = ehead
 *         block.num = num             # <<<<<<<<<<<<<<
 *         block.reject = reject
 * 
 */
  __pyx_v_block->num = __pyx_v_num;

  /* "cyac/trie.pyx":83
 *         block.ehead = ehead
 *         block.num = num
 *         block.reject = reject             # <<<<<<<<<<<<<<
 * 
 *     def arr_size(self):
 */
  __pyx_v_block->reject = __pyx_v_reject;

  /* "cyac/trie.pyx":77
 * 
 * 
 *     cdef inline void _block_init(self, Block* block, int prev, int next_, int trial, int ehead, int num, int reject):             # <<<<<<<<<<<<<<
 *         block.prev = prev
 *         block.next_ = next_
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":85
 *         block.reject = reject
 * 
 *     def arr_size(self):             # <<<<<<<<<<<<<<
 *         return self.array_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_1arr_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_1arr_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arr_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_arr_size(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_arr_size(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("arr_size", 0);

  /* "cyac/trie.pyx":86
 * 
 *     def arr_size(self):
 *         return self.array_size             # <<<<<<<<<<<<<<
 * 
 *     property key_num:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->array_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":85
 *         block.reject = reject
 * 
 *     def arr_size(self):             # <<<<<<<<<<<<<<
 *         return self.array_size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.arr_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":89
 * 
 *     property key_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key_num
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_7key_num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_7key_num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_7key_num___get__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_7key_num___get__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cyac/trie.pyx":90
 *     property key_num:
 *         def __get__(self):
 *             return self.key_num             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->key_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":89
 * 
 *     property key_num:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key_num
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.key_num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":93
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key_num
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_4size___get__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_4size___get__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cyac/trie.pyx":94
 *     property size:
 *         def __get__(self):
 *             return self.key_num             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->key_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":93
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.key_num
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":96
 *             return self.key_num
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.key_num
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_4cyac_4trie_4Trie_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_4cyac_4trie_4Trie_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_2__len__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_4cyac_4trie_4Trie_2__len__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "cyac/trie.pyx":97
 * 
 *     def __len__(self):
 *         return self.key_num             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Node* _node(self, int nid):
 */
  __pyx_r = __pyx_v_self->key_num;
  goto __pyx_L0;

  /* "cyac/trie.pyx":96
 *             return self.key_num
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.key_num
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":99
 *         return self.key_num
 * 
 *     cdef inline Node* _node(self, int nid):             # <<<<<<<<<<<<<<
 *         return self.array + nid
 * 
 */

static CYTHON_INLINE struct __pyx_t_4cyac_4trie_Node *__pyx_f_4cyac_4trie_4Trie__node(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_nid) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_node", 0);

  /* "cyac/trie.pyx":100
 * 
 *     cdef inline Node* _node(self, int nid):
 *         return self.array + nid             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, bool ignore_case = False, bool ordered = False):
 */
  __pyx_r = (__pyx_v_self->array + __pyx_v_nid);
  goto __pyx_L0;

  /* "cyac/trie.pyx":99
 *         return self.key_num
 * 
 *     cdef inline Node* _node(self, int nid):             # <<<<<<<<<<<<<<
 *         return self.array + nid
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":102
 *         return self.array + nid
 * 
 *     def __cinit__(self, bool ignore_case = False, bool ordered = False):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         self.last_remove_leaf = value_limit
 */

/* Python wrapper */
static int __pyx_pw_4cyac_4trie_4Trie_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cyac_4trie_4Trie_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_ignore_case;
  bool __pyx_v_ordered;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ignore_case,&__pyx_n_s_ordered,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ignore_case);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_ignore_case = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_ignore_case == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    } else {
      __pyx_v_ignore_case = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_ordered = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_ordered == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    } else {
      __pyx_v_ordered = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_4__cinit__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), __pyx_v_ignore_case, __pyx_v_ordered);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cyac_4trie_4Trie_4__cinit__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, bool __pyx_v_ignore_case, bool __pyx_v_ordered) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cyac/trie.pyx":104
 *     def __cinit__(self, bool ignore_case = False, bool ordered = False):
 *         cdef int i
 *         self.last_remove_leaf = value_limit             # <<<<<<<<<<<<<<
 *         self.ignore_case = ignore_case
 *         self.ordered = ordered
 */
  __pyx_v_self->last_remove_leaf = __pyx_v_4cyac_4trie_value_limit;

  /* "cyac/trie.pyx":105
 *         cdef int i
 *         self.last_remove_leaf = value_limit
 *         self.ignore_case = ignore_case             # <<<<<<<<<<<<<<
 *         self.ordered = ordered
 *         self.capacity = 256
 */
  __pyx_v_self->ignore_case = __pyx_v_ignore_case;

  /* "cyac/trie.pyx":106
 *         self.last_remove_leaf = value_limit
 *         self.ignore_case = ignore_case
 *         self.ordered = ordered             # <<<<<<<<<<<<<<
 *         self.capacity = 256
 *         self.key_num = 0
 */
  __pyx_v_self->ordered = __pyx_v_ordered;

  /* "cyac/trie.pyx":107
 *         self.ignore_case = ignore_case
 *         self.ordered = ordered
 *         self.capacity = 256             # <<<<<<<<<<<<<<
 *         self.key_num = 0
 *         self.leaf_size = 0
 */
  __pyx_v_self->capacity = 0x100;

  /* "cyac/trie.pyx":108
 *         self.ordered = ordered
 *         self.capacity = 256
 *         self.key_num = 0             # <<<<<<<<<<<<<<
 *         self.leaf_size = 0
 *         self.key_capacity = self.capacity
 */
  __pyx_v_self->key_num = 0;

  /* "cyac/trie.pyx":109
 *         self.capacity = 256
 *         self.key_num = 0
 *         self.leaf_size = 0             # <<<<<<<<<<<<<<
 *         self.key_capacity = self.capacity
 *         self.leafs = <int*> malloc(self.key_capacity * sizeof(int))
 */
  __pyx_v_self->leaf_size = 0;

  /* "cyac/trie.pyx":110
 *         self.key_num = 0
 *         self.leaf_size = 0
 *         self.key_capacity = self.capacity             # <<<<<<<<<<<<<<
 *         self.leafs = <int*> malloc(self.key_capacity * sizeof(int))
 *         self.array = <Node*> malloc(self.capacity * sizeof(Node))
 */
  __pyx_t_1 = __pyx_v_self->capacity;
  __pyx_v_self->key_capacity = __pyx_t_1;

  /* "cyac/trie.pyx":111
 *         self.leaf_size = 0
 *         self.key_capacity = self.capacity
 *         self.leafs = <int*> malloc(self.key_capacity * sizeof(int))             # <<<<<<<<<<<<<<
 *         self.array = <Node*> malloc(self.capacity * sizeof(Node))
 *         self.array_size = self.capacity
 */
  __pyx_v_self->leafs = ((int *)malloc((__pyx_v_self->key_capacity * (sizeof(int)))));

  /* "cyac/trie.pyx":112
 *         self.key_capacity = self.capacity
 *         self.leafs = <int*> malloc(self.key_capacity * sizeof(int))
 *         self.array = <Node*> malloc(self.capacity * sizeof(Node))             # <<<<<<<<<<<<<<
 *         self.array_size = self.capacity
 *         self.blocks = <Block*> malloc((self.capacity >> 8) * sizeof(Block))
 */
  __pyx_v_self->array = ((struct __pyx_t_4cyac_4trie_Node *)malloc((__pyx_v_self->capacity * (sizeof(struct __pyx_t_4cyac_4trie_Node)))));

  /* "cyac/trie.pyx":113
 *         self.leafs = <int*> malloc(self.key_capacity * sizeof(int))
 *         self.array = <Node*> malloc(self.capacity * sizeof(Node))
 *         self.array_size = self.capacity             # <<<<<<<<<<<<<<
 *         self.blocks = <Block*> malloc((self.capacity >> 8) * sizeof(Block))
 *         self.max_trial = 1
 */
  __pyx_t_1 = __pyx_v_self->capacity;
  __pyx_v_self->array_size = __pyx_t_1;

  /* "cyac/trie.pyx":114
 *         self.array = <Node*> malloc(self.capacity * sizeof(Node))
 *         self.array_size = self.capacity
 *         self.blocks = <Block*> malloc((self.capacity >> 8) * sizeof(Block))             # <<<<<<<<<<<<<<
 *         self.max_trial = 1
 *         self._node_init(self.array, -1, -1)
 */
  __pyx_v_self->blocks = ((struct __pyx_t_4cyac_4trie_Block *)malloc(((__pyx_v_self->capacity >> 8) * (sizeof(struct __pyx_t_4cyac_4trie_Block)))));

  /* "cyac/trie.pyx":115
 *         self.array_size = self.capacity
 *         self.blocks = <Block*> malloc((self.capacity >> 8) * sizeof(Block))
 *         self.max_trial = 1             # <<<<<<<<<<<<<<
 *         self._node_init(self.array, -1, -1)
 *         for i in range(1, 256):
 */
  __pyx_v_self->max_trial = 1;

  /* "cyac/trie.pyx":116
 *         self.blocks = <Block*> malloc((self.capacity >> 8) * sizeof(Block))
 *         self.max_trial = 1
 *         self._node_init(self.array, -1, -1)             # <<<<<<<<<<<<<<
 *         for i in range(1, 256):
 *             self._node_init(&self.array[i], -(i - 1), -(i + 1))
 */
  __pyx_f_4cyac_4trie_4Trie__node_init(__pyx_v_self, __pyx_v_self->array, -1, -1);

  /* "cyac/trie.pyx":117
 *         self.max_trial = 1
 *         self._node_init(self.array, -1, -1)
 *         for i in range(1, 256):             # <<<<<<<<<<<<<<
 *             self._node_init(&self.array[i], -(i - 1), -(i + 1))
 *         self.array[1].value = -255
 */
  for (__pyx_t_1 = 1; __pyx_t_1 < 0x100; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyac/trie.pyx":118
 *         self._node_init(self.array, -1, -1)
 *         for i in range(1, 256):
 *             self._node_init(&self.array[i], -(i - 1), -(i + 1))             # <<<<<<<<<<<<<<
 *         self.array[1].value = -255
 *         self.array[255].check = -1
 */
    __pyx_f_4cyac_4trie_4Trie__node_init(__pyx_v_self, (&(__pyx_v_self->array[__pyx_v_i])), (-(__pyx_v_i - 1)), (-(__pyx_v_i + 1)));
  }

  /* "cyac/trie.pyx":119
 *         for i in range(1, 256):
 *             self._node_init(&self.array[i], -(i - 1), -(i + 1))
 *         self.array[1].value = -255             # <<<<<<<<<<<<<<
 *         self.array[255].check = -1
 *         self._block_init(self.blocks, 0, 0, 0, 1, 256, 257)
 */
  (__pyx_v_self->array[1]).value = -255;

  /* "cyac/trie.pyx":120
 *             self._node_init(&self.array[i], -(i - 1), -(i + 1))
 *         self.array[1].value = -255
 *         self.array[255].check = -1             # <<<<<<<<<<<<<<
 *         self._block_init(self.blocks, 0, 0, 0, 1, 256, 257)
 *         for i in range(0, 257):
 */
  (__pyx_v_self->array[0xFF]).check = -1;

  /* "cyac/trie.pyx":121
 *         self.array[1].value = -255
 *         self.array[255].check = -1
 *         self._block_init(self.blocks, 0, 0, 0, 1, 256, 257)             # <<<<<<<<<<<<<<
 *         for i in range(0, 257):
 *             self.reject[i] = i + 1
 */
  __pyx_f_4cyac_4trie_4Trie__block_init(__pyx_v_self, __pyx_v_self->blocks, 0, 0, 0, 1, 0x100, 0x101);

  /* "cyac/trie.pyx":122
 *         self.array[255].check = -1
 *         self._block_init(self.blocks, 0, 0, 0, 1, 256, 257)
 *         for i in range(0, 257):             # <<<<<<<<<<<<<<
 *             self.reject[i] = i + 1
 * 
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 0x101; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cyac/trie.pyx":123
 *         self._block_init(self.blocks, 0, 0, 0, 1, 256, 257)
 *         for i in range(0, 257):
 *             self.reject[i] = i + 1             # <<<<<<<<<<<<<<
 * 
 *         self.bheadF = 0
 */
    (__pyx_v_self->reject[__pyx_v_i]) = (__pyx_v_i + 1);
  }

  /* "cyac/trie.pyx":125
 *             self.reject[i] = i + 1
 * 
 *         self.bheadF = 0             # <<<<<<<<<<<<<<
 *         self.bheadC = 0
 *         self.bheadO = 0
 */
  __pyx_v_self->bheadF = 0;

  /* "cyac/trie.pyx":126
 * 
 *         self.bheadF = 0
 *         self.bheadC = 0             # <<<<<<<<<<<<<<
 *         self.bheadO = 0
 *         self.buff = NULL
 */
  __pyx_v_self->bheadC = 0;

  /* "cyac/trie.pyx":127
 *         self.bheadF = 0
 *         self.bheadC = 0
 *         self.bheadO = 0             # <<<<<<<<<<<<<<
 *         self.buff = NULL
 * 
 */
  __pyx_v_self->bheadO = 0;

  /* "cyac/trie.pyx":128
 *         self.bheadC = 0
 *         self.bheadO = 0
 *         self.buff = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int _get(self, byte_t *key, int key_size, int from_, int start):
 */
  __pyx_v_self->buff = NULL;

  /* "cyac/trie.pyx":102
 *         return self.array + nid
 * 
 *     def __cinit__(self, bool ignore_case = False, bool ordered = False):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         self.last_remove_leaf = value_limit
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":130
 *         self.buff = NULL
 * 
 *     cdef inline int _get(self, byte_t *key, int key_size, int from_, int start):             # <<<<<<<<<<<<<<
 *         cdef int pos, value, to
 *         for pos in range(start, key_size):
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie__get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_key, int __pyx_v_key_size, int __pyx_v_from_, int __pyx_v_start) {
  int __pyx_v_pos;
  int __pyx_v_value;
  int __pyx_v_to;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_get", 0);

  /* "cyac/trie.pyx":132
 *     cdef inline int _get(self, byte_t *key, int key_size, int from_, int start):
 *         cdef int pos, value, to
 *         for pos in range(start, key_size):             # <<<<<<<<<<<<<<
 *             value = self.array[from_].value
 *             if value >= 0 and value != value_limit:
 */
  __pyx_t_1 = __pyx_v_key_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_v_start; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_pos = __pyx_t_3;

    /* "cyac/trie.pyx":133
 *         cdef int pos, value, to
 *         for pos in range(start, key_size):
 *             value = self.array[from_].value             # <<<<<<<<<<<<<<
 *             if value >= 0 and value != value_limit:
 *                 to = self.follow(from_, 0)
 */
    __pyx_t_4 = (__pyx_v_self->array[__pyx_v_from_]).value;
    __pyx_v_value = __pyx_t_4;

    /* "cyac/trie.pyx":134
 *         for pos in range(start, key_size):
 *             value = self.array[from_].value
 *             if value >= 0 and value != value_limit:             # <<<<<<<<<<<<<<
 *                 to = self.follow(from_, 0)
 *                 self.array[to].value = value
 */
    __pyx_t_6 = ((__pyx_v_value >= 0) != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_6 = ((__pyx_v_value != __pyx_v_4cyac_4trie_value_limit) != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_5) {

      /* "cyac/trie.pyx":135
 *             value = self.array[from_].value
 *             if value >= 0 and value != value_limit:
 *                 to = self.follow(from_, 0)             # <<<<<<<<<<<<<<
 *                 self.array[to].value = value
 *                 self.leafs[value] = to
 */
      __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_follow(__pyx_v_self, __pyx_v_from_, 0);

      /* "cyac/trie.pyx":136
 *             if value >= 0 and value != value_limit:
 *                 to = self.follow(from_, 0)
 *                 self.array[to].value = value             # <<<<<<<<<<<<<<
 *                 self.leafs[value] = to
 *             from_ = self.follow(from_, key[pos])
 */
      (__pyx_v_self->array[__pyx_v_to]).value = __pyx_v_value;

      /* "cyac/trie.pyx":137
 *                 to = self.follow(from_, 0)
 *                 self.array[to].value = value
 *                 self.leafs[value] = to             # <<<<<<<<<<<<<<
 *             from_ = self.follow(from_, key[pos])
 *         if self.array[from_].value < 0:
 */
      (__pyx_v_self->leafs[__pyx_v_value]) = __pyx_v_to;

      /* "cyac/trie.pyx":134
 *         for pos in range(start, key_size):
 *             value = self.array[from_].value
 *             if value >= 0 and value != value_limit:             # <<<<<<<<<<<<<<
 *                 to = self.follow(from_, 0)
 *                 self.array[to].value = value
 */
    }

    /* "cyac/trie.pyx":138
 *                 self.array[to].value = value
 *                 self.leafs[value] = to
 *             from_ = self.follow(from_, key[pos])             # <<<<<<<<<<<<<<
 *         if self.array[from_].value < 0:
 *             return self.follow(from_, 0)
 */
    __pyx_v_from_ = __pyx_f_4cyac_4trie_4Trie_follow(__pyx_v_self, __pyx_v_from_, (__pyx_v_key[__pyx_v_pos]));
  }

  /* "cyac/trie.pyx":139
 *                 self.leafs[value] = to
 *             from_ = self.follow(from_, key[pos])
 *         if self.array[from_].value < 0:             # <<<<<<<<<<<<<<
 *             return self.follow(from_, 0)
 *         else:
 */
  __pyx_t_5 = (((__pyx_v_self->array[__pyx_v_from_]).value < 0) != 0);
  if (__pyx_t_5) {

    /* "cyac/trie.pyx":140
 *             from_ = self.follow(from_, key[pos])
 *         if self.array[from_].value < 0:
 *             return self.follow(from_, 0)             # <<<<<<<<<<<<<<
 *         else:
 *             return from_
 */
    __pyx_r = __pyx_f_4cyac_4trie_4Trie_follow(__pyx_v_self, __pyx_v_from_, 0);
    goto __pyx_L0;

    /* "cyac/trie.pyx":139
 *                 self.leafs[value] = to
 *             from_ = self.follow(from_, key[pos])
 *         if self.array[from_].value < 0:             # <<<<<<<<<<<<<<
 *             return self.follow(from_, 0)
 *         else:
 */
  }

  /* "cyac/trie.pyx":142
 *             return self.follow(from_, 0)
 *         else:
 *             return from_             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int follow(self, int from_, byte_t label):
 */
  /*else*/ {
    __pyx_r = __pyx_v_from_;
    goto __pyx_L0;
  }

  /* "cyac/trie.pyx":130
 *         self.buff = NULL
 * 
 *     cdef inline int _get(self, byte_t *key, int key_size, int from_, int start):             # <<<<<<<<<<<<<<
 *         cdef int pos, value, to
 *         for pos in range(start, key_size):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":144
 *             return from_
 * 
 *     cdef inline int follow(self, int from_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&self.array[from_])
 *         cdef int to = base ^ label
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_follow(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label) {
  int __pyx_v_base;
  int __pyx_v_to;
  bool __pyx_v_has_child;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  __Pyx_RefNannySetupContext("follow", 0);

  /* "cyac/trie.pyx":145
 * 
 *     cdef inline int follow(self, int from_, byte_t label):
 *         cdef int base = self._node_base(&self.array[from_])             # <<<<<<<<<<<<<<
 *         cdef int to = base ^ label
 *         cdef bool has_child
 */
  __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_self->array[__pyx_v_from_])));

  /* "cyac/trie.pyx":146
 *     cdef inline int follow(self, int from_, byte_t label):
 *         cdef int base = self._node_base(&self.array[from_])
 *         cdef int to = base ^ label             # <<<<<<<<<<<<<<
 *         cdef bool has_child
 *         if base < 0  or self.array[to].check < 0:
 */
  __pyx_v_to = (__pyx_v_base ^ __pyx_v_label);

  /* "cyac/trie.pyx":148
 *         cdef int to = base ^ label
 *         cdef bool has_child
 *         if base < 0  or self.array[to].check < 0:             # <<<<<<<<<<<<<<
 *             has_child = base >= 0 and self.array[base ^ self.array[from_].child].check == from_
 *             to = self.pop_enode(base, label, from_)
 */
  __pyx_t_2 = ((__pyx_v_base < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (((__pyx_v_self->array[__pyx_v_to]).check < 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":149
 *         cdef bool has_child
 *         if base < 0  or self.array[to].check < 0:
 *             has_child = base >= 0 and self.array[base ^ self.array[from_].child].check == from_             # <<<<<<<<<<<<<<
 *             to = self.pop_enode(base, label, from_)
 *             self.push_sibling(from_, to^label, label, has_child)
 */
    __pyx_t_1 = (__pyx_v_base >= 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_3 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_self->array[(__pyx_v_base ^ (__pyx_v_self->array[__pyx_v_from_]).child)]).check == __pyx_v_from_);
    __pyx_t_3 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_has_child = __pyx_t_3;

    /* "cyac/trie.pyx":150
 *         if base < 0  or self.array[to].check < 0:
 *             has_child = base >= 0 and self.array[base ^ self.array[from_].child].check == from_
 *             to = self.pop_enode(base, label, from_)             # <<<<<<<<<<<<<<
 *             self.push_sibling(from_, to^label, label, has_child)
 *         elif self.array[to].check != from_:
 */
    __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_pop_enode(__pyx_v_self, __pyx_v_base, __pyx_v_label, __pyx_v_from_);

    /* "cyac/trie.pyx":151
 *             has_child = base >= 0 and self.array[base ^ self.array[from_].child].check == from_
 *             to = self.pop_enode(base, label, from_)
 *             self.push_sibling(from_, to^label, label, has_child)             # <<<<<<<<<<<<<<
 *         elif self.array[to].check != from_:
 *             to = self.resolve(from_, base, label)
 */
    __pyx_f_4cyac_4trie_4Trie_push_sibling(__pyx_v_self, __pyx_v_from_, (__pyx_v_to ^ __pyx_v_label), __pyx_v_label, __pyx_v_has_child);

    /* "cyac/trie.pyx":148
 *         cdef int to = base ^ label
 *         cdef bool has_child
 *         if base < 0  or self.array[to].check < 0:             # <<<<<<<<<<<<<<
 *             has_child = base >= 0 and self.array[base ^ self.array[from_].child].check == from_
 *             to = self.pop_enode(base, label, from_)
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":152
 *             to = self.pop_enode(base, label, from_)
 *             self.push_sibling(from_, to^label, label, has_child)
 *         elif self.array[to].check != from_:             # <<<<<<<<<<<<<<
 *             to = self.resolve(from_, base, label)
 *         return to
 */
  __pyx_t_1 = (((__pyx_v_self->array[__pyx_v_to]).check != __pyx_v_from_) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":153
 *             self.push_sibling(from_, to^label, label, has_child)
 *         elif self.array[to].check != from_:
 *             to = self.resolve(from_, base, label)             # <<<<<<<<<<<<<<
 *         return to
 * 
 */
    __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_resolve(__pyx_v_self, __pyx_v_from_, __pyx_v_base, __pyx_v_label);

    /* "cyac/trie.pyx":152
 *             to = self.pop_enode(base, label, from_)
 *             self.push_sibling(from_, to^label, label, has_child)
 *         elif self.array[to].check != from_:             # <<<<<<<<<<<<<<
 *             to = self.resolve(from_, base, label)
 *         return to
 */
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":154
 *         elif self.array[to].check != from_:
 *             to = self.resolve(from_, base, label)
 *         return to             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):
 */
  __pyx_r = __pyx_v_to;
  goto __pyx_L0;

  /* "cyac/trie.pyx":144
 *             return from_
 * 
 *     cdef inline int follow(self, int from_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&self.array[from_])
 *         cdef int to = base ^ label
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":156
 *         return to
 * 
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):             # <<<<<<<<<<<<<<
 *         if last:
 *             head_in[0] = 0
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_in, bool __pyx_v_last) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("pop_block", 0);

  /* "cyac/trie.pyx":157
 * 
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):
 *         if last:             # <<<<<<<<<<<<<<
 *             head_in[0] = 0
 *         else:
 */
  __pyx_t_1 = (__pyx_v_last != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":158
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):
 *         if last:
 *             head_in[0] = 0             # <<<<<<<<<<<<<<
 *         else:
 *             self.blocks[self.blocks[bi].prev].next_ = self.blocks[bi].next_
 */
    (__pyx_v_head_in[0]) = 0;

    /* "cyac/trie.pyx":157
 * 
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):
 *         if last:             # <<<<<<<<<<<<<<
 *             head_in[0] = 0
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":160
 *             head_in[0] = 0
 *         else:
 *             self.blocks[self.blocks[bi].prev].next_ = self.blocks[bi].next_             # <<<<<<<<<<<<<<
 *             self.blocks[self.blocks[bi].next_].prev = self.blocks[bi].prev
 *             if bi == head_in[0]:
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->blocks[__pyx_v_bi]).next_;
    (__pyx_v_self->blocks[(__pyx_v_self->blocks[__pyx_v_bi]).prev]).next_ = __pyx_t_2;

    /* "cyac/trie.pyx":161
 *         else:
 *             self.blocks[self.blocks[bi].prev].next_ = self.blocks[bi].next_
 *             self.blocks[self.blocks[bi].next_].prev = self.blocks[bi].prev             # <<<<<<<<<<<<<<
 *             if bi == head_in[0]:
 *                 head_in[0] = self.blocks[bi].next_
 */
    __pyx_t_2 = (__pyx_v_self->blocks[__pyx_v_bi]).prev;
    (__pyx_v_self->blocks[(__pyx_v_self->blocks[__pyx_v_bi]).next_]).prev = __pyx_t_2;

    /* "cyac/trie.pyx":162
 *             self.blocks[self.blocks[bi].prev].next_ = self.blocks[bi].next_
 *             self.blocks[self.blocks[bi].next_].prev = self.blocks[bi].prev
 *             if bi == head_in[0]:             # <<<<<<<<<<<<<<
 *                 head_in[0] = self.blocks[bi].next_
 * 
 */
    __pyx_t_1 = ((__pyx_v_bi == (__pyx_v_head_in[0])) != 0);
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":163
 *             self.blocks[self.blocks[bi].next_].prev = self.blocks[bi].prev
 *             if bi == head_in[0]:
 *                 head_in[0] = self.blocks[bi].next_             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void push_block(self, int bi, int* head_out, bool empty):
 */
      __pyx_t_2 = (__pyx_v_self->blocks[__pyx_v_bi]).next_;
      (__pyx_v_head_in[0]) = __pyx_t_2;

      /* "cyac/trie.pyx":162
 *             self.blocks[self.blocks[bi].prev].next_ = self.blocks[bi].next_
 *             self.blocks[self.blocks[bi].next_].prev = self.blocks[bi].prev
 *             if bi == head_in[0]:             # <<<<<<<<<<<<<<
 *                 head_in[0] = self.blocks[bi].next_
 * 
 */
    }
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":156
 *         return to
 * 
 *     cdef inline void pop_block(self, int bi, int* head_in, bool last):             # <<<<<<<<<<<<<<
 *         if last:
 *             head_in[0] = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":165
 *                 head_in[0] = self.blocks[bi].next_
 * 
 *     cdef inline void push_block(self, int bi, int* head_out, bool empty):             # <<<<<<<<<<<<<<
 *         cdef Block *tail_out
 *         cdef Block *b = self.blocks + bi
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_out, bool __pyx_v_empty) {
  struct __pyx_t_4cyac_4trie_Block *__pyx_v_tail_out;
  struct __pyx_t_4cyac_4trie_Block *__pyx_v_b;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("push_block", 0);

  /* "cyac/trie.pyx":167
 *     cdef inline void push_block(self, int bi, int* head_out, bool empty):
 *         cdef Block *tail_out
 *         cdef Block *b = self.blocks + bi             # <<<<<<<<<<<<<<
 *         if empty:
 *             head_out[0] = bi
 */
  __pyx_v_b = (__pyx_v_self->blocks + __pyx_v_bi);

  /* "cyac/trie.pyx":168
 *         cdef Block *tail_out
 *         cdef Block *b = self.blocks + bi
 *         if empty:             # <<<<<<<<<<<<<<
 *             head_out[0] = bi
 *             b.prev = bi
 */
  __pyx_t_1 = (__pyx_v_empty != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":169
 *         cdef Block *b = self.blocks + bi
 *         if empty:
 *             head_out[0] = bi             # <<<<<<<<<<<<<<
 *             b.prev = bi
 *             b.next_ = bi
 */
    (__pyx_v_head_out[0]) = __pyx_v_bi;

    /* "cyac/trie.pyx":170
 *         if empty:
 *             head_out[0] = bi
 *             b.prev = bi             # <<<<<<<<<<<<<<
 *             b.next_ = bi
 *         else:
 */
    __pyx_v_b->prev = __pyx_v_bi;

    /* "cyac/trie.pyx":171
 *             head_out[0] = bi
 *             b.prev = bi
 *             b.next_ = bi             # <<<<<<<<<<<<<<
 *         else:
 *             tail_out = &self.blocks[head_out[0]]
 */
    __pyx_v_b->next_ = __pyx_v_bi;

    /* "cyac/trie.pyx":168
 *         cdef Block *tail_out
 *         cdef Block *b = self.blocks + bi
 *         if empty:             # <<<<<<<<<<<<<<
 *             head_out[0] = bi
 *             b.prev = bi
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":173
 *             b.next_ = bi
 *         else:
 *             tail_out = &self.blocks[head_out[0]]             # <<<<<<<<<<<<<<
 *             b.prev = tail_out[0].prev
 *             b.next_ = head_out[0]
 */
  /*else*/ {
    __pyx_v_tail_out = (&(__pyx_v_self->blocks[(__pyx_v_head_out[0])]));

    /* "cyac/trie.pyx":174
 *         else:
 *             tail_out = &self.blocks[head_out[0]]
 *             b.prev = tail_out[0].prev             # <<<<<<<<<<<<<<
 *             b.next_ = head_out[0]
 *             self.blocks[tail_out.prev].next_ = bi
 */
    __pyx_t_2 = (__pyx_v_tail_out[0]).prev;
    __pyx_v_b->prev = __pyx_t_2;

    /* "cyac/trie.pyx":175
 *             tail_out = &self.blocks[head_out[0]]
 *             b.prev = tail_out[0].prev
 *             b.next_ = head_out[0]             # <<<<<<<<<<<<<<
 *             self.blocks[tail_out.prev].next_ = bi
 *             head_out[0] = bi
 */
    __pyx_v_b->next_ = (__pyx_v_head_out[0]);

    /* "cyac/trie.pyx":176
 *             b.prev = tail_out[0].prev
 *             b.next_ = head_out[0]
 *             self.blocks[tail_out.prev].next_ = bi             # <<<<<<<<<<<<<<
 *             head_out[0] = bi
 *             tail_out[0].prev = bi
 */
    (__pyx_v_self->blocks[__pyx_v_tail_out->prev]).next_ = __pyx_v_bi;

    /* "cyac/trie.pyx":177
 *             b.next_ = head_out[0]
 *             self.blocks[tail_out.prev].next_ = bi
 *             head_out[0] = bi             # <<<<<<<<<<<<<<
 *             tail_out[0].prev = bi
 * 
 */
    (__pyx_v_head_out[0]) = __pyx_v_bi;

    /* "cyac/trie.pyx":178
 *             self.blocks[tail_out.prev].next_ = bi
 *             head_out[0] = bi
 *             tail_out[0].prev = bi             # <<<<<<<<<<<<<<
 * 
 *     cdef int add_block(self):
 */
    (__pyx_v_tail_out[0]).prev = __pyx_v_bi;
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":165
 *                 head_in[0] = self.blocks[bi].next_
 * 
 *     cdef inline void push_block(self, int bi, int* head_out, bool empty):             # <<<<<<<<<<<<<<
 *         cdef Block *tail_out
 *         cdef Block *b = self.blocks + bi
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":180
 *             tail_out[0].prev = bi
 * 
 *     cdef int add_block(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if self.array_size == self.capacity:
 */

static int __pyx_f_4cyac_4trie_4Trie_add_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("add_block", 0);

  /* "cyac/trie.pyx":182
 *     cdef int add_block(self):
 *         cdef int i
 *         if self.array_size == self.capacity:             # <<<<<<<<<<<<<<
 *             self.capacity *= 2
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))
 */
  __pyx_t_1 = ((__pyx_v_self->array_size == __pyx_v_self->capacity) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":183
 *         cdef int i
 *         if self.array_size == self.capacity:
 *             self.capacity *= 2             # <<<<<<<<<<<<<<
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))
 *             self.array = <Node*> realloc(self.array, sizeof(Node) * self.capacity)
 */
    __pyx_v_self->capacity = (__pyx_v_self->capacity * 2);

    /* "cyac/trie.pyx":184
 *         if self.array_size == self.capacity:
 *             self.capacity *= 2
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))             # <<<<<<<<<<<<<<
 *             self.array = <Node*> realloc(self.array, sizeof(Node) * self.capacity)
 *         self._block_init(&self.blocks[self.array_size >> 8], 0,0,0, self.array_size, 256, 257)
 */
    __pyx_v_self->blocks = ((struct __pyx_t_4cyac_4trie_Block *)realloc(__pyx_v_self->blocks, ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_self->capacity >> 8))));

    /* "cyac/trie.pyx":185
 *             self.capacity *= 2
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))
 *             self.array = <Node*> realloc(self.array, sizeof(Node) * self.capacity)             # <<<<<<<<<<<<<<
 *         self._block_init(&self.blocks[self.array_size >> 8], 0,0,0, self.array_size, 256, 257)
 *         for i in range(0, 256):
 */
    __pyx_v_self->array = ((struct __pyx_t_4cyac_4trie_Node *)realloc(__pyx_v_self->array, ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_self->capacity)));

    /* "cyac/trie.pyx":182
 *     cdef int add_block(self):
 *         cdef int i
 *         if self.array_size == self.capacity:             # <<<<<<<<<<<<<<
 *             self.capacity *= 2
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))
 */
  }

  /* "cyac/trie.pyx":186
 *             self.blocks = <Block*> realloc(self.blocks, sizeof(Block) * (self.capacity >> 8))
 *             self.array = <Node*> realloc(self.array, sizeof(Node) * self.capacity)
 *         self._block_init(&self.blocks[self.array_size >> 8], 0,0,0, self.array_size, 256, 257)             # <<<<<<<<<<<<<<
 *         for i in range(0, 256):
 *             self._node_init(
 */
  __pyx_f_4cyac_4trie_4Trie__block_init(__pyx_v_self, (&(__pyx_v_self->blocks[(__pyx_v_self->array_size >> 8)])), 0, 0, 0, __pyx_v_self->array_size, 0x100, 0x101);

  /* "cyac/trie.pyx":187
 *             self.array = <Node*> realloc(self.array, sizeof(Node) * self.capacity)
 *         self._block_init(&self.blocks[self.array_size >> 8], 0,0,0, self.array_size, 256, 257)
 *         for i in range(0, 256):             # <<<<<<<<<<<<<<
 *             self._node_init(
 *                 &self.array[self.array_size + i],
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 0x100; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "cyac/trie.pyx":188
 *         self._block_init(&self.blocks[self.array_size >> 8], 0,0,0, self.array_size, 256, 257)
 *         for i in range(0, 256):
 *             self._node_init(             # <<<<<<<<<<<<<<
 *                 &self.array[self.array_size + i],
 *                  -(((i + 255) & 255) + self.array_size),
 */
    __pyx_f_4cyac_4trie_4Trie__node_init(__pyx_v_self, (&(__pyx_v_self->array[(__pyx_v_self->array_size + __pyx_v_i)])), (-(((__pyx_v_i + 0xFF) & 0xFF) + __pyx_v_self->array_size)), (-(((__pyx_v_i + 1) & 0xFF) + __pyx_v_self->array_size)));
  }

  /* "cyac/trie.pyx":192
 *                  -(((i + 255) & 255) + self.array_size),
 *                  -(((i + 1) & 255) + self.array_size))
 *         self.push_block(self.array_size >> 8, &self.bheadO, self.bheadO == 0)             # <<<<<<<<<<<<<<
 *         self.array_size += 256
 *         return (self.array_size >> 8) - 1
 */
  __pyx_f_4cyac_4trie_4Trie_push_block(__pyx_v_self, (__pyx_v_self->array_size >> 8), (&__pyx_v_self->bheadO), (__pyx_v_self->bheadO == 0));

  /* "cyac/trie.pyx":193
 *                  -(((i + 1) & 255) + self.array_size))
 *         self.push_block(self.array_size >> 8, &self.bheadO, self.bheadO == 0)
 *         self.array_size += 256             # <<<<<<<<<<<<<<
 *         return (self.array_size >> 8) - 1
 * 
 */
  __pyx_v_self->array_size = (__pyx_v_self->array_size + 0x100);

  /* "cyac/trie.pyx":194
 *         self.push_block(self.array_size >> 8, &self.bheadO, self.bheadO == 0)
 *         self.array_size += 256
 *         return (self.array_size >> 8) - 1             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void transfer_block(self, int bi, int* head_in, int* head_out):
 */
  __pyx_r = ((__pyx_v_self->array_size >> 8) - 1);
  goto __pyx_L0;

  /* "cyac/trie.pyx":180
 *             tail_out[0].prev = bi
 * 
 *     cdef int add_block(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if self.array_size == self.capacity:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":196
 *         return (self.array_size >> 8) - 1
 * 
 *     cdef inline void transfer_block(self, int bi, int* head_in, int* head_out):             # <<<<<<<<<<<<<<
 *         self.pop_block(bi, head_in, bi == self.blocks[bi].next_)
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_transfer_block(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_bi, int *__pyx_v_head_in, int *__pyx_v_head_out) {
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("transfer_block", 0);

  /* "cyac/trie.pyx":197
 * 
 *     cdef inline void transfer_block(self, int bi, int* head_in, int* head_out):
 *         self.pop_block(bi, head_in, bi == self.blocks[bi].next_)             # <<<<<<<<<<<<<<
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)
 * 
 */
  __pyx_f_4cyac_4trie_4Trie_pop_block(__pyx_v_self, __pyx_v_bi, __pyx_v_head_in, (__pyx_v_bi == (__pyx_v_self->blocks[__pyx_v_bi]).next_));

  /* "cyac/trie.pyx":198
 *     cdef inline void transfer_block(self, int bi, int* head_in, int* head_out):
 *         self.pop_block(bi, head_in, bi == self.blocks[bi].next_)
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int pop_enode(self, int base, byte_t label, int from_):
 */
  __pyx_t_2 = ((__pyx_v_head_out[0]) == 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->blocks[__pyx_v_bi]).num != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_f_4cyac_4trie_4Trie_push_block(__pyx_v_self, __pyx_v_bi, __pyx_v_head_out, __pyx_t_1);

  /* "cyac/trie.pyx":196
 *         return (self.array_size >> 8) - 1
 * 
 *     cdef inline void transfer_block(self, int bi, int* head_in, int* head_out):             # <<<<<<<<<<<<<<
 *         self.pop_block(bi, head_in, bi == self.blocks[bi].next_)
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":200
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)
 * 
 *     cdef inline int pop_enode(self, int base, byte_t label, int from_):             # <<<<<<<<<<<<<<
 *         cdef int e = self.find_place() if base < 0 else (base ^ label)
 *         cdef int bi = e >> 8
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_pop_enode(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, int __pyx_v_from_) {
  int __pyx_v_e;
  int __pyx_v_bi;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_n;
  struct __pyx_t_4cyac_4trie_Block *__pyx_v_b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("pop_enode", 0);

  /* "cyac/trie.pyx":201
 * 
 *     cdef inline int pop_enode(self, int base, byte_t label, int from_):
 *         cdef int e = self.find_place() if base < 0 else (base ^ label)             # <<<<<<<<<<<<<<
 *         cdef int bi = e >> 8
 *         cdef Node *n = &self.array[e]
 */
  if (((__pyx_v_base < 0) != 0)) {
    __pyx_t_1 = __pyx_f_4cyac_4trie_4Trie_find_place(__pyx_v_self);
  } else {
    __pyx_t_1 = (__pyx_v_base ^ __pyx_v_label);
  }
  __pyx_v_e = __pyx_t_1;

  /* "cyac/trie.pyx":202
 *     cdef inline int pop_enode(self, int base, byte_t label, int from_):
 *         cdef int e = self.find_place() if base < 0 else (base ^ label)
 *         cdef int bi = e >> 8             # <<<<<<<<<<<<<<
 *         cdef Node *n = &self.array[e]
 *         cdef Block *b = &self.blocks[bi]
 */
  __pyx_v_bi = (__pyx_v_e >> 8);

  /* "cyac/trie.pyx":203
 *         cdef int e = self.find_place() if base < 0 else (base ^ label)
 *         cdef int bi = e >> 8
 *         cdef Node *n = &self.array[e]             # <<<<<<<<<<<<<<
 *         cdef Block *b = &self.blocks[bi]
 *         b.num -= 1
 */
  __pyx_v_n = (&(__pyx_v_self->array[__pyx_v_e]));

  /* "cyac/trie.pyx":204
 *         cdef int bi = e >> 8
 *         cdef Node *n = &self.array[e]
 *         cdef Block *b = &self.blocks[bi]             # <<<<<<<<<<<<<<
 *         b.num -= 1
 *         if b.num == 0:
 */
  __pyx_v_b = (&(__pyx_v_self->blocks[__pyx_v_bi]));

  /* "cyac/trie.pyx":205
 *         cdef Node *n = &self.array[e]
 *         cdef Block *b = &self.blocks[bi]
 *         b.num -= 1             # <<<<<<<<<<<<<<
 *         if b.num == 0:
 *             if bi != 0:
 */
  __pyx_v_b->num = (__pyx_v_b->num - 1);

  /* "cyac/trie.pyx":206
 *         cdef Block *b = &self.blocks[bi]
 *         b.num -= 1
 *         if b.num == 0:             # <<<<<<<<<<<<<<
 *             if bi != 0:
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)
 */
  __pyx_t_2 = ((__pyx_v_b->num == 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":207
 *         b.num -= 1
 *         if b.num == 0:
 *             if bi != 0:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_bi != 0) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":208
 *         if b.num == 0:
 *             if bi != 0:
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)             # <<<<<<<<<<<<<<
 *         else:
 *             self.array[-n.value].check = n.check
 */
      __pyx_f_4cyac_4trie_4Trie_transfer_block(__pyx_v_self, __pyx_v_bi, (&__pyx_v_self->bheadC), (&__pyx_v_self->bheadF));

      /* "cyac/trie.pyx":207
 *         b.num -= 1
 *         if b.num == 0:
 *             if bi != 0:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)
 *         else:
 */
    }

    /* "cyac/trie.pyx":206
 *         cdef Block *b = &self.blocks[bi]
 *         b.num -= 1
 *         if b.num == 0:             # <<<<<<<<<<<<<<
 *             if bi != 0:
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":210
 *                 self.transfer_block(bi, &self.bheadC, &self.bheadF)
 *         else:
 *             self.array[-n.value].check = n.check             # <<<<<<<<<<<<<<
 *             self.array[-n.check].value = n.value
 *             if e == b.ehead:
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_n->check;
    (__pyx_v_self->array[(-__pyx_v_n->value)]).check = __pyx_t_1;

    /* "cyac/trie.pyx":211
 *         else:
 *             self.array[-n.value].check = n.check
 *             self.array[-n.check].value = n.value             # <<<<<<<<<<<<<<
 *             if e == b.ehead:
 *                 b.ehead = -n.check
 */
    __pyx_t_1 = __pyx_v_n->value;
    (__pyx_v_self->array[(-__pyx_v_n->check)]).value = __pyx_t_1;

    /* "cyac/trie.pyx":212
 *             self.array[-n.value].check = n.check
 *             self.array[-n.check].value = n.value
 *             if e == b.ehead:             # <<<<<<<<<<<<<<
 *                 b.ehead = -n.check
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:
 */
    __pyx_t_2 = ((__pyx_v_e == __pyx_v_b->ehead) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":213
 *             self.array[-n.check].value = n.value
 *             if e == b.ehead:
 *                 b.ehead = -n.check             # <<<<<<<<<<<<<<
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)
 */
      __pyx_v_b->ehead = (-__pyx_v_n->check);

      /* "cyac/trie.pyx":212
 *             self.array[-n.value].check = n.check
 *             self.array[-n.check].value = n.value
 *             if e == b.ehead:             # <<<<<<<<<<<<<<
 *                 b.ehead = -n.check
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:
 */
    }

    /* "cyac/trie.pyx":214
 *             if e == b.ehead:
 *                 b.ehead = -n.check
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *         n.value = value_limit
 */
    __pyx_t_3 = ((__pyx_v_bi != 0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_b->num == 1) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_b->trial != __pyx_v_self->max_trial) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":215
 *                 b.ehead = -n.check
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)             # <<<<<<<<<<<<<<
 *         n.value = value_limit
 *         n.check = from_
 */
      __pyx_f_4cyac_4trie_4Trie_transfer_block(__pyx_v_self, __pyx_v_bi, (&__pyx_v_self->bheadO), (&__pyx_v_self->bheadC));

      /* "cyac/trie.pyx":214
 *             if e == b.ehead:
 *                 b.ehead = -n.check
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *         n.value = value_limit
 */
    }
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":216
 *             if bi != 0 and b.num == 1 and b.trial != self.max_trial:
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *         n.value = value_limit             # <<<<<<<<<<<<<<
 *         n.check = from_
 *         if base < 0:
 */
  __pyx_v_n->value = __pyx_v_4cyac_4trie_value_limit;

  /* "cyac/trie.pyx":217
 *                 self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *         n.value = value_limit
 *         n.check = from_             # <<<<<<<<<<<<<<
 *         if base < 0:
 *             self.array[from_].value = -(e^label) - 1
 */
  __pyx_v_n->check = __pyx_v_from_;

  /* "cyac/trie.pyx":218
 *         n.value = value_limit
 *         n.check = from_
 *         if base < 0:             # <<<<<<<<<<<<<<
 *             self.array[from_].value = -(e^label) - 1
 *         return e
 */
  __pyx_t_2 = ((__pyx_v_base < 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":219
 *         n.check = from_
 *         if base < 0:
 *             self.array[from_].value = -(e^label) - 1             # <<<<<<<<<<<<<<
 *         return e
 * 
 */
    (__pyx_v_self->array[__pyx_v_from_]).value = ((-(__pyx_v_e ^ __pyx_v_label)) - 1);

    /* "cyac/trie.pyx":218
 *         n.value = value_limit
 *         n.check = from_
 *         if base < 0:             # <<<<<<<<<<<<<<
 *             self.array[from_].value = -(e^label) - 1
 *         return e
 */
  }

  /* "cyac/trie.pyx":220
 *         if base < 0:
 *             self.array[from_].value = -(e^label) - 1
 *         return e             # <<<<<<<<<<<<<<
 * 
 *     cdef void push_enode(self, int e):
 */
  __pyx_r = __pyx_v_e;
  goto __pyx_L0;

  /* "cyac/trie.pyx":200
 *         self.push_block(bi, head_out, head_out[0] == 0 and self.blocks[bi].num != 0)
 * 
 *     cdef inline int pop_enode(self, int base, byte_t label, int from_):             # <<<<<<<<<<<<<<
 *         cdef int e = self.find_place() if base < 0 else (base ^ label)
 *         cdef int bi = e >> 8
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":222
 *         return e
 * 
 *     cdef void push_enode(self, int e):             # <<<<<<<<<<<<<<
 *         cdef Node *e_ptr = &self.array[e]
 *         cdef int bi = e >> 8
 */

static void __pyx_f_4cyac_4trie_4Trie_push_enode(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_e) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_e_ptr;
  int __pyx_v_bi;
  struct __pyx_t_4cyac_4trie_Block *__pyx_v_b;
  int __pyx_v_prev;
  int __pyx_v_next_;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_prev_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("push_enode", 0);

  /* "cyac/trie.pyx":223
 * 
 *     cdef void push_enode(self, int e):
 *         cdef Node *e_ptr = &self.array[e]             # <<<<<<<<<<<<<<
 *         cdef int bi = e >> 8
 *         cdef Block *b = &self.blocks[bi]
 */
  __pyx_v_e_ptr = (&(__pyx_v_self->array[__pyx_v_e]));

  /* "cyac/trie.pyx":224
 *     cdef void push_enode(self, int e):
 *         cdef Node *e_ptr = &self.array[e]
 *         cdef int bi = e >> 8             # <<<<<<<<<<<<<<
 *         cdef Block *b = &self.blocks[bi]
 *         cdef int prev, next_
 */
  __pyx_v_bi = (__pyx_v_e >> 8);

  /* "cyac/trie.pyx":225
 *         cdef Node *e_ptr = &self.array[e]
 *         cdef int bi = e >> 8
 *         cdef Block *b = &self.blocks[bi]             # <<<<<<<<<<<<<<
 *         cdef int prev, next_
 *         cdef Node *prev_ptr
 */
  __pyx_v_b = (&(__pyx_v_self->blocks[__pyx_v_bi]));

  /* "cyac/trie.pyx":228
 *         cdef int prev, next_
 *         cdef Node *prev_ptr
 *         b.num += 1             # <<<<<<<<<<<<<<
 *         if b.num == 1:
 *             b.ehead = e
 */
  __pyx_v_b->num = (__pyx_v_b->num + 1);

  /* "cyac/trie.pyx":229
 *         cdef Node *prev_ptr
 *         b.num += 1
 *         if b.num == 1:             # <<<<<<<<<<<<<<
 *             b.ehead = e
 *             e_ptr[0].value = -e
 */
  __pyx_t_1 = ((__pyx_v_b->num == 1) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":230
 *         b.num += 1
 *         if b.num == 1:
 *             b.ehead = e             # <<<<<<<<<<<<<<
 *             e_ptr[0].value = -e
 *             e_ptr[0].check = -e
 */
    __pyx_v_b->ehead = __pyx_v_e;

    /* "cyac/trie.pyx":231
 *         if b.num == 1:
 *             b.ehead = e
 *             e_ptr[0].value = -e             # <<<<<<<<<<<<<<
 *             e_ptr[0].check = -e
 *             if bi != 0:
 */
    (__pyx_v_e_ptr[0]).value = (-__pyx_v_e);

    /* "cyac/trie.pyx":232
 *             b.ehead = e
 *             e_ptr[0].value = -e
 *             e_ptr[0].check = -e             # <<<<<<<<<<<<<<
 *             if bi != 0:
 *                 self.transfer_block(bi, &self.bheadF, &self.bheadC)
 */
    (__pyx_v_e_ptr[0]).check = (-__pyx_v_e);

    /* "cyac/trie.pyx":233
 *             e_ptr[0].value = -e
 *             e_ptr[0].check = -e
 *             if bi != 0:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadF, &self.bheadC)
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_bi != 0) != 0);
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":234
 *             e_ptr[0].check = -e
 *             if bi != 0:
 *                 self.transfer_block(bi, &self.bheadF, &self.bheadC)             # <<<<<<<<<<<<<<
 *         else:
 *             prev = b.ehead
 */
      __pyx_f_4cyac_4trie_4Trie_transfer_block(__pyx_v_self, __pyx_v_bi, (&__pyx_v_self->bheadF), (&__pyx_v_self->bheadC));

      /* "cyac/trie.pyx":233
 *             e_ptr[0].value = -e
 *             e_ptr[0].check = -e
 *             if bi != 0:             # <<<<<<<<<<<<<<
 *                 self.transfer_block(bi, &self.bheadF, &self.bheadC)
 *         else:
 */
    }

    /* "cyac/trie.pyx":229
 *         cdef Node *prev_ptr
 *         b.num += 1
 *         if b.num == 1:             # <<<<<<<<<<<<<<
 *             b.ehead = e
 *             e_ptr[0].value = -e
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":236
 *                 self.transfer_block(bi, &self.bheadF, &self.bheadC)
 *         else:
 *             prev = b.ehead             # <<<<<<<<<<<<<<
 *             prev_ptr = &self.array[prev]
 *             next_ = -prev_ptr[0].check
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_b->ehead;
    __pyx_v_prev = __pyx_t_2;

    /* "cyac/trie.pyx":237
 *         else:
 *             prev = b.ehead
 *             prev_ptr = &self.array[prev]             # <<<<<<<<<<<<<<
 *             next_ = -prev_ptr[0].check
 *             e_ptr[0].value = -prev
 */
    __pyx_v_prev_ptr = (&(__pyx_v_self->array[__pyx_v_prev]));

    /* "cyac/trie.pyx":238
 *             prev = b.ehead
 *             prev_ptr = &self.array[prev]
 *             next_ = -prev_ptr[0].check             # <<<<<<<<<<<<<<
 *             e_ptr[0].value = -prev
 *             e_ptr[0].check = -next_
 */
    __pyx_v_next_ = (-(__pyx_v_prev_ptr[0]).check);

    /* "cyac/trie.pyx":239
 *             prev_ptr = &self.array[prev]
 *             next_ = -prev_ptr[0].check
 *             e_ptr[0].value = -prev             # <<<<<<<<<<<<<<
 *             e_ptr[0].check = -next_
 *             prev_ptr[0].check = -e
 */
    (__pyx_v_e_ptr[0]).value = (-__pyx_v_prev);

    /* "cyac/trie.pyx":240
 *             next_ = -prev_ptr[0].check
 *             e_ptr[0].value = -prev
 *             e_ptr[0].check = -next_             # <<<<<<<<<<<<<<
 *             prev_ptr[0].check = -e
 *             self.array[next_].value = -e
 */
    (__pyx_v_e_ptr[0]).check = (-__pyx_v_next_);

    /* "cyac/trie.pyx":241
 *             e_ptr[0].value = -prev
 *             e_ptr[0].check = -next_
 *             prev_ptr[0].check = -e             # <<<<<<<<<<<<<<
 *             self.array[next_].value = -e
 *             if b.num == 2 or b.trial == self.max_trial:
 */
    (__pyx_v_prev_ptr[0]).check = (-__pyx_v_e);

    /* "cyac/trie.pyx":242
 *             e_ptr[0].check = -next_
 *             prev_ptr[0].check = -e
 *             self.array[next_].value = -e             # <<<<<<<<<<<<<<
 *             if b.num == 2 or b.trial == self.max_trial:
 *                 if bi != 0:
 */
    (__pyx_v_self->array[__pyx_v_next_]).value = (-__pyx_v_e);

    /* "cyac/trie.pyx":243
 *             prev_ptr[0].check = -e
 *             self.array[next_].value = -e
 *             if b.num == 2 or b.trial == self.max_trial:             # <<<<<<<<<<<<<<
 *                 if bi != 0:
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 */
    __pyx_t_3 = ((__pyx_v_b->num == 2) != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_b->trial == __pyx_v_self->max_trial) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":244
 *             self.array[next_].value = -e
 *             if b.num == 2 or b.trial == self.max_trial:
 *                 if bi != 0:             # <<<<<<<<<<<<<<
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 *             b.trial = 0
 */
      __pyx_t_1 = ((__pyx_v_bi != 0) != 0);
      if (__pyx_t_1) {

        /* "cyac/trie.pyx":245
 *             if b.num == 2 or b.trial == self.max_trial:
 *                 if bi != 0:
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)             # <<<<<<<<<<<<<<
 *             b.trial = 0
 *         if b.reject < self.reject[b.num]:
 */
        __pyx_f_4cyac_4trie_4Trie_transfer_block(__pyx_v_self, __pyx_v_bi, (&__pyx_v_self->bheadC), (&__pyx_v_self->bheadO));

        /* "cyac/trie.pyx":244
 *             self.array[next_].value = -e
 *             if b.num == 2 or b.trial == self.max_trial:
 *                 if bi != 0:             # <<<<<<<<<<<<<<
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 *             b.trial = 0
 */
      }

      /* "cyac/trie.pyx":243
 *             prev_ptr[0].check = -e
 *             self.array[next_].value = -e
 *             if b.num == 2 or b.trial == self.max_trial:             # <<<<<<<<<<<<<<
 *                 if bi != 0:
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 */
    }

    /* "cyac/trie.pyx":246
 *                 if bi != 0:
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 *             b.trial = 0             # <<<<<<<<<<<<<<
 *         if b.reject < self.reject[b.num]:
 *             b.reject = self.reject[b.num]
 */
    __pyx_v_b->trial = 0;
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":247
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 *             b.trial = 0
 *         if b.reject < self.reject[b.num]:             # <<<<<<<<<<<<<<
 *             b.reject = self.reject[b.num]
 *         e_ptr[0].child = 0
 */
  __pyx_t_1 = ((__pyx_v_b->reject < (__pyx_v_self->reject[__pyx_v_b->num])) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":248
 *             b.trial = 0
 *         if b.reject < self.reject[b.num]:
 *             b.reject = self.reject[b.num]             # <<<<<<<<<<<<<<
 *         e_ptr[0].child = 0
 *         e_ptr[0].sibling = 0
 */
    __pyx_v_b->reject = (__pyx_v_self->reject[__pyx_v_b->num]);

    /* "cyac/trie.pyx":247
 *                     self.transfer_block(bi, &self.bheadC, &self.bheadO)
 *             b.trial = 0
 *         if b.reject < self.reject[b.num]:             # <<<<<<<<<<<<<<
 *             b.reject = self.reject[b.num]
 *         e_ptr[0].child = 0
 */
  }

  /* "cyac/trie.pyx":249
 *         if b.reject < self.reject[b.num]:
 *             b.reject = self.reject[b.num]
 *         e_ptr[0].child = 0             # <<<<<<<<<<<<<<
 *         e_ptr[0].sibling = 0
 *         e_ptr[0].flags = 0
 */
  (__pyx_v_e_ptr[0]).child = 0;

  /* "cyac/trie.pyx":250
 *             b.reject = self.reject[b.num]
 *         e_ptr[0].child = 0
 *         e_ptr[0].sibling = 0             # <<<<<<<<<<<<<<
 *         e_ptr[0].flags = 0
 * 
 */
  (__pyx_v_e_ptr[0]).sibling = 0;

  /* "cyac/trie.pyx":251
 *         e_ptr[0].child = 0
 *         e_ptr[0].sibling = 0
 *         e_ptr[0].flags = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void push_sibling(self, int from_, int base, byte_t label, bool has_child):
 */
  (__pyx_v_e_ptr[0]).flags = 0;

  /* "cyac/trie.pyx":222
 *         return e
 * 
 *     cdef void push_enode(self, int e):             # <<<<<<<<<<<<<<
 *         cdef Node *e_ptr = &self.array[e]
 *         cdef int bi = e >> 8
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":253
 *         e_ptr[0].flags = 0
 * 
 *     cdef inline void push_sibling(self, int from_, int base, byte_t label, bool has_child):             # <<<<<<<<<<<<<<
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_push_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, bool __pyx_v_has_child) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_ptr;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_child_ptr;
  bool __pyx_v_keep_order;
  CYTHON_UNUSED __pyx_t_4cyac_4utf8_byte_t *__pyx_v_c;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("push_sibling", 0);

  /* "cyac/trie.pyx":254
 * 
 *     cdef inline void push_sibling(self, int from_, int base, byte_t label, bool has_child):
 *         cdef Node *from_ptr = &self.array[from_]             # <<<<<<<<<<<<<<
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)
 */
  __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_]));

  /* "cyac/trie.pyx":255
 *     cdef inline void push_sibling(self, int from_, int base, byte_t label, bool has_child):
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)             # <<<<<<<<<<<<<<
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)
 *         if has_child and keep_order:
 */
  __pyx_v_child_ptr = __pyx_f_4cyac_4trie_4Trie__node_child_ptr(__pyx_v_self, __pyx_v_from_ptr);

  /* "cyac/trie.pyx":256
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)             # <<<<<<<<<<<<<<
 *         if has_child and keep_order:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 */
  if ((__pyx_v_self->ordered != 0)) {
    __pyx_t_1 = (__pyx_v_label > (__pyx_v_child_ptr[0]));
  } else {
    __pyx_t_1 = ((__pyx_v_child_ptr[0]) == 0);
  }
  __pyx_v_keep_order = __pyx_t_1;

  /* "cyac/trie.pyx":257
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)
 *         if has_child and keep_order:             # <<<<<<<<<<<<<<
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *             while self.ordered and child_ptr[0] != 0 and child_ptr[0] < label:
 */
  __pyx_t_2 = (__pyx_v_has_child != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_keep_order != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":258
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)
 *         if has_child and keep_order:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])             # <<<<<<<<<<<<<<
 *             while self.ordered and child_ptr[0] != 0 and child_ptr[0] < label:
 *                 c = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 */
    __pyx_v_child_ptr = __pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(__pyx_v_self, (&(__pyx_v_self->array[(__pyx_v_base ^ (__pyx_v_child_ptr[0]))])));

    /* "cyac/trie.pyx":259
 *         if has_child and keep_order:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *             while self.ordered and child_ptr[0] != 0 and child_ptr[0] < label:             # <<<<<<<<<<<<<<
 *                 c = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 * 
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_self->ordered != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_2 = (((__pyx_v_child_ptr[0]) != 0) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_2 = (((__pyx_v_child_ptr[0]) < __pyx_v_label) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L8_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "cyac/trie.pyx":260
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *             while self.ordered and child_ptr[0] != 0 and child_ptr[0] < label:
 *                 c = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])             # <<<<<<<<<<<<<<
 * 
 *         self.array[base^label].sibling = child_ptr[0]
 */
      __pyx_v_c = __pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(__pyx_v_self, (&(__pyx_v_self->array[(__pyx_v_base ^ (__pyx_v_child_ptr[0]))])));
    }

    /* "cyac/trie.pyx":257
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         cdef bool keep_order = (label > child_ptr[0]) if self.ordered else (child_ptr[0] == 0)
 *         if has_child and keep_order:             # <<<<<<<<<<<<<<
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *             while self.ordered and child_ptr[0] != 0 and child_ptr[0] < label:
 */
  }

  /* "cyac/trie.pyx":262
 *                 c = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 * 
 *         self.array[base^label].sibling = child_ptr[0]             # <<<<<<<<<<<<<<
 *         child_ptr[0] = label
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) + 1)
 */
  (__pyx_v_self->array[(__pyx_v_base ^ __pyx_v_label)]).sibling = (__pyx_v_child_ptr[0]);

  /* "cyac/trie.pyx":263
 * 
 *         self.array[base^label].sibling = child_ptr[0]
 *         child_ptr[0] = label             # <<<<<<<<<<<<<<
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) + 1)
 * 
 */
  (__pyx_v_child_ptr[0]) = __pyx_v_label;

  /* "cyac/trie.pyx":264
 *         self.array[base^label].sibling = child_ptr[0]
 *         child_ptr[0] = label
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) + 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void pop_sibling(self, int from_, byte_t label):
 */
  __pyx_f_4cyac_4trie_4Trie__node_set_child_num(__pyx_v_self, __pyx_v_from_ptr, (__pyx_f_4cyac_4trie_4Trie__node_child_num(__pyx_v_self, __pyx_v_from_ptr) + 1));

  /* "cyac/trie.pyx":253
 *         e_ptr[0].flags = 0
 * 
 *     cdef inline void push_sibling(self, int from_, int base, byte_t label, bool has_child):             # <<<<<<<<<<<<<<
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":266
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) + 1)
 * 
 *     cdef inline void pop_sibling(self, int from_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef int base = self._node_base(&from_ptr[0])
 */

static CYTHON_INLINE void __pyx_f_4cyac_4trie_4Trie_pop_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_ptr;
  int __pyx_v_base;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_child_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4cyac_4utf8_byte_t __pyx_t_2;
  __Pyx_RefNannySetupContext("pop_sibling", 0);

  /* "cyac/trie.pyx":267
 * 
 *     cdef inline void pop_sibling(self, int from_, byte_t label):
 *         cdef Node *from_ptr = &self.array[from_]             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&from_ptr[0])
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 */
  __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_]));

  /* "cyac/trie.pyx":268
 *     cdef inline void pop_sibling(self, int from_, byte_t label):
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef int base = self._node_base(&from_ptr[0])             # <<<<<<<<<<<<<<
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         while child_ptr[0] != label:
 */
  __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_from_ptr[0])));

  /* "cyac/trie.pyx":269
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef int base = self._node_base(&from_ptr[0])
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)             # <<<<<<<<<<<<<<
 *         while child_ptr[0] != label:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 */
  __pyx_v_child_ptr = __pyx_f_4cyac_4trie_4Trie__node_child_ptr(__pyx_v_self, __pyx_v_from_ptr);

  /* "cyac/trie.pyx":270
 *         cdef int base = self._node_base(&from_ptr[0])
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         while child_ptr[0] != label:             # <<<<<<<<<<<<<<
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *         child_ptr[0] = self.array[base ^ child_ptr[0]].sibling
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_child_ptr[0]) != __pyx_v_label) != 0);
    if (!__pyx_t_1) break;

    /* "cyac/trie.pyx":271
 *         cdef byte_t *child_ptr = self._node_child_ptr(from_ptr)
 *         while child_ptr[0] != label:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])             # <<<<<<<<<<<<<<
 *         child_ptr[0] = self.array[base ^ child_ptr[0]].sibling
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) - 1)
 */
    __pyx_v_child_ptr = __pyx_f_4cyac_4trie_4Trie__node_sibling_ptr(__pyx_v_self, (&(__pyx_v_self->array[(__pyx_v_base ^ (__pyx_v_child_ptr[0]))])));
  }

  /* "cyac/trie.pyx":272
 *         while child_ptr[0] != label:
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *         child_ptr[0] = self.array[base ^ child_ptr[0]].sibling             # <<<<<<<<<<<<<<
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) - 1)
 * 
 */
  __pyx_t_2 = (__pyx_v_self->array[(__pyx_v_base ^ (__pyx_v_child_ptr[0]))]).sibling;
  (__pyx_v_child_ptr[0]) = __pyx_t_2;

  /* "cyac/trie.pyx":273
 *             child_ptr = self._node_sibling_ptr(&self.array[base ^ child_ptr[0]])
 *         child_ptr[0] = self.array[base ^ child_ptr[0]].sibling
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) - 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_4cyac_4trie_4Trie__node_set_child_num(__pyx_v_self, __pyx_v_from_ptr, (__pyx_f_4cyac_4trie_4Trie__node_child_num(__pyx_v_self, __pyx_v_from_ptr) - 1));

  /* "cyac/trie.pyx":266
 *         self._node_set_child_num(from_ptr, self._node_child_num(from_ptr) + 1)
 * 
 *     cdef inline void pop_sibling(self, int from_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef Node *from_ptr = &self.array[from_]
 *         cdef int base = self._node_base(&from_ptr[0])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":276
 * 
 * 
 *     cdef inline bool consult(self, Node *nref, Node *pref):             # <<<<<<<<<<<<<<
 *         return self._node_child_num(nref) < self._node_child_num(pref)
 * 
 */

static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_consult(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_t_4cyac_4trie_Node *__pyx_v_nref, struct __pyx_t_4cyac_4trie_Node *__pyx_v_pref) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("consult", 0);

  /* "cyac/trie.pyx":277
 * 
 *     cdef inline bool consult(self, Node *nref, Node *pref):
 *         return self._node_child_num(nref) < self._node_child_num(pref)             # <<<<<<<<<<<<<<
 * 
 *     cdef bool has_label(self, int id_, byte_t label):
 */
  __pyx_r = (__pyx_f_4cyac_4trie_4Trie__node_child_num(__pyx_v_self, __pyx_v_nref) < __pyx_f_4cyac_4trie_4Trie__node_child_num(__pyx_v_self, __pyx_v_pref));
  goto __pyx_L0;

  /* "cyac/trie.pyx":276
 * 
 * 
 *     cdef inline bool consult(self, Node *nref, Node *pref):             # <<<<<<<<<<<<<<
 *         return self._node_child_num(nref) < self._node_child_num(pref)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":279
 *         return self._node_child_num(nref) < self._node_child_num(pref)
 * 
 *     cdef bool has_label(self, int id_, byte_t label):             # <<<<<<<<<<<<<<
 *         return self.child(id_, label) >= 0
 * 
 */

static bool __pyx_f_4cyac_4trie_4Trie_has_label(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_label", 0);

  /* "cyac/trie.pyx":280
 * 
 *     cdef bool has_label(self, int id_, byte_t label):
 *         return self.child(id_, label) >= 0             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int child(self, int id_, byte_t label):
 */
  __pyx_r = (__pyx_f_4cyac_4trie_4Trie_child(__pyx_v_self, __pyx_v_id_, __pyx_v_label) >= 0);
  goto __pyx_L0;

  /* "cyac/trie.pyx":279
 *         return self._node_child_num(nref) < self._node_child_num(pref)
 * 
 *     cdef bool has_label(self, int id_, byte_t label):             # <<<<<<<<<<<<<<
 *         return self.child(id_, label) >= 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":282
 *         return self.child(id_, label) >= 0
 * 
 *     cdef inline int child(self, int id_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_child(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_parent_ptr;
  int __pyx_v_base;
  int __pyx_v_cid;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("child", 0);

  /* "cyac/trie.pyx":283
 * 
 *     cdef inline int child(self, int id_, byte_t label):
 *         cdef Node *parent_ptr = &self.array[id_]             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef int cid = base ^ label
 */
  __pyx_v_parent_ptr = (&(__pyx_v_self->array[__pyx_v_id_]));

  /* "cyac/trie.pyx":284
 *     cdef inline int child(self, int id_, byte_t label):
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])             # <<<<<<<<<<<<<<
 *         cdef int cid = base ^ label
 *         # print("cid[%s][%s] = %s, check[%s] = %s" % (id_, label, cid, cid, self.array[cid].check))
 */
  __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_parent_ptr[0])));

  /* "cyac/trie.pyx":285
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef int cid = base ^ label             # <<<<<<<<<<<<<<
 *         # print("cid[%s][%s] = %s, check[%s] = %s" % (id_, label, cid, cid, self.array[cid].check))
 *         if cid < 0  or  cid >= self.array_size  or not self._node_is_child(&self.array[cid], id_):
 */
  __pyx_v_cid = (__pyx_v_base ^ __pyx_v_label);

  /* "cyac/trie.pyx":287
 *         cdef int cid = base ^ label
 *         # print("cid[%s][%s] = %s, check[%s] = %s" % (id_, label, cid, cid, self.array[cid].check))
 *         if cid < 0  or  cid >= self.array_size  or not self._node_is_child(&self.array[cid], id_):             # <<<<<<<<<<<<<<
 *             return -1
 *         return cid
 */
  __pyx_t_2 = ((__pyx_v_cid < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_cid >= __pyx_v_self->array_size) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_f_4cyac_4trie_4Trie__node_is_child(__pyx_v_self, (&(__pyx_v_self->array[__pyx_v_cid])), __pyx_v_id_) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":288
 *         # print("cid[%s][%s] = %s, check[%s] = %s" % (id_, label, cid, cid, self.array[cid].check))
 *         if cid < 0  or  cid >= self.array_size  or not self._node_is_child(&self.array[cid], id_):
 *             return -1             # <<<<<<<<<<<<<<
 *         return cid
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":287
 *         cdef int cid = base ^ label
 *         # print("cid[%s][%s] = %s, check[%s] = %s" % (id_, label, cid, cid, self.array[cid].check))
 *         if cid < 0  or  cid >= self.array_size  or not self._node_is_child(&self.array[cid], id_):             # <<<<<<<<<<<<<<
 *             return -1
 *         return cid
 */
  }

  /* "cyac/trie.pyx":289
 *         if cid < 0  or  cid >= self.array_size  or not self._node_is_child(&self.array[cid], id_):
 *             return -1
 *         return cid             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int children(self, int id_, byte_t *labels, int *children_arr, int first_n):
 */
  __pyx_r = __pyx_v_cid;
  goto __pyx_L0;

  /* "cyac/trie.pyx":282
 *         return self.child(id_, label) >= 0
 * 
 *     cdef inline int child(self, int id_, byte_t label):             # <<<<<<<<<<<<<<
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":291
 *         return cid
 * 
 *     cdef inline int children(self, int id_, byte_t *labels, int *children_arr, int first_n):             # <<<<<<<<<<<<<<
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_children(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_labels, int *__pyx_v_children_arr, int __pyx_v_first_n) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_parent_ptr;
  int __pyx_v_base;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_s;
  int __pyx_v_num;
  int __pyx_v_to;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_4cyac_4utf8_byte_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("children", 0);

  /* "cyac/trie.pyx":292
 * 
 *     cdef inline int children(self, int id_, byte_t *labels, int *children_arr, int first_n):
 *         cdef Node *parent_ptr = &self.array[id_]             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef byte_t s = parent_ptr[0].child
 */
  __pyx_v_parent_ptr = (&(__pyx_v_self->array[__pyx_v_id_]));

  /* "cyac/trie.pyx":293
 *     cdef inline int children(self, int id_, byte_t *labels, int *children_arr, int first_n):
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])             # <<<<<<<<<<<<<<
 *         cdef byte_t s = parent_ptr[0].child
 *         if s == 0 and base > 0:
 */
  __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_parent_ptr[0])));

  /* "cyac/trie.pyx":294
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef byte_t s = parent_ptr[0].child             # <<<<<<<<<<<<<<
 *         if s == 0 and base > 0:
 *             s = self.array[base].sibling
 */
  __pyx_t_1 = (__pyx_v_parent_ptr[0]).child;
  __pyx_v_s = __pyx_t_1;

  /* "cyac/trie.pyx":295
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef byte_t s = parent_ptr[0].child
 *         if s == 0 and base > 0:             # <<<<<<<<<<<<<<
 *             s = self.array[base].sibling
 *         cdef int num = 0
 */
  __pyx_t_3 = ((__pyx_v_s == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_base > 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":296
 *         cdef byte_t s = parent_ptr[0].child
 *         if s == 0 and base > 0:
 *             s = self.array[base].sibling             # <<<<<<<<<<<<<<
 *         cdef int num = 0
 *         while s != 0:
 */
    __pyx_t_1 = (__pyx_v_self->array[__pyx_v_base]).sibling;
    __pyx_v_s = __pyx_t_1;

    /* "cyac/trie.pyx":295
 *         cdef int base = self._node_base(&parent_ptr[0])
 *         cdef byte_t s = parent_ptr[0].child
 *         if s == 0 and base > 0:             # <<<<<<<<<<<<<<
 *             s = self.array[base].sibling
 *         cdef int num = 0
 */
  }

  /* "cyac/trie.pyx":297
 *         if s == 0 and base > 0:
 *             s = self.array[base].sibling
 *         cdef int num = 0             # <<<<<<<<<<<<<<
 *         while s != 0:
 *             to = base ^ s
 */
  __pyx_v_num = 0;

  /* "cyac/trie.pyx":298
 *             s = self.array[base].sibling
 *         cdef int num = 0
 *         while s != 0:             # <<<<<<<<<<<<<<
 *             to = base ^ s
 *             if to < 0:
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_s != 0) != 0);
    if (!__pyx_t_2) break;

    /* "cyac/trie.pyx":299
 *         cdef int num = 0
 *         while s != 0:
 *             to = base ^ s             # <<<<<<<<<<<<<<
 *             if to < 0:
 *                 break
 */
    __pyx_v_to = (__pyx_v_base ^ __pyx_v_s);

    /* "cyac/trie.pyx":300
 *         while s != 0:
 *             to = base ^ s
 *             if to < 0:             # <<<<<<<<<<<<<<
 *                 break
 *             labels[num] = s
 */
    __pyx_t_2 = ((__pyx_v_to < 0) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":301
 *             to = base ^ s
 *             if to < 0:
 *                 break             # <<<<<<<<<<<<<<
 *             labels[num] = s
 *             children_arr[num] = to
 */
      goto __pyx_L7_break;

      /* "cyac/trie.pyx":300
 *         while s != 0:
 *             to = base ^ s
 *             if to < 0:             # <<<<<<<<<<<<<<
 *                 break
 *             labels[num] = s
 */
    }

    /* "cyac/trie.pyx":302
 *             if to < 0:
 *                 break
 *             labels[num] = s             # <<<<<<<<<<<<<<
 *             children_arr[num] = to
 *             num += 1
 */
    (__pyx_v_labels[__pyx_v_num]) = __pyx_v_s;

    /* "cyac/trie.pyx":303
 *                 break
 *             labels[num] = s
 *             children_arr[num] = to             # <<<<<<<<<<<<<<
 *             num += 1
 *             if num >= first_n:
 */
    (__pyx_v_children_arr[__pyx_v_num]) = __pyx_v_to;

    /* "cyac/trie.pyx":304
 *             labels[num] = s
 *             children_arr[num] = to
 *             num += 1             # <<<<<<<<<<<<<<
 *             if num >= first_n:
 *                 break
 */
    __pyx_v_num = (__pyx_v_num + 1);

    /* "cyac/trie.pyx":305
 *             children_arr[num] = to
 *             num += 1
 *             if num >= first_n:             # <<<<<<<<<<<<<<
 *                 break
 *             s = self.array[to].sibling
 */
    __pyx_t_2 = ((__pyx_v_num >= __pyx_v_first_n) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":306
 *             num += 1
 *             if num >= first_n:
 *                 break             # <<<<<<<<<<<<<<
 *             s = self.array[to].sibling
 *         return num
 */
      goto __pyx_L7_break;

      /* "cyac/trie.pyx":305
 *             children_arr[num] = to
 *             num += 1
 *             if num >= first_n:             # <<<<<<<<<<<<<<
 *                 break
 *             s = self.array[to].sibling
 */
    }

    /* "cyac/trie.pyx":307
 *             if num >= first_n:
 *                 break
 *             s = self.array[to].sibling             # <<<<<<<<<<<<<<
 *         return num
 * 
 */
    __pyx_t_1 = (__pyx_v_self->array[__pyx_v_to]).sibling;
    __pyx_v_s = __pyx_t_1;
  }
  __pyx_L7_break:;

  /* "cyac/trie.pyx":308
 *                 break
 *             s = self.array[to].sibling
 *         return num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_num;
  goto __pyx_L0;

  /* "cyac/trie.pyx":291
 *         return cid
 * 
 *     cdef inline int children(self, int id_, byte_t *labels, int *children_arr, int first_n):             # <<<<<<<<<<<<<<
 *         cdef Node *parent_ptr = &self.array[id_]
 *         cdef int base = self._node_base(&parent_ptr[0])
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":311
 * 
 * 
 *     cdef inline int sibling(self, int to):             # <<<<<<<<<<<<<<
 *         if to < 0:
 *             return -1
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_sibling(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_to) {
  int __pyx_v_base;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4cyac_4utf8_byte_t __pyx_t_2;
  __Pyx_RefNannySetupContext("sibling", 0);

  /* "cyac/trie.pyx":312
 * 
 *     cdef inline int sibling(self, int to):
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 */
  __pyx_t_1 = ((__pyx_v_to < 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":313
 *     cdef inline int sibling(self, int to):
 *         if to < 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 *         cdef byte_t s = self.array[to].sibling
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":312
 * 
 *     cdef inline int sibling(self, int to):
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 */
  }

  /* "cyac/trie.pyx":314
 *         if to < 0:
 *             return -1
 *         cdef int base = self._node_base(&self.array[self.array[to].check])             # <<<<<<<<<<<<<<
 *         cdef byte_t s = self.array[to].sibling
 *         if s == 0:
 */
  __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_self->array[(__pyx_v_self->array[__pyx_v_to]).check])));

  /* "cyac/trie.pyx":315
 *             return -1
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 *         cdef byte_t s = self.array[to].sibling             # <<<<<<<<<<<<<<
 *         if s == 0:
 *             return -1
 */
  __pyx_t_2 = (__pyx_v_self->array[__pyx_v_to]).sibling;
  __pyx_v_s = __pyx_t_2;

  /* "cyac/trie.pyx":316
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 *         cdef byte_t s = self.array[to].sibling
 *         if s == 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         to = base ^ s
 */
  __pyx_t_1 = ((__pyx_v_s == 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":317
 *         cdef byte_t s = self.array[to].sibling
 *         if s == 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         to = base ^ s
 *         return to
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":316
 *         cdef int base = self._node_base(&self.array[self.array[to].check])
 *         cdef byte_t s = self.array[to].sibling
 *         if s == 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         to = base ^ s
 */
  }

  /* "cyac/trie.pyx":318
 *         if s == 0:
 *             return -1
 *         to = base ^ s             # <<<<<<<<<<<<<<
 *         return to
 * 
 */
  __pyx_v_to = (__pyx_v_base ^ __pyx_v_s);

  /* "cyac/trie.pyx":319
 *             return -1
 *         to = base ^ s
 *         return to             # <<<<<<<<<<<<<<
 * 
 *     # children
 */
  __pyx_r = __pyx_v_to;
  goto __pyx_L0;

  /* "cyac/trie.pyx":311
 * 
 * 
 *     cdef inline int sibling(self, int to):             # <<<<<<<<<<<<<<
 *         if to < 0:
 *             return -1
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":322
 * 
 *     # children
 *     cdef int set_child(self, int base, byte_t c, byte_t label, bool append_label, byte_t *children):             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         if c == 0:
 */

static int __pyx_f_4cyac_4trie_4Trie_set_child(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_base, __pyx_t_4cyac_4utf8_byte_t __pyx_v_c, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label, bool __pyx_v_append_label, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_children) {
  int __pyx_v_idx;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_4cyac_4utf8_byte_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_child", 0);

  /* "cyac/trie.pyx":323
 *     # children
 *     cdef int set_child(self, int base, byte_t c, byte_t label, bool append_label, byte_t *children):
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         if c == 0:
 *             children[idx] = c
 */
  __pyx_v_idx = 0;

  /* "cyac/trie.pyx":324
 *     cdef int set_child(self, int base, byte_t c, byte_t label, bool append_label, byte_t *children):
 *         cdef int idx = 0
 *         if c == 0:             # <<<<<<<<<<<<<<
 *             children[idx] = c
 *             idx += 1
 */
  __pyx_t_1 = ((__pyx_v_c == 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":325
 *         cdef int idx = 0
 *         if c == 0:
 *             children[idx] = c             # <<<<<<<<<<<<<<
 *             idx += 1
 *             c = self.array[base ^ c].sibling
 */
    (__pyx_v_children[__pyx_v_idx]) = __pyx_v_c;

    /* "cyac/trie.pyx":326
 *         if c == 0:
 *             children[idx] = c
 *             idx += 1             # <<<<<<<<<<<<<<
 *             c = self.array[base ^ c].sibling
 * 
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "cyac/trie.pyx":327
 *             children[idx] = c
 *             idx += 1
 *             c = self.array[base ^ c].sibling             # <<<<<<<<<<<<<<
 * 
 *         if self.ordered:
 */
    __pyx_t_2 = (__pyx_v_self->array[(__pyx_v_base ^ __pyx_v_c)]).sibling;
    __pyx_v_c = __pyx_t_2;

    /* "cyac/trie.pyx":324
 *     cdef int set_child(self, int base, byte_t c, byte_t label, bool append_label, byte_t *children):
 *         cdef int idx = 0
 *         if c == 0:             # <<<<<<<<<<<<<<
 *             children[idx] = c
 *             idx += 1
 */
  }

  /* "cyac/trie.pyx":329
 *             c = self.array[base ^ c].sibling
 * 
 *         if self.ordered:             # <<<<<<<<<<<<<<
 *             while c != 0 and c <= label:
 *                 children[idx] = c
 */
  __pyx_t_1 = (__pyx_v_self->ordered != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":330
 * 
 *         if self.ordered:
 *             while c != 0 and c <= label:             # <<<<<<<<<<<<<<
 *                 children[idx] = c
 *                 idx += 1
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_c != 0) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_c <= __pyx_v_label) != 0);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "cyac/trie.pyx":331
 *         if self.ordered:
 *             while c != 0 and c <= label:
 *                 children[idx] = c             # <<<<<<<<<<<<<<
 *                 idx += 1
 *                 c = self.array[base ^c].sibling
 */
      (__pyx_v_children[__pyx_v_idx]) = __pyx_v_c;

      /* "cyac/trie.pyx":332
 *             while c != 0 and c <= label:
 *                 children[idx] = c
 *                 idx += 1             # <<<<<<<<<<<<<<
 *                 c = self.array[base ^c].sibling
 * 
 */
      __pyx_v_idx = (__pyx_v_idx + 1);

      /* "cyac/trie.pyx":333
 *                 children[idx] = c
 *                 idx += 1
 *                 c = self.array[base ^c].sibling             # <<<<<<<<<<<<<<
 * 
 *         if append_label:
 */
      __pyx_t_2 = (__pyx_v_self->array[(__pyx_v_base ^ __pyx_v_c)]).sibling;
      __pyx_v_c = __pyx_t_2;
    }

    /* "cyac/trie.pyx":329
 *             c = self.array[base ^ c].sibling
 * 
 *         if self.ordered:             # <<<<<<<<<<<<<<
 *             while c != 0 and c <= label:
 *                 children[idx] = c
 */
  }

  /* "cyac/trie.pyx":335
 *                 c = self.array[base ^c].sibling
 * 
 *         if append_label:             # <<<<<<<<<<<<<<
 *             children[idx] = label
 *             idx += 1
 */
  __pyx_t_1 = (__pyx_v_append_label != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":336
 * 
 *         if append_label:
 *             children[idx] = label             # <<<<<<<<<<<<<<
 *             idx += 1
 * 
 */
    (__pyx_v_children[__pyx_v_idx]) = __pyx_v_label;

    /* "cyac/trie.pyx":337
 *         if append_label:
 *             children[idx] = label
 *             idx += 1             # <<<<<<<<<<<<<<
 * 
 *         while c != 0:
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "cyac/trie.pyx":335
 *                 c = self.array[base ^c].sibling
 * 
 *         if append_label:             # <<<<<<<<<<<<<<
 *             children[idx] = label
 *             idx += 1
 */
  }

  /* "cyac/trie.pyx":339
 *             idx += 1
 * 
 *         while c != 0:             # <<<<<<<<<<<<<<
 *             children[idx] = c
 *             idx += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_c != 0) != 0);
    if (!__pyx_t_1) break;

    /* "cyac/trie.pyx":340
 * 
 *         while c != 0:
 *             children[idx] = c             # <<<<<<<<<<<<<<
 *             idx += 1
 *             c = self.array[base ^ c].sibling
 */
    (__pyx_v_children[__pyx_v_idx]) = __pyx_v_c;

    /* "cyac/trie.pyx":341
 *         while c != 0:
 *             children[idx] = c
 *             idx += 1             # <<<<<<<<<<<<<<
 *             c = self.array[base ^ c].sibling
 *         return idx
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "cyac/trie.pyx":342
 *             children[idx] = c
 *             idx += 1
 *             c = self.array[base ^ c].sibling             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */
    __pyx_t_2 = (__pyx_v_self->array[(__pyx_v_base ^ __pyx_v_c)]).sibling;
    __pyx_v_c = __pyx_t_2;
  }

  /* "cyac/trie.pyx":343
 *             idx += 1
 *             c = self.array[base ^ c].sibling
 *         return idx             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int find_place(self):
 */
  __pyx_r = __pyx_v_idx;
  goto __pyx_L0;

  /* "cyac/trie.pyx":322
 * 
 *     # children
 *     cdef int set_child(self, int base, byte_t c, byte_t label, bool append_label, byte_t *children):             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         if c == 0:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":345
 *         return idx
 * 
 *     cdef inline int find_place(self):             # <<<<<<<<<<<<<<
 *         if self.bheadC != 0:
 *             return self.blocks[self.bheadC].ehead
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_place(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("find_place", 0);

  /* "cyac/trie.pyx":346
 * 
 *     cdef inline int find_place(self):
 *         if self.bheadC != 0:             # <<<<<<<<<<<<<<
 *             return self.blocks[self.bheadC].ehead
 *         if self.bheadO != 0:
 */
  __pyx_t_1 = ((__pyx_v_self->bheadC != 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":347
 *     cdef inline int find_place(self):
 *         if self.bheadC != 0:
 *             return self.blocks[self.bheadC].ehead             # <<<<<<<<<<<<<<
 *         if self.bheadO != 0:
 *             return self.blocks[self.bheadO].ehead
 */
    __pyx_r = (__pyx_v_self->blocks[__pyx_v_self->bheadC]).ehead;
    goto __pyx_L0;

    /* "cyac/trie.pyx":346
 * 
 *     cdef inline int find_place(self):
 *         if self.bheadC != 0:             # <<<<<<<<<<<<<<
 *             return self.blocks[self.bheadC].ehead
 *         if self.bheadO != 0:
 */
  }

  /* "cyac/trie.pyx":348
 *         if self.bheadC != 0:
 *             return self.blocks[self.bheadC].ehead
 *         if self.bheadO != 0:             # <<<<<<<<<<<<<<
 *             return self.blocks[self.bheadO].ehead
 *         return self.add_block() << 8
 */
  __pyx_t_1 = ((__pyx_v_self->bheadO != 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":349
 *             return self.blocks[self.bheadC].ehead
 *         if self.bheadO != 0:
 *             return self.blocks[self.bheadO].ehead             # <<<<<<<<<<<<<<
 *         return self.add_block() << 8
 * 
 */
    __pyx_r = (__pyx_v_self->blocks[__pyx_v_self->bheadO]).ehead;
    goto __pyx_L0;

    /* "cyac/trie.pyx":348
 *         if self.bheadC != 0:
 *             return self.blocks[self.bheadC].ehead
 *         if self.bheadO != 0:             # <<<<<<<<<<<<<<
 *             return self.blocks[self.bheadO].ehead
 *         return self.add_block() << 8
 */
  }

  /* "cyac/trie.pyx":350
 *         if self.bheadO != 0:
 *             return self.blocks[self.bheadO].ehead
 *         return self.add_block() << 8             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int find_places(self, byte_t *child, int child_num):
 */
  __pyx_r = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->add_block(__pyx_v_self) << 8);
  goto __pyx_L0;

  /* "cyac/trie.pyx":345
 *         return idx
 * 
 *     cdef inline int find_place(self):             # <<<<<<<<<<<<<<
 *         if self.bheadC != 0:
 *             return self.blocks[self.bheadC].ehead
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":352
 *         return self.add_block() << 8
 * 
 *     cdef inline int find_places(self, byte_t *child, int child_num):             # <<<<<<<<<<<<<<
 *         cdef int bi = self.bheadO
 *         cdef int bz, e, i
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_find_places(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_child, int __pyx_v_child_num) {
  int __pyx_v_bi;
  int __pyx_v_bz;
  int __pyx_v_e;
  int __pyx_v_i;
  struct __pyx_t_4cyac_4trie_Block *__pyx_v_b;
  int __pyx_v_nc;
  int __pyx_v_base;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_c;
  int __pyx_v_bin_;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("find_places", 0);

  /* "cyac/trie.pyx":353
 * 
 *     cdef inline int find_places(self, byte_t *child, int child_num):
 *         cdef int bi = self.bheadO             # <<<<<<<<<<<<<<
 *         cdef int bz, e, i
 *         cdef Block *b
 */
  __pyx_t_1 = __pyx_v_self->bheadO;
  __pyx_v_bi = __pyx_t_1;

  /* "cyac/trie.pyx":356
 *         cdef int bz, e, i
 *         cdef Block *b
 *         if bi != 0:             # <<<<<<<<<<<<<<
 *             bz = self.blocks[self.bheadO].prev
 *             nc = child_num
 */
  __pyx_t_2 = ((__pyx_v_bi != 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":357
 *         cdef Block *b
 *         if bi != 0:
 *             bz = self.blocks[self.bheadO].prev             # <<<<<<<<<<<<<<
 *             nc = child_num
 *             while True:
 */
    __pyx_t_1 = (__pyx_v_self->blocks[__pyx_v_self->bheadO]).prev;
    __pyx_v_bz = __pyx_t_1;

    /* "cyac/trie.pyx":358
 *         if bi != 0:
 *             bz = self.blocks[self.bheadO].prev
 *             nc = child_num             # <<<<<<<<<<<<<<
 *             while True:
 *                 b = &self.blocks[bi]
 */
    __pyx_v_nc = __pyx_v_child_num;

    /* "cyac/trie.pyx":359
 *             bz = self.blocks[self.bheadO].prev
 *             nc = child_num
 *             while True:             # <<<<<<<<<<<<<<
 *                 b = &self.blocks[bi]
 *                 if b.num >= nc  and  nc < b.reject:
 */
    while (1) {

      /* "cyac/trie.pyx":360
 *             nc = child_num
 *             while True:
 *                 b = &self.blocks[bi]             # <<<<<<<<<<<<<<
 *                 if b.num >= nc  and  nc < b.reject:
 *                     e = b.ehead
 */
      __pyx_v_b = (&(__pyx_v_self->blocks[__pyx_v_bi]));

      /* "cyac/trie.pyx":361
 *             while True:
 *                 b = &self.blocks[bi]
 *                 if b.num >= nc  and  nc < b.reject:             # <<<<<<<<<<<<<<
 *                     e = b.ehead
 *                     while True:
 */
      __pyx_t_3 = ((__pyx_v_b->num >= __pyx_v_nc) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_nc < __pyx_v_b->reject) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":362
 *                 b = &self.blocks[bi]
 *                 if b.num >= nc  and  nc < b.reject:
 *                     e = b.ehead             # <<<<<<<<<<<<<<
 *                     while True:
 *                         base = e ^ child[0]
 */
        __pyx_t_1 = __pyx_v_b->ehead;
        __pyx_v_e = __pyx_t_1;

        /* "cyac/trie.pyx":363
 *                 if b.num >= nc  and  nc < b.reject:
 *                     e = b.ehead
 *                     while True:             # <<<<<<<<<<<<<<
 *                         base = e ^ child[0]
 *                         i = 0
 */
        while (1) {

          /* "cyac/trie.pyx":364
 *                     e = b.ehead
 *                     while True:
 *                         base = e ^ child[0]             # <<<<<<<<<<<<<<
 *                         i = 0
 *                         for i in range(0, child_num):
 */
          __pyx_v_base = (__pyx_v_e ^ (__pyx_v_child[0]));

          /* "cyac/trie.pyx":365
 *                     while True:
 *                         base = e ^ child[0]
 *                         i = 0             # <<<<<<<<<<<<<<
 *                         for i in range(0, child_num):
 *                             c = child[i]
 */
          __pyx_v_i = 0;

          /* "cyac/trie.pyx":366
 *                         base = e ^ child[0]
 *                         i = 0
 *                         for i in range(0, child_num):             # <<<<<<<<<<<<<<
 *                             c = child[i]
 *                             if not self.array[base ^ c].check < 0:
 */
          __pyx_t_1 = __pyx_v_child_num;
          __pyx_t_4 = __pyx_t_1;
          for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
            __pyx_v_i = __pyx_t_5;

            /* "cyac/trie.pyx":367
 *                         i = 0
 *                         for i in range(0, child_num):
 *                             c = child[i]             # <<<<<<<<<<<<<<
 *                             if not self.array[base ^ c].check < 0:
 *                                 break
 */
            __pyx_v_c = (__pyx_v_child[__pyx_v_i]);

            /* "cyac/trie.pyx":368
 *                         for i in range(0, child_num):
 *                             c = child[i]
 *                             if not self.array[base ^ c].check < 0:             # <<<<<<<<<<<<<<
 *                                 break
 *                             if i == child_num - 1:
 */
            __pyx_t_2 = ((!(((__pyx_v_self->array[(__pyx_v_base ^ __pyx_v_c)]).check < 0) != 0)) != 0);
            if (__pyx_t_2) {

              /* "cyac/trie.pyx":369
 *                             c = child[i]
 *                             if not self.array[base ^ c].check < 0:
 *                                 break             # <<<<<<<<<<<<<<
 *                             if i == child_num - 1:
 *                                 b.ehead = e
 */
              goto __pyx_L12_break;

              /* "cyac/trie.pyx":368
 *                         for i in range(0, child_num):
 *                             c = child[i]
 *                             if not self.array[base ^ c].check < 0:             # <<<<<<<<<<<<<<
 *                                 break
 *                             if i == child_num - 1:
 */
            }

            /* "cyac/trie.pyx":370
 *                             if not self.array[base ^ c].check < 0:
 *                                 break
 *                             if i == child_num - 1:             # <<<<<<<<<<<<<<
 *                                 b.ehead = e
 *                                 return e
 */
            __pyx_t_2 = ((__pyx_v_i == (__pyx_v_child_num - 1)) != 0);
            if (__pyx_t_2) {

              /* "cyac/trie.pyx":371
 *                                 break
 *                             if i == child_num - 1:
 *                                 b.ehead = e             # <<<<<<<<<<<<<<
 *                                 return e
 *                         e = - self.array[e].check
 */
              __pyx_v_b->ehead = __pyx_v_e;

              /* "cyac/trie.pyx":372
 *                             if i == child_num - 1:
 *                                 b.ehead = e
 *                                 return e             # <<<<<<<<<<<<<<
 *                         e = - self.array[e].check
 *                         if e == b.ehead:
 */
              __pyx_r = __pyx_v_e;
              goto __pyx_L0;

              /* "cyac/trie.pyx":370
 *                             if not self.array[base ^ c].check < 0:
 *                                 break
 *                             if i == child_num - 1:             # <<<<<<<<<<<<<<
 *                                 b.ehead = e
 *                                 return e
 */
            }
          }
          __pyx_L12_break:;

          /* "cyac/trie.pyx":373
 *                                 b.ehead = e
 *                                 return e
 *                         e = - self.array[e].check             # <<<<<<<<<<<<<<
 *                         if e == b.ehead:
 *                             break
 */
          __pyx_v_e = (-(__pyx_v_self->array[__pyx_v_e]).check);

          /* "cyac/trie.pyx":374
 *                                 return e
 *                         e = - self.array[e].check
 *                         if e == b.ehead:             # <<<<<<<<<<<<<<
 *                             break
 *                 b.reject = nc
 */
          __pyx_t_2 = ((__pyx_v_e == __pyx_v_b->ehead) != 0);
          if (__pyx_t_2) {

            /* "cyac/trie.pyx":375
 *                         e = - self.array[e].check
 *                         if e == b.ehead:
 *                             break             # <<<<<<<<<<<<<<
 *                 b.reject = nc
 *                 if b.reject < self.reject[b.num]:
 */
            goto __pyx_L10_break;

            /* "cyac/trie.pyx":374
 *                                 return e
 *                         e = - self.array[e].check
 *                         if e == b.ehead:             # <<<<<<<<<<<<<<
 *                             break
 *                 b.reject = nc
 */
          }
        }
        __pyx_L10_break:;

        /* "cyac/trie.pyx":361
 *             while True:
 *                 b = &self.blocks[bi]
 *                 if b.num >= nc  and  nc < b.reject:             # <<<<<<<<<<<<<<
 *                     e = b.ehead
 *                     while True:
 */
      }

      /* "cyac/trie.pyx":376
 *                         if e == b.ehead:
 *                             break
 *                 b.reject = nc             # <<<<<<<<<<<<<<
 *                 if b.reject < self.reject[b.num]:
 *                     self.reject[b.num] = b.reject
 */
      __pyx_v_b->reject = __pyx_v_nc;

      /* "cyac/trie.pyx":377
 *                             break
 *                 b.reject = nc
 *                 if b.reject < self.reject[b.num]:             # <<<<<<<<<<<<<<
 *                     self.reject[b.num] = b.reject
 *                 bin_ = b.next_
 */
      __pyx_t_2 = ((__pyx_v_b->reject < (__pyx_v_self->reject[__pyx_v_b->num])) != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":378
 *                 b.reject = nc
 *                 if b.reject < self.reject[b.num]:
 *                     self.reject[b.num] = b.reject             # <<<<<<<<<<<<<<
 *                 bin_ = b.next_
 *                 b.trial += 1
 */
        __pyx_t_1 = __pyx_v_b->reject;
        (__pyx_v_self->reject[__pyx_v_b->num]) = __pyx_t_1;

        /* "cyac/trie.pyx":377
 *                             break
 *                 b.reject = nc
 *                 if b.reject < self.reject[b.num]:             # <<<<<<<<<<<<<<
 *                     self.reject[b.num] = b.reject
 *                 bin_ = b.next_
 */
      }

      /* "cyac/trie.pyx":379
 *                 if b.reject < self.reject[b.num]:
 *                     self.reject[b.num] = b.reject
 *                 bin_ = b.next_             # <<<<<<<<<<<<<<
 *                 b.trial += 1
 *                 if b.trial == self.max_trial:
 */
      __pyx_t_1 = __pyx_v_b->next_;
      __pyx_v_bin_ = __pyx_t_1;

      /* "cyac/trie.pyx":380
 *                     self.reject[b.num] = b.reject
 *                 bin_ = b.next_
 *                 b.trial += 1             # <<<<<<<<<<<<<<
 *                 if b.trial == self.max_trial:
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 */
      __pyx_v_b->trial = (__pyx_v_b->trial + 1);

      /* "cyac/trie.pyx":381
 *                 bin_ = b.next_
 *                 b.trial += 1
 *                 if b.trial == self.max_trial:             # <<<<<<<<<<<<<<
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *                 if bi == bz:
 */
      __pyx_t_2 = ((__pyx_v_b->trial == __pyx_v_self->max_trial) != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":382
 *                 b.trial += 1
 *                 if b.trial == self.max_trial:
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)             # <<<<<<<<<<<<<<
 *                 if bi == bz:
 *                     break
 */
        __pyx_f_4cyac_4trie_4Trie_transfer_block(__pyx_v_self, __pyx_v_bi, (&__pyx_v_self->bheadO), (&__pyx_v_self->bheadC));

        /* "cyac/trie.pyx":381
 *                 bin_ = b.next_
 *                 b.trial += 1
 *                 if b.trial == self.max_trial:             # <<<<<<<<<<<<<<
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *                 if bi == bz:
 */
      }

      /* "cyac/trie.pyx":383
 *                 if b.trial == self.max_trial:
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *                 if bi == bz:             # <<<<<<<<<<<<<<
 *                     break
 *                 bi = bin_
 */
      __pyx_t_2 = ((__pyx_v_bi == __pyx_v_bz) != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":384
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *                 if bi == bz:
 *                     break             # <<<<<<<<<<<<<<
 *                 bi = bin_
 *         return self.add_block() << 8
 */
        goto __pyx_L5_break;

        /* "cyac/trie.pyx":383
 *                 if b.trial == self.max_trial:
 *                     self.transfer_block(bi, &self.bheadO, &self.bheadC)
 *                 if bi == bz:             # <<<<<<<<<<<<<<
 *                     break
 *                 bi = bin_
 */
      }

      /* "cyac/trie.pyx":385
 *                 if bi == bz:
 *                     break
 *                 bi = bin_             # <<<<<<<<<<<<<<
 *         return self.add_block() << 8
 * 
 */
      __pyx_v_bi = __pyx_v_bin_;
    }
    __pyx_L5_break:;

    /* "cyac/trie.pyx":356
 *         cdef int bz, e, i
 *         cdef Block *b
 *         if bi != 0:             # <<<<<<<<<<<<<<
 *             bz = self.blocks[self.bheadO].prev
 *             nc = child_num
 */
  }

  /* "cyac/trie.pyx":386
 *                     break
 *                 bi = bin_
 *         return self.add_block() << 8             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int resolve(self, int from_n, int base_n, byte_t label_n):
 */
  __pyx_r = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->add_block(__pyx_v_self) << 8);
  goto __pyx_L0;

  /* "cyac/trie.pyx":352
 *         return self.add_block() << 8
 * 
 *     cdef inline int find_places(self, byte_t *child, int child_num):             # <<<<<<<<<<<<<<
 *         cdef int bi = self.bheadO
 *         cdef int bz, e, i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":388
 *         return self.add_block() << 8
 * 
 *     cdef inline int resolve(self, int from_n, int base_n, byte_t label_n):             # <<<<<<<<<<<<<<
 *         cdef int to_pn = base_n ^ label_n
 *         cdef int from_p = self.array[to_pn].check
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_resolve(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_from_n, int __pyx_v_base_n, __pyx_t_4cyac_4utf8_byte_t __pyx_v_label_n) {
  int __pyx_v_to_pn;
  int __pyx_v_from_p;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_p_ptr;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_n_ptr;
  int __pyx_v_base_p;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_to_ptr_;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_ptr;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_n_;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_ptr;
  bool __pyx_v_flag;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_children[0x100];
  int __pyx_v_from_;
  int __pyx_v_i;
  int __pyx_v_child_num;
  int __pyx_v_base;
  int __pyx_v_base_;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_chl;
  int __pyx_v_to;
  int __pyx_v_to_;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_n;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_c;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  unsigned short __pyx_t_7;
  __pyx_t_4cyac_4utf8_byte_t __pyx_t_8;
  __Pyx_RefNannySetupContext("resolve", 0);

  /* "cyac/trie.pyx":389
 * 
 *     cdef inline int resolve(self, int from_n, int base_n, byte_t label_n):
 *         cdef int to_pn = base_n ^ label_n             # <<<<<<<<<<<<<<
 *         cdef int from_p = self.array[to_pn].check
 *         cdef Node *from_p_ptr = &self.array[from_p]
 */
  __pyx_v_to_pn = (__pyx_v_base_n ^ __pyx_v_label_n);

  /* "cyac/trie.pyx":390
 *     cdef inline int resolve(self, int from_n, int base_n, byte_t label_n):
 *         cdef int to_pn = base_n ^ label_n
 *         cdef int from_p = self.array[to_pn].check             # <<<<<<<<<<<<<<
 *         cdef Node *from_p_ptr = &self.array[from_p]
 *         cdef Node *from_n_ptr = &self.array[from_n]
 */
  __pyx_t_1 = (__pyx_v_self->array[__pyx_v_to_pn]).check;
  __pyx_v_from_p = __pyx_t_1;

  /* "cyac/trie.pyx":391
 *         cdef int to_pn = base_n ^ label_n
 *         cdef int from_p = self.array[to_pn].check
 *         cdef Node *from_p_ptr = &self.array[from_p]             # <<<<<<<<<<<<<<
 *         cdef Node *from_n_ptr = &self.array[from_n]
 *         cdef int base_p = self._node_base(&self.array[from_p])
 */
  __pyx_v_from_p_ptr = (&(__pyx_v_self->array[__pyx_v_from_p]));

  /* "cyac/trie.pyx":392
 *         cdef int from_p = self.array[to_pn].check
 *         cdef Node *from_p_ptr = &self.array[from_p]
 *         cdef Node *from_n_ptr = &self.array[from_n]             # <<<<<<<<<<<<<<
 *         cdef int base_p = self._node_base(&self.array[from_p])
 *         # cdef Node *to_ptr
 */
  __pyx_v_from_n_ptr = (&(__pyx_v_self->array[__pyx_v_from_n]));

  /* "cyac/trie.pyx":393
 *         cdef Node *from_p_ptr = &self.array[from_p]
 *         cdef Node *from_n_ptr = &self.array[from_n]
 *         cdef int base_p = self._node_base(&self.array[from_p])             # <<<<<<<<<<<<<<
 *         # cdef Node *to_ptr
 *         cdef Node *to_ptr_
 */
  __pyx_v_base_p = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_self->array[__pyx_v_from_p])));

  /* "cyac/trie.pyx":399
 *         cdef Node *n_
 *         cdef Node *from_ptr
 *         cdef bool flag = self.consult(from_n_ptr, from_p_ptr)             # <<<<<<<<<<<<<<
 *         cdef byte_t children[256]
 *         cdef int from_, i, child_num, base
 */
  __pyx_v_flag = __pyx_f_4cyac_4trie_4Trie_consult(__pyx_v_self, __pyx_v_from_n_ptr, __pyx_v_from_p_ptr);

  /* "cyac/trie.pyx":402
 *         cdef byte_t children[256]
 *         cdef int from_, i, child_num, base
 *         if flag:             # <<<<<<<<<<<<<<
 *             child_num = self.set_child(base_n, from_n_ptr[0].child, label_n, True, children)
 *         else:
 */
  __pyx_t_2 = (__pyx_v_flag != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":403
 *         cdef int from_, i, child_num, base
 *         if flag:
 *             child_num = self.set_child(base_n, from_n_ptr[0].child, label_n, True, children)             # <<<<<<<<<<<<<<
 *         else:
 *             child_num = self.set_child(base_p, from_p_ptr[0].child, 255, False, children)
 */
    __pyx_v_child_num = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->set_child(__pyx_v_self, __pyx_v_base_n, (__pyx_v_from_n_ptr[0]).child, __pyx_v_label_n, 1, __pyx_v_children);

    /* "cyac/trie.pyx":402
 *         cdef byte_t children[256]
 *         cdef int from_, i, child_num, base
 *         if flag:             # <<<<<<<<<<<<<<
 *             child_num = self.set_child(base_n, from_n_ptr[0].child, label_n, True, children)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":405
 *             child_num = self.set_child(base_n, from_n_ptr[0].child, label_n, True, children)
 *         else:
 *             child_num = self.set_child(base_p, from_p_ptr[0].child, 255, False, children)             # <<<<<<<<<<<<<<
 *         base = self.find_place() if child_num == 1 else self.find_places(children, child_num)
 *         base ^= children[0]
 */
  /*else*/ {
    __pyx_v_child_num = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->set_child(__pyx_v_self, __pyx_v_base_p, (__pyx_v_from_p_ptr[0]).child, 0xFF, 0, __pyx_v_children);
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":406
 *         else:
 *             child_num = self.set_child(base_p, from_p_ptr[0].child, 255, False, children)
 *         base = self.find_place() if child_num == 1 else self.find_places(children, child_num)             # <<<<<<<<<<<<<<
 *         base ^= children[0]
 *         if flag:
 */
  if (((__pyx_v_child_num == 1) != 0)) {
    __pyx_t_1 = __pyx_f_4cyac_4trie_4Trie_find_place(__pyx_v_self);
  } else {
    __pyx_t_1 = __pyx_f_4cyac_4trie_4Trie_find_places(__pyx_v_self, __pyx_v_children, __pyx_v_child_num);
  }
  __pyx_v_base = __pyx_t_1;

  /* "cyac/trie.pyx":407
 *             child_num = self.set_child(base_p, from_p_ptr[0].child, 255, False, children)
 *         base = self.find_place() if child_num == 1 else self.find_places(children, child_num)
 *         base ^= children[0]             # <<<<<<<<<<<<<<
 *         if flag:
 *             from_ = from_n
 */
  __pyx_v_base = (__pyx_v_base ^ (__pyx_v_children[0]));

  /* "cyac/trie.pyx":408
 *         base = self.find_place() if child_num == 1 else self.find_places(children, child_num)
 *         base ^= children[0]
 *         if flag:             # <<<<<<<<<<<<<<
 *             from_ = from_n
 *             from_ptr = &self.array[from_n]
 */
  __pyx_t_2 = (__pyx_v_flag != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":409
 *         base ^= children[0]
 *         if flag:
 *             from_ = from_n             # <<<<<<<<<<<<<<
 *             from_ptr = &self.array[from_n]
 *             base_ = base_n
 */
    __pyx_v_from_ = __pyx_v_from_n;

    /* "cyac/trie.pyx":410
 *         if flag:
 *             from_ = from_n
 *             from_ptr = &self.array[from_n]             # <<<<<<<<<<<<<<
 *             base_ = base_n
 *         else:
 */
    __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_n]));

    /* "cyac/trie.pyx":411
 *             from_ = from_n
 *             from_ptr = &self.array[from_n]
 *             base_ = base_n             # <<<<<<<<<<<<<<
 *         else:
 *             from_ = from_p
 */
    __pyx_v_base_ = __pyx_v_base_n;

    /* "cyac/trie.pyx":408
 *         base = self.find_place() if child_num == 1 else self.find_places(children, child_num)
 *         base ^= children[0]
 *         if flag:             # <<<<<<<<<<<<<<
 *             from_ = from_n
 *             from_ptr = &self.array[from_n]
 */
    goto __pyx_L4;
  }

  /* "cyac/trie.pyx":413
 *             base_ = base_n
 *         else:
 *             from_ = from_p             # <<<<<<<<<<<<<<
 *             from_ptr = &self.array[from_p]
 *             base_ = base_p
 */
  /*else*/ {
    __pyx_v_from_ = __pyx_v_from_p;

    /* "cyac/trie.pyx":414
 *         else:
 *             from_ = from_p
 *             from_ptr = &self.array[from_p]             # <<<<<<<<<<<<<<
 *             base_ = base_p
 *         if flag  and  children[0] == label_n:
 */
    __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_p]));

    /* "cyac/trie.pyx":415
 *             from_ = from_p
 *             from_ptr = &self.array[from_p]
 *             base_ = base_p             # <<<<<<<<<<<<<<
 *         if flag  and  children[0] == label_n:
 *             from_ptr[0].child = label_n
 */
    __pyx_v_base_ = __pyx_v_base_p;
  }
  __pyx_L4:;

  /* "cyac/trie.pyx":416
 *             from_ptr = &self.array[from_p]
 *             base_ = base_p
 *         if flag  and  children[0] == label_n:             # <<<<<<<<<<<<<<
 *             from_ptr[0].child = label_n
 *         from_ptr[0].value = -base - 1
 */
  __pyx_t_3 = (__pyx_v_flag != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_children[0]) == __pyx_v_label_n) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":417
 *             base_ = base_p
 *         if flag  and  children[0] == label_n:
 *             from_ptr[0].child = label_n             # <<<<<<<<<<<<<<
 *         from_ptr[0].value = -base - 1
 *         for i in range(0, child_num):
 */
    (__pyx_v_from_ptr[0]).child = __pyx_v_label_n;

    /* "cyac/trie.pyx":416
 *             from_ptr = &self.array[from_p]
 *             base_ = base_p
 *         if flag  and  children[0] == label_n:             # <<<<<<<<<<<<<<
 *             from_ptr[0].child = label_n
 *         from_ptr[0].value = -base - 1
 */
  }

  /* "cyac/trie.pyx":418
 *         if flag  and  children[0] == label_n:
 *             from_ptr[0].child = label_n
 *         from_ptr[0].value = -base - 1             # <<<<<<<<<<<<<<
 *         for i in range(0, child_num):
 *             chl = children[i]
 */
  (__pyx_v_from_ptr[0]).value = ((-__pyx_v_base) - 1);

  /* "cyac/trie.pyx":419
 *             from_ptr[0].child = label_n
 *         from_ptr[0].value = -base - 1
 *         for i in range(0, child_num):             # <<<<<<<<<<<<<<
 *             chl = children[i]
 *             to = self.pop_enode(base, chl, from_)
 */
  __pyx_t_1 = __pyx_v_child_num;
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cyac/trie.pyx":420
 *         from_ptr[0].value = -base - 1
 *         for i in range(0, child_num):
 *             chl = children[i]             # <<<<<<<<<<<<<<
 *             to = self.pop_enode(base, chl, from_)
 *             to_ = base_ ^ chl
 */
    __pyx_v_chl = (__pyx_v_children[__pyx_v_i]);

    /* "cyac/trie.pyx":421
 *         for i in range(0, child_num):
 *             chl = children[i]
 *             to = self.pop_enode(base, chl, from_)             # <<<<<<<<<<<<<<
 *             to_ = base_ ^ chl
 *             n = &self.array[to]
 */
    __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_pop_enode(__pyx_v_self, __pyx_v_base, __pyx_v_chl, __pyx_v_from_);

    /* "cyac/trie.pyx":422
 *             chl = children[i]
 *             to = self.pop_enode(base, chl, from_)
 *             to_ = base_ ^ chl             # <<<<<<<<<<<<<<
 *             n = &self.array[to]
 *             if i == child_num - 1:
 */
    __pyx_v_to_ = (__pyx_v_base_ ^ __pyx_v_chl);

    /* "cyac/trie.pyx":423
 *             to = self.pop_enode(base, chl, from_)
 *             to_ = base_ ^ chl
 *             n = &self.array[to]             # <<<<<<<<<<<<<<
 *             if i == child_num - 1:
 *                 n.sibling = 0
 */
    __pyx_v_n = (&(__pyx_v_self->array[__pyx_v_to]));

    /* "cyac/trie.pyx":424
 *             to_ = base_ ^ chl
 *             n = &self.array[to]
 *             if i == child_num - 1:             # <<<<<<<<<<<<<<
 *                 n.sibling = 0
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_i == (__pyx_v_child_num - 1)) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":425
 *             n = &self.array[to]
 *             if i == child_num - 1:
 *                 n.sibling = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 n.sibling = children[i + 1]
 */
      __pyx_v_n->sibling = 0;

      /* "cyac/trie.pyx":424
 *             to_ = base_ ^ chl
 *             n = &self.array[to]
 *             if i == child_num - 1:             # <<<<<<<<<<<<<<
 *                 n.sibling = 0
 *             else:
 */
      goto __pyx_L10;
    }

    /* "cyac/trie.pyx":427
 *                 n.sibling = 0
 *             else:
 *                 n.sibling = children[i + 1]             # <<<<<<<<<<<<<<
 *             if flag  and  to_ == to_pn:
 *                 continue
 */
    /*else*/ {
      __pyx_v_n->sibling = (__pyx_v_children[(__pyx_v_i + 1)]);
    }
    __pyx_L10:;

    /* "cyac/trie.pyx":428
 *             else:
 *                 n.sibling = children[i + 1]
 *             if flag  and  to_ == to_pn:             # <<<<<<<<<<<<<<
 *                 continue
 *             n_ = &self.array[to_]
 */
    __pyx_t_3 = (__pyx_v_flag != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_to_ == __pyx_v_to_pn) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":429
 *                 n.sibling = children[i + 1]
 *             if flag  and  to_ == to_pn:
 *                 continue             # <<<<<<<<<<<<<<
 *             n_ = &self.array[to_]
 *             n.value = n_.value
 */
      goto __pyx_L8_continue;

      /* "cyac/trie.pyx":428
 *             else:
 *                 n.sibling = children[i + 1]
 *             if flag  and  to_ == to_pn:             # <<<<<<<<<<<<<<
 *                 continue
 *             n_ = &self.array[to_]
 */
    }

    /* "cyac/trie.pyx":430
 *             if flag  and  to_ == to_pn:
 *                 continue
 *             n_ = &self.array[to_]             # <<<<<<<<<<<<<<
 *             n.value = n_.value
 *             if n_.value >= 0  and  n_.value != value_limit:
 */
    __pyx_v_n_ = (&(__pyx_v_self->array[__pyx_v_to_]));

    /* "cyac/trie.pyx":431
 *                 continue
 *             n_ = &self.array[to_]
 *             n.value = n_.value             # <<<<<<<<<<<<<<
 *             if n_.value >= 0  and  n_.value != value_limit:
 *                 self.leafs[n_.value] = to
 */
    __pyx_t_6 = __pyx_v_n_->value;
    __pyx_v_n->value = __pyx_t_6;

    /* "cyac/trie.pyx":432
 *             n_ = &self.array[to_]
 *             n.value = n_.value
 *             if n_.value >= 0  and  n_.value != value_limit:             # <<<<<<<<<<<<<<
 *                 self.leafs[n_.value] = to
 *             n.flags = n_.flags
 */
    __pyx_t_3 = ((__pyx_v_n_->value >= 0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L15_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_n_->value != __pyx_v_4cyac_4trie_value_limit) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L15_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":433
 *             n.value = n_.value
 *             if n_.value >= 0  and  n_.value != value_limit:
 *                 self.leafs[n_.value] = to             # <<<<<<<<<<<<<<
 *             n.flags = n_.flags
 *             if n.value < 0  and  chl != 0:
 */
      (__pyx_v_self->leafs[__pyx_v_n_->value]) = __pyx_v_to;

      /* "cyac/trie.pyx":432
 *             n_ = &self.array[to_]
 *             n.value = n_.value
 *             if n_.value >= 0  and  n_.value != value_limit:             # <<<<<<<<<<<<<<
 *                 self.leafs[n_.value] = to
 *             n.flags = n_.flags
 */
    }

    /* "cyac/trie.pyx":434
 *             if n_.value >= 0  and  n_.value != value_limit:
 *                 self.leafs[n_.value] = to
 *             n.flags = n_.flags             # <<<<<<<<<<<<<<
 *             if n.value < 0  and  chl != 0:
 *                 c = self.array[to_].child
 */
    __pyx_t_7 = __pyx_v_n_->flags;
    __pyx_v_n->flags = __pyx_t_7;

    /* "cyac/trie.pyx":435
 *                 self.leafs[n_.value] = to
 *             n.flags = n_.flags
 *             if n.value < 0  and  chl != 0:             # <<<<<<<<<<<<<<
 *                 c = self.array[to_].child
 *                 self.array[to].child = c
 */
    __pyx_t_3 = ((__pyx_v_n->value < 0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_chl != 0) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":436
 *             n.flags = n_.flags
 *             if n.value < 0  and  chl != 0:
 *                 c = self.array[to_].child             # <<<<<<<<<<<<<<
 *                 self.array[to].child = c
 *                 ptr = &self.array[self._node_base(n) ^ c]
 */
      __pyx_t_8 = (__pyx_v_self->array[__pyx_v_to_]).child;
      __pyx_v_c = __pyx_t_8;

      /* "cyac/trie.pyx":437
 *             if n.value < 0  and  chl != 0:
 *                 c = self.array[to_].child
 *                 self.array[to].child = c             # <<<<<<<<<<<<<<
 *                 ptr = &self.array[self._node_base(n) ^ c]
 *                 ptr[0].check = to
 */
      (__pyx_v_self->array[__pyx_v_to]).child = __pyx_v_c;

      /* "cyac/trie.pyx":438
 *                 c = self.array[to_].child
 *                 self.array[to].child = c
 *                 ptr = &self.array[self._node_base(n) ^ c]             # <<<<<<<<<<<<<<
 *                 ptr[0].check = to
 *                 c = ptr[0].sibling
 */
      __pyx_v_ptr = (&(__pyx_v_self->array[(__pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_n) ^ __pyx_v_c)]));

      /* "cyac/trie.pyx":439
 *                 self.array[to].child = c
 *                 ptr = &self.array[self._node_base(n) ^ c]
 *                 ptr[0].check = to             # <<<<<<<<<<<<<<
 *                 c = ptr[0].sibling
 *                 while c != 0:
 */
      (__pyx_v_ptr[0]).check = __pyx_v_to;

      /* "cyac/trie.pyx":440
 *                 ptr = &self.array[self._node_base(n) ^ c]
 *                 ptr[0].check = to
 *                 c = ptr[0].sibling             # <<<<<<<<<<<<<<
 *                 while c != 0:
 *                     ptr = &self.array[self._node_base(n)^ c]
 */
      __pyx_t_8 = (__pyx_v_ptr[0]).sibling;
      __pyx_v_c = __pyx_t_8;

      /* "cyac/trie.pyx":441
 *                 ptr[0].check = to
 *                 c = ptr[0].sibling
 *                 while c != 0:             # <<<<<<<<<<<<<<
 *                     ptr = &self.array[self._node_base(n)^ c]
 *                     ptr[0].check = to
 */
      while (1) {
        __pyx_t_2 = ((__pyx_v_c != 0) != 0);
        if (!__pyx_t_2) break;

        /* "cyac/trie.pyx":442
 *                 c = ptr[0].sibling
 *                 while c != 0:
 *                     ptr = &self.array[self._node_base(n)^ c]             # <<<<<<<<<<<<<<
 *                     ptr[0].check = to
 *                     c = ptr[0].sibling
 */
        __pyx_v_ptr = (&(__pyx_v_self->array[(__pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_n) ^ __pyx_v_c)]));

        /* "cyac/trie.pyx":443
 *                 while c != 0:
 *                     ptr = &self.array[self._node_base(n)^ c]
 *                     ptr[0].check = to             # <<<<<<<<<<<<<<
 *                     c = ptr[0].sibling
 * 
 */
        (__pyx_v_ptr[0]).check = __pyx_v_to;

        /* "cyac/trie.pyx":444
 *                     ptr = &self.array[self._node_base(n)^ c]
 *                     ptr[0].check = to
 *                     c = ptr[0].sibling             # <<<<<<<<<<<<<<
 * 
 *             if not flag and to_ == from_n:
 */
        __pyx_t_8 = (__pyx_v_ptr[0]).sibling;
        __pyx_v_c = __pyx_t_8;
      }

      /* "cyac/trie.pyx":435
 *                 self.leafs[n_.value] = to
 *             n.flags = n_.flags
 *             if n.value < 0  and  chl != 0:             # <<<<<<<<<<<<<<
 *                 c = self.array[to_].child
 *                 self.array[to].child = c
 */
    }

    /* "cyac/trie.pyx":446
 *                     c = ptr[0].sibling
 * 
 *             if not flag and to_ == from_n:             # <<<<<<<<<<<<<<
 *                 from_n = to
 *             if not flag and to_ == to_pn:
 */
    __pyx_t_3 = ((!(__pyx_v_flag != 0)) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_to_ == __pyx_v_from_n) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L23_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":447
 * 
 *             if not flag and to_ == from_n:
 *                 from_n = to             # <<<<<<<<<<<<<<
 *             if not flag and to_ == to_pn:
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)
 */
      __pyx_v_from_n = __pyx_v_to;

      /* "cyac/trie.pyx":446
 *                     c = ptr[0].sibling
 * 
 *             if not flag and to_ == from_n:             # <<<<<<<<<<<<<<
 *                 from_n = to
 *             if not flag and to_ == to_pn:
 */
    }

    /* "cyac/trie.pyx":448
 *             if not flag and to_ == from_n:
 *                 from_n = to
 *             if not flag and to_ == to_pn:             # <<<<<<<<<<<<<<
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)
 *                 to_ptr_ = &self.array[to_]
 */
    __pyx_t_3 = ((!(__pyx_v_flag != 0)) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L26_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_to_ == __pyx_v_to_pn) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L26_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":449
 *                 from_n = to
 *             if not flag and to_ == to_pn:
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)             # <<<<<<<<<<<<<<
 *                 to_ptr_ = &self.array[to_]
 *                 to_ptr_[0].child = 0
 */
      __pyx_f_4cyac_4trie_4Trie_push_sibling(__pyx_v_self, __pyx_v_from_n, (__pyx_v_to_pn ^ __pyx_v_label_n), __pyx_v_label_n, 1);

      /* "cyac/trie.pyx":450
 *             if not flag and to_ == to_pn:
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)
 *                 to_ptr_ = &self.array[to_]             # <<<<<<<<<<<<<<
 *                 to_ptr_[0].child = 0
 *                 n_.value = value_limit
 */
      __pyx_v_to_ptr_ = (&(__pyx_v_self->array[__pyx_v_to_]));

      /* "cyac/trie.pyx":451
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)
 *                 to_ptr_ = &self.array[to_]
 *                 to_ptr_[0].child = 0             # <<<<<<<<<<<<<<
 *                 n_.value = value_limit
 *                 n_.check = from_n
 */
      (__pyx_v_to_ptr_[0]).child = 0;

      /* "cyac/trie.pyx":452
 *                 to_ptr_ = &self.array[to_]
 *                 to_ptr_[0].child = 0
 *                 n_.value = value_limit             # <<<<<<<<<<<<<<
 *                 n_.check = from_n
 *             else:
 */
      __pyx_v_n_->value = __pyx_v_4cyac_4trie_value_limit;

      /* "cyac/trie.pyx":453
 *                 to_ptr_[0].child = 0
 *                 n_.value = value_limit
 *                 n_.check = from_n             # <<<<<<<<<<<<<<
 *             else:
 *                 self.push_enode(to_)
 */
      __pyx_v_n_->check = __pyx_v_from_n;

      /* "cyac/trie.pyx":448
 *             if not flag and to_ == from_n:
 *                 from_n = to
 *             if not flag and to_ == to_pn:             # <<<<<<<<<<<<<<
 *                 self.push_sibling(from_n, to_pn ^ label_n, label_n, True)
 *                 to_ptr_ = &self.array[to_]
 */
      goto __pyx_L25;
    }

    /* "cyac/trie.pyx":455
 *                 n_.check = from_n
 *             else:
 *                 self.push_enode(to_)             # <<<<<<<<<<<<<<
 *         if flag:
 *             return base ^ label_n
 */
    /*else*/ {
      ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->push_enode(__pyx_v_self, __pyx_v_to_);
    }
    __pyx_L25:;
    __pyx_L8_continue:;
  }

  /* "cyac/trie.pyx":456
 *             else:
 *                 self.push_enode(to_)
 *         if flag:             # <<<<<<<<<<<<<<
 *             return base ^ label_n
 *         else:
 */
  __pyx_t_2 = (__pyx_v_flag != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":457
 *                 self.push_enode(to_)
 *         if flag:
 *             return base ^ label_n             # <<<<<<<<<<<<<<
 *         else:
 *             return to_pn
 */
    __pyx_r = (__pyx_v_base ^ __pyx_v_label_n);
    goto __pyx_L0;

    /* "cyac/trie.pyx":456
 *             else:
 *                 self.push_enode(to_)
 *         if flag:             # <<<<<<<<<<<<<<
 *             return base ^ label_n
 *         else:
 */
  }

  /* "cyac/trie.pyx":459
 *             return base ^ label_n
 *         else:
 *             return to_pn             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int jump(self, byte_t byte, int from_):
 */
  /*else*/ {
    __pyx_r = __pyx_v_to_pn;
    goto __pyx_L0;
  }

  /* "cyac/trie.pyx":388
 *         return self.add_block() << 8
 * 
 *     cdef inline int resolve(self, int from_n, int base_n, byte_t label_n):             # <<<<<<<<<<<<<<
 *         cdef int to_pn = base_n ^ label_n
 *         cdef int from_p = self.array[to_pn].check
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":461
 *             return to_pn
 * 
 *     cdef inline int jump(self, byte_t byte, int from_):             # <<<<<<<<<<<<<<
 *         from_ptr = &self.array[from_]
 *         if from_ptr[0].value >= 0:
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t __pyx_v_byte, int __pyx_v_from_) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_ptr;
  int __pyx_v_to;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("jump", 0);

  /* "cyac/trie.pyx":462
 * 
 *     cdef inline int jump(self, byte_t byte, int from_):
 *         from_ptr = &self.array[from_]             # <<<<<<<<<<<<<<
 *         if from_ptr[0].value >= 0:
 *             return -1
 */
  __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_]));

  /* "cyac/trie.pyx":463
 *     cdef inline int jump(self, byte_t byte, int from_):
 *         from_ptr = &self.array[from_]
 *         if from_ptr[0].value >= 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         to = self._node_base(&from_ptr[0]) ^ byte
 */
  __pyx_t_1 = (((__pyx_v_from_ptr[0]).value >= 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":464
 *         from_ptr = &self.array[from_]
 *         if from_ptr[0].value >= 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         to = self._node_base(&from_ptr[0]) ^ byte
 *         if self.array[to].check != from_:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":463
 *     cdef inline int jump(self, byte_t byte, int from_):
 *         from_ptr = &self.array[from_]
 *         if from_ptr[0].value >= 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         to = self._node_base(&from_ptr[0]) ^ byte
 */
  }

  /* "cyac/trie.pyx":465
 *         if from_ptr[0].value >= 0:
 *             return -1
 *         to = self._node_base(&from_ptr[0]) ^ byte             # <<<<<<<<<<<<<<
 *         if self.array[to].check != from_:
 *             return -1
 */
  __pyx_v_to = (__pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_from_ptr[0]))) ^ __pyx_v_byte);

  /* "cyac/trie.pyx":466
 *             return -1
 *         to = self._node_base(&from_ptr[0]) ^ byte
 *         if self.array[to].check != from_:             # <<<<<<<<<<<<<<
 *             return -1
 *         return to
 */
  __pyx_t_1 = (((__pyx_v_self->array[__pyx_v_to]).check != __pyx_v_from_) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":467
 *         to = self._node_base(&from_ptr[0]) ^ byte
 *         if self.array[to].check != from_:
 *             return -1             # <<<<<<<<<<<<<<
 *         return to
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":466
 *             return -1
 *         to = self._node_base(&from_ptr[0]) ^ byte
 *         if self.array[to].check != from_:             # <<<<<<<<<<<<<<
 *             return -1
 *         return to
 */
  }

  /* "cyac/trie.pyx":468
 *         if self.array[to].check != from_:
 *             return -1
 *         return to             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int jump_bytes(self, byte_t *bytes_, int byte_num, int from_):
 */
  __pyx_r = __pyx_v_to;
  goto __pyx_L0;

  /* "cyac/trie.pyx":461
 *             return to_pn
 * 
 *     cdef inline int jump(self, byte_t byte, int from_):             # <<<<<<<<<<<<<<
 *         from_ptr = &self.array[from_]
 *         if from_ptr[0].value >= 0:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":470
 *         return to
 * 
 *     cdef inline int jump_bytes(self, byte_t *bytes_, int byte_num, int from_):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef byte_t byte
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_bytes(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_bytes_, int __pyx_v_byte_num, int __pyx_v_from_) {
  int __pyx_v_i;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_byte;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("jump_bytes", 0);

  /* "cyac/trie.pyx":473
 *         cdef int i
 *         cdef byte_t byte
 *         for i in range(byte_num):             # <<<<<<<<<<<<<<
 *             byte = bytes_[i]
 *             from_ = self.jump(byte, from_)
 */
  __pyx_t_1 = __pyx_v_byte_num;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cyac/trie.pyx":474
 *         cdef byte_t byte
 *         for i in range(byte_num):
 *             byte = bytes_[i]             # <<<<<<<<<<<<<<
 *             from_ = self.jump(byte, from_)
 *             if from_ < 0:
 */
    __pyx_v_byte = (__pyx_v_bytes_[__pyx_v_i]);

    /* "cyac/trie.pyx":475
 *         for i in range(byte_num):
 *             byte = bytes_[i]
 *             from_ = self.jump(byte, from_)             # <<<<<<<<<<<<<<
 *             if from_ < 0:
 *                 return -1
 */
    __pyx_v_from_ = __pyx_f_4cyac_4trie_4Trie_jump(__pyx_v_self, __pyx_v_byte, __pyx_v_from_);

    /* "cyac/trie.pyx":476
 *             byte = bytes_[i]
 *             from_ = self.jump(byte, from_)
 *             if from_ < 0:             # <<<<<<<<<<<<<<
 *                 return -1
 *         return from_
 */
    __pyx_t_4 = ((__pyx_v_from_ < 0) != 0);
    if (__pyx_t_4) {

      /* "cyac/trie.pyx":477
 *             from_ = self.jump(byte, from_)
 *             if from_ < 0:
 *                 return -1             # <<<<<<<<<<<<<<
 *         return from_
 * 
 */
      __pyx_r = -1;
      goto __pyx_L0;

      /* "cyac/trie.pyx":476
 *             byte = bytes_[i]
 *             from_ = self.jump(byte, from_)
 *             if from_ < 0:             # <<<<<<<<<<<<<<
 *                 return -1
 *         return from_
 */
    }
  }

  /* "cyac/trie.pyx":478
 *             if from_ < 0:
 *                 return -1
 *         return from_             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int jump_uchar(self, xstring text, int char_idx, int from_):
 */
  __pyx_r = __pyx_v_from_;
  goto __pyx_L0;

  /* "cyac/trie.pyx":470
 *         return to
 * 
 *     cdef inline int jump_bytes(self, byte_t *bytes_, int byte_num, int from_):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef byte_t byte
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":480
 *         return from_
 * 
 *     cdef inline int jump_uchar(self, xstring text, int char_idx, int from_):             # <<<<<<<<<<<<<<
 *         cdef byte_t *start = text.bytes_ + text.char_offsets[char_idx]
 *         cdef int num = text.char_offsets[char_idx+1] - text.char_offsets[char_idx]
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_jump_uchar(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_text, int __pyx_v_char_idx, int __pyx_v_from_) {
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_start;
  int __pyx_v_num;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jump_uchar", 0);

  /* "cyac/trie.pyx":481
 * 
 *     cdef inline int jump_uchar(self, xstring text, int char_idx, int from_):
 *         cdef byte_t *start = text.bytes_ + text.char_offsets[char_idx]             # <<<<<<<<<<<<<<
 *         cdef int num = text.char_offsets[char_idx+1] - text.char_offsets[char_idx]
 *         return self.jump_bytes(start, num, from_)
 */
  __pyx_v_start = (__pyx_v_text->bytes_ + (__pyx_v_text->char_offsets[__pyx_v_char_idx]));

  /* "cyac/trie.pyx":482
 *     cdef inline int jump_uchar(self, xstring text, int char_idx, int from_):
 *         cdef byte_t *start = text.bytes_ + text.char_offsets[char_idx]
 *         cdef int num = text.char_offsets[char_idx+1] - text.char_offsets[char_idx]             # <<<<<<<<<<<<<<
 *         return self.jump_bytes(start, num, from_)
 * 
 */
  __pyx_v_num = ((__pyx_v_text->char_offsets[(__pyx_v_char_idx + 1)]) - (__pyx_v_text->char_offsets[__pyx_v_char_idx]));

  /* "cyac/trie.pyx":483
 *         cdef byte_t *start = text.bytes_ + text.char_offsets[char_idx]
 *         cdef int num = text.char_offsets[char_idx+1] - text.char_offsets[char_idx]
 *         return self.jump_bytes(start, num, from_)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_4cyac_4trie_4Trie_jump_bytes(__pyx_v_self, __pyx_v_start, __pyx_v_num, __pyx_v_from_);
  goto __pyx_L0;

  /* "cyac/trie.pyx":480
 *         return from_
 * 
 *     cdef inline int jump_uchar(self, xstring text, int char_idx, int from_):             # <<<<<<<<<<<<<<
 *         cdef byte_t *start = text.bytes_ + text.char_offsets[char_idx]
 *         cdef int num = text.char_offsets[char_idx+1] - text.char_offsets[char_idx]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":486
 * 
 * 
 *     cdef bytes substring(self, int id_, int start_id): # end_id is included, start_id is excluded             # <<<<<<<<<<<<<<
 *         cdef stringbuf sb
 *         cdef int from_
 */

static PyObject *__pyx_f_4cyac_4trie_4Trie_substring(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_, int __pyx_v_start_id) {
  std::stringbuf __pyx_v_sb;
  int __pyx_v_from_;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_chr_;
  std::string __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("substring", 0);

  /* "cyac/trie.pyx":490
 *         cdef int from_
 *         cdef byte_t chr_
 *         while id_ > 0 and id_ != start_id:             # <<<<<<<<<<<<<<
 *             from_ = self.array[id_].check
 *             if from_ < 0:
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_id_ > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_id_ != __pyx_v_start_id) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "cyac/trie.pyx":491
 *         cdef byte_t chr_
 *         while id_ > 0 and id_ != start_id:
 *             from_ = self.array[id_].check             # <<<<<<<<<<<<<<
 *             if from_ < 0:
 *                 return None
 */
    __pyx_t_3 = (__pyx_v_self->array[__pyx_v_id_]).check;
    __pyx_v_from_ = __pyx_t_3;

    /* "cyac/trie.pyx":492
 *         while id_ > 0 and id_ != start_id:
 *             from_ = self.array[id_].check
 *             if from_ < 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 */
    __pyx_t_1 = ((__pyx_v_from_ < 0) != 0);
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":493
 *             from_ = self.array[id_].check
 *             if from_ < 0:
 *                 return None             # <<<<<<<<<<<<<<
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 *             if chr_ >= 256:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "cyac/trie.pyx":492
 *         while id_ > 0 and id_ != start_id:
 *             from_ = self.array[id_].check
 *             if from_ < 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 */
    }

    /* "cyac/trie.pyx":494
 *             if from_ < 0:
 *                 return None
 *             chr_ = self._node_base(&self.array[from_]) ^ id_             # <<<<<<<<<<<<<<
 *             if chr_ >= 256:
 *                 return None
 */
    __pyx_v_chr_ = (__pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, (&(__pyx_v_self->array[__pyx_v_from_]))) ^ __pyx_v_id_);

    /* "cyac/trie.pyx":495
 *                 return None
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 *             if chr_ >= 256:             # <<<<<<<<<<<<<<
 *                 return None
 *             if chr_ != 0:
 */
    __pyx_t_1 = ((__pyx_v_chr_ >= 0x100) != 0);
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":496
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 *             if chr_ >= 256:
 *                 return None             # <<<<<<<<<<<<<<
 *             if chr_ != 0:
 *                 sb.put(chr_)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "cyac/trie.pyx":495
 *                 return None
 *             chr_ = self._node_base(&self.array[from_]) ^ id_
 *             if chr_ >= 256:             # <<<<<<<<<<<<<<
 *                 return None
 *             if chr_ != 0:
 */
    }

    /* "cyac/trie.pyx":497
 *             if chr_ >= 256:
 *                 return None
 *             if chr_ != 0:             # <<<<<<<<<<<<<<
 *                 sb.put(chr_)
 *             id_ = from_
 */
    __pyx_t_1 = ((__pyx_v_chr_ != 0) != 0);
    if (__pyx_t_1) {

      /* "cyac/trie.pyx":498
 *                 return None
 *             if chr_ != 0:
 *                 sb.put(chr_)             # <<<<<<<<<<<<<<
 *             id_ = from_
 *         if id_ != start_id:
 */
      (void)(__pyx_v_sb.sputc(__pyx_v_chr_));

      /* "cyac/trie.pyx":497
 *             if chr_ >= 256:
 *                 return None
 *             if chr_ != 0:             # <<<<<<<<<<<<<<
 *                 sb.put(chr_)
 *             id_ = from_
 */
    }

    /* "cyac/trie.pyx":499
 *             if chr_ != 0:
 *                 sb.put(chr_)
 *             id_ = from_             # <<<<<<<<<<<<<<
 *         if id_ != start_id:
 *             return None
 */
    __pyx_v_id_ = __pyx_v_from_;
  }

  /* "cyac/trie.pyx":500
 *                 sb.put(chr_)
 *             id_ = from_
 *         if id_ != start_id:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string ret = sb.to_string()
 */
  __pyx_t_1 = ((__pyx_v_id_ != __pyx_v_start_id) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":501
 *             id_ = from_
 *         if id_ != start_id:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef string ret = sb.to_string()
 *         reverse(ret.begin(), ret.end())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cyac/trie.pyx":500
 *                 sb.put(chr_)
 *             id_ = from_
 *         if id_ != start_id:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string ret = sb.to_string()
 */
  }

  /* "cyac/trie.pyx":502
 *         if id_ != start_id:
 *             return None
 *         cdef string ret = sb.to_string()             # <<<<<<<<<<<<<<
 *         reverse(ret.begin(), ret.end())
 *         return ret
 */
  __pyx_v_ret = __pyx_v_sb.str();

  /* "cyac/trie.pyx":503
 *             return None
 *         cdef string ret = sb.to_string()
 *         reverse(ret.begin(), ret.end())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  std::reverse<std::string::iterator>(__pyx_v_ret.begin(), __pyx_v_ret.end());

  /* "cyac/trie.pyx":504
 *         cdef string ret = sb.to_string()
 *         reverse(ret.begin(), ret.end())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cdef bytes key(self, int id_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":486
 * 
 * 
 *     cdef bytes substring(self, int id_, int start_id): # end_id is included, start_id is excluded             # <<<<<<<<<<<<<<
 *         cdef stringbuf sb
 *         cdef int from_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyac.trie.Trie.substring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":506
 *         return ret
 * 
 *     cdef bytes key(self, int id_):             # <<<<<<<<<<<<<<
 *         return self.substring(id_, 0)
 * 
 */

static PyObject *__pyx_f_4cyac_4trie_4Trie_key(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("key", 0);

  /* "cyac/trie.pyx":507
 * 
 *     cdef bytes key(self, int id_):
 *         return self.substring(id_, 0)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int value(self, int id_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->substring(__pyx_v_self, __pyx_v_id_, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":506
 *         return ret
 * 
 *     cdef bytes key(self, int id_):             # <<<<<<<<<<<<<<
 *         return self.substring(id_, 0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":509
 *         return self.substring(id_, 0)
 * 
 *     cdef inline int value(self, int id_):             # <<<<<<<<<<<<<<
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_value(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_ptr;
  int __pyx_v_val;
  int __pyx_v_to;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_to_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("value", 0);

  /* "cyac/trie.pyx":510
 * 
 *     cdef inline int value(self, int id_):
 *         cdef Node *ptr = &self.array[id_]             # <<<<<<<<<<<<<<
 *         cdef int val = ptr[0].value
 *         if val >= 0:
 */
  __pyx_v_ptr = (&(__pyx_v_self->array[__pyx_v_id_]));

  /* "cyac/trie.pyx":511
 *     cdef inline int value(self, int id_):
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value             # <<<<<<<<<<<<<<
 *         if val >= 0:
 *             return val
 */
  __pyx_t_1 = (__pyx_v_ptr[0]).value;
  __pyx_v_val = __pyx_t_1;

  /* "cyac/trie.pyx":512
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return val
 *         cdef int to = self._node_base(ptr)
 */
  __pyx_t_2 = ((__pyx_v_val >= 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":513
 *         cdef int val = ptr[0].value
 *         if val >= 0:
 *             return val             # <<<<<<<<<<<<<<
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 */
    __pyx_r = __pyx_v_val;
    goto __pyx_L0;

    /* "cyac/trie.pyx":512
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return val
 *         cdef int to = self._node_base(ptr)
 */
  }

  /* "cyac/trie.pyx":514
 *         if val >= 0:
 *             return val
 *         cdef int to = self._node_base(ptr)             # <<<<<<<<<<<<<<
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:
 */
  __pyx_v_to = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_ptr);

  /* "cyac/trie.pyx":515
 *             return val
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]             # <<<<<<<<<<<<<<
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:
 *             return to_ptr[0].value
 */
  __pyx_v_to_ptr = (&(__pyx_v_self->array[__pyx_v_to]));

  /* "cyac/trie.pyx":516
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:             # <<<<<<<<<<<<<<
 *             return to_ptr[0].value
 *         return -1
 */
  __pyx_t_3 = (((__pyx_v_to_ptr[0]).check == __pyx_v_id_) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_to_ptr[0]).value >= 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_to_ptr[0]).value != __pyx_v_4cyac_4trie_value_limit) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":517
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:
 *             return to_ptr[0].value             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    __pyx_r = (__pyx_v_to_ptr[0]).value;
    goto __pyx_L0;

    /* "cyac/trie.pyx":516
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:             # <<<<<<<<<<<<<<
 *             return to_ptr[0].value
 *         return -1
 */
  }

  /* "cyac/trie.pyx":518
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0  and  to_ptr[0].value != value_limit:
 *             return to_ptr[0].value
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     cdef inline bool has_value(self, int id_):
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "cyac/trie.pyx":509
 *         return self.substring(id_, 0)
 * 
 *     cdef inline int value(self, int id_):             # <<<<<<<<<<<<<<
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":520
 *         return -1
 * 
 *     cdef inline bool has_value(self, int id_):             # <<<<<<<<<<<<<<
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 */

static CYTHON_INLINE bool __pyx_f_4cyac_4trie_4Trie_has_value(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, int __pyx_v_id_) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_ptr;
  int __pyx_v_val;
  int __pyx_v_to;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_to_ptr;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("has_value", 0);

  /* "cyac/trie.pyx":521
 * 
 *     cdef inline bool has_value(self, int id_):
 *         cdef Node *ptr = &self.array[id_]             # <<<<<<<<<<<<<<
 *         cdef int val = ptr[0].value
 *         if val >= 0:
 */
  __pyx_v_ptr = (&(__pyx_v_self->array[__pyx_v_id_]));

  /* "cyac/trie.pyx":522
 *     cdef inline bool has_value(self, int id_):
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value             # <<<<<<<<<<<<<<
 *         if val >= 0:
 *             return True
 */
  __pyx_t_1 = (__pyx_v_ptr[0]).value;
  __pyx_v_val = __pyx_t_1;

  /* "cyac/trie.pyx":523
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef int to = self._node_base(ptr)
 */
  __pyx_t_2 = ((__pyx_v_val >= 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":524
 *         cdef int val = ptr[0].value
 *         if val >= 0:
 *             return True             # <<<<<<<<<<<<<<
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":523
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return True
 *         cdef int to = self._node_base(ptr)
 */
  }

  /* "cyac/trie.pyx":525
 *         if val >= 0:
 *             return True
 *         cdef int to = self._node_base(ptr)             # <<<<<<<<<<<<<<
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:
 */
  __pyx_v_to = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_ptr);

  /* "cyac/trie.pyx":526
 *             return True
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]             # <<<<<<<<<<<<<<
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:
 *             return True
 */
  __pyx_v_to_ptr = (&(__pyx_v_self->array[__pyx_v_to]));

  /* "cyac/trie.pyx":527
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_3 = (((__pyx_v_to_ptr[0]).check == __pyx_v_id_) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (((__pyx_v_to_ptr[0]).value >= 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":528
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":527
 *         cdef int to = self._node_base(ptr)
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "cyac/trie.pyx":529
 *         if to_ptr[0].check == id_  and  to_ptr[0].value >= 0:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, unicode t):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":520
 *         return -1
 * 
 *     cdef inline bool has_value(self, int id_):             # <<<<<<<<<<<<<<
 *         cdef Node *ptr = &self.array[id_]
 *         cdef int val = ptr[0].value
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":531
 *         return False
 * 
 *     def __contains__(self, unicode t):             # <<<<<<<<<<<<<<
 *         return self.get(t) >= 0
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cyac_4trie_4Trie_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_4cyac_4trie_4Trie_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), (&PyUnicode_Type), 1, "t", 1))) __PYX_ERR(0, 531, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_6__contains__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cyac_4trie_4Trie_6__contains__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cyac/trie.pyx":532
 * 
 *     def __contains__(self, unicode t):
 *         return self.get(t) >= 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, __pyx_v_t, 0) >= 0);
  goto __pyx_L0;

  /* "cyac/trie.pyx":531
 *         return False
 * 
 *     def __contains__(self, unicode t):             # <<<<<<<<<<<<<<
 *         return self.get(t) >= 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":535
 * 
 * 
 *     def __getitem__(self, sid):             # <<<<<<<<<<<<<<
 *         """
 *         get key by id, or get id by key, raise exception if cannot find.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sid); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_8__getitem__[] = "\n        get key by id, or get id by key, raise exception if cannot find.\n        Args:\n            sid (unicode | int): key or id\n\n        Examples:\n            >>> trie[\"python\"]\n        Raises:\n            AttributeError: If `sid` is not unicode or int\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_4cyac_4trie_4Trie_8__getitem__;
#endif
static PyObject *__pyx_pw_4cyac_4trie_4Trie_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_sid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_8__getitem__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject *)__pyx_v_sid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_8__getitem__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_sid) {
  PyObject *__pyx_v_bs = NULL;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cyac/trie.pyx":546
 *             AttributeError: If `sid` is not unicode or int
 *         """
 *         if isinstance(sid, int):             # <<<<<<<<<<<<<<
 *             bs = self.key(self.leafs[sid])
 *             bs = bs.decode("utf8")
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_sid); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":547
 *         """
 *         if isinstance(sid, int):
 *             bs = self.key(self.leafs[sid])             # <<<<<<<<<<<<<<
 *             bs = bs.decode("utf8")
 *             return bs
 */
    __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_sid); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 547, __pyx_L1_error)
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->key(__pyx_v_self, (__pyx_v_self->leafs[__pyx_t_3])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_bs = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cyac/trie.pyx":548
 *         if isinstance(sid, int):
 *             bs = self.key(self.leafs[sid])
 *             bs = bs.decode("utf8")             # <<<<<<<<<<<<<<
 *             return bs
 *         elif isinstance(sid, unicode):
 */
    if (unlikely(__pyx_v_bs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
      __PYX_ERR(0, 548, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_decode_bytes(__pyx_v_bs, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_bs, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cyac/trie.pyx":549
 *             bs = self.key(self.leafs[sid])
 *             bs = bs.decode("utf8")
 *             return bs             # <<<<<<<<<<<<<<
 *         elif isinstance(sid, unicode):
 *             ret = self.get(sid)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_bs);
    __pyx_r = __pyx_v_bs;
    goto __pyx_L0;

    /* "cyac/trie.pyx":546
 *             AttributeError: If `sid` is not unicode or int
 *         """
 *         if isinstance(sid, int):             # <<<<<<<<<<<<<<
 *             bs = self.key(self.leafs[sid])
 *             bs = bs.decode("utf8")
 */
  }

  /* "cyac/trie.pyx":550
 *             bs = bs.decode("utf8")
 *             return bs
 *         elif isinstance(sid, unicode):             # <<<<<<<<<<<<<<
 *             ret = self.get(sid)
 *             if ret < 0:
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_sid); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":551
 *             return bs
 *         elif isinstance(sid, unicode):
 *             ret = self.get(sid)             # <<<<<<<<<<<<<<
 *             if ret < 0:
 *                 raise Exception("Cannot find: %s" % repr(sid))
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_sid))||((__pyx_v_sid) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_sid)->tp_name), 0))) __PYX_ERR(0, 551, __pyx_L1_error)
    __pyx_v_ret = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->get(__pyx_v_self, ((PyObject*)__pyx_v_sid), 0);

    /* "cyac/trie.pyx":552
 *         elif isinstance(sid, unicode):
 *             ret = self.get(sid)
 *             if ret < 0:             # <<<<<<<<<<<<<<
 *                 raise Exception("Cannot find: %s" % repr(sid))
 *             return ret
 */
    __pyx_t_1 = ((__pyx_v_ret < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "cyac/trie.pyx":553
 *             ret = self.get(sid)
 *             if ret < 0:
 *                 raise Exception("Cannot find: %s" % repr(sid))             # <<<<<<<<<<<<<<
 *             return ret
 *         raise AttributeError("Index type is not supported")
 */
      __pyx_t_4 = PyObject_Repr(__pyx_v_sid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyUnicode_Format(__pyx_kp_u_Cannot_find_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 553, __pyx_L1_error)

      /* "cyac/trie.pyx":552
 *         elif isinstance(sid, unicode):
 *             ret = self.get(sid)
 *             if ret < 0:             # <<<<<<<<<<<<<<
 *                 raise Exception("Cannot find: %s" % repr(sid))
 *             return ret
 */
    }

    /* "cyac/trie.pyx":554
 *             if ret < 0:
 *                 raise Exception("Cannot find: %s" % repr(sid))
 *             return ret             # <<<<<<<<<<<<<<
 *         raise AttributeError("Index type is not supported")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cyac/trie.pyx":550
 *             bs = bs.decode("utf8")
 *             return bs
 *         elif isinstance(sid, unicode):             # <<<<<<<<<<<<<<
 *             ret = self.get(sid)
 *             if ret < 0:
 */
  }

  /* "cyac/trie.pyx":555
 *                 raise Exception("Cannot find: %s" % repr(sid))
 *             return ret
 *         raise AttributeError("Index type is not supported")             # <<<<<<<<<<<<<<
 * 
 *     cpdef int insert(self, unicode key):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 555, __pyx_L1_error)

  /* "cyac/trie.pyx":535
 * 
 * 
 *     def __getitem__(self, sid):             # <<<<<<<<<<<<<<
 *         """
 *         get key by id, or get id by key, raise exception if cannot find.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.trie.Trie.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":557
 *         raise AttributeError("Index type is not supported")
 * 
 *     cpdef int insert(self, unicode key):             # <<<<<<<<<<<<<<
 *         """insert key into the trie, return the id of this key.
 *         Args:
 */

static PyObject *__pyx_pw_4cyac_4trie_4Trie_11insert(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_f_4cyac_4trie_4Trie_insert(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_bkey = 0;
  int __pyx_v_bkey_len;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_ckey;
  int __pyx_v_val;
  int __pyx_v_p;
  int __pyx_v_id_;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_p_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insert", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cyac_4trie_4Trie_11insert)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 557, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cyac/trie.pyx":568
 *             >>> trie.insert("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 */
  __pyx_t_6 = (__pyx_v_self->ignore_case != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":569
 *         """
 *         if self.ignore_case:
 *             key = key.lower()             # <<<<<<<<<<<<<<
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef int bkey_len = len(bkey)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":568
 *             >>> trie.insert("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 */
  }

  /* "cyac/trie.pyx":570
 *         if self.ignore_case:
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef int bkey_len = len(bkey)
 *         if bkey_len == 0:
 */
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 570, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bkey = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":571
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef int bkey_len = len(bkey)             # <<<<<<<<<<<<<<
 *         if bkey_len == 0:
 *             return -1
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 571, __pyx_L1_error)
  }
  __pyx_t_7 = PyBytes_GET_SIZE(__pyx_v_bkey); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 571, __pyx_L1_error)
  __pyx_v_bkey_len = __pyx_t_7;

  /* "cyac/trie.pyx":572
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef int bkey_len = len(bkey)
 *         if bkey_len == 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef byte_t *ckey = bkey
 */
  __pyx_t_6 = ((__pyx_v_bkey_len == 0) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":573
 *         cdef int bkey_len = len(bkey)
 *         if bkey_len == 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef byte_t *ckey = bkey
 *         val = self.get_bytes(ckey, bkey_len)
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":572
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef int bkey_len = len(bkey)
 *         if bkey_len == 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef byte_t *ckey = bkey
 */
  }

  /* "cyac/trie.pyx":574
 *         if bkey_len == 0:
 *             return -1
 *         cdef byte_t *ckey = bkey             # <<<<<<<<<<<<<<
 *         val = self.get_bytes(ckey, bkey_len)
 *         if val >= 0:
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 574, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyBytes_AsWritableUString(__pyx_v_bkey); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
  __pyx_v_ckey = __pyx_t_8;

  /* "cyac/trie.pyx":575
 *             return -1
 *         cdef byte_t *ckey = bkey
 *         val = self.get_bytes(ckey, bkey_len)             # <<<<<<<<<<<<<<
 *         if val >= 0:
 *             return val
 */
  __pyx_v_val = __pyx_f_4cyac_4trie_4Trie_get_bytes(__pyx_v_self, __pyx_v_ckey, __pyx_v_bkey_len);

  /* "cyac/trie.pyx":576
 *         cdef byte_t *ckey = bkey
 *         val = self.get_bytes(ckey, bkey_len)
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return val
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)
 */
  __pyx_t_6 = ((__pyx_v_val >= 0) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":577
 *         val = self.get_bytes(ckey, bkey_len)
 *         if val >= 0:
 *             return val             # <<<<<<<<<<<<<<
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)
 *         cdef int id_
 */
    __pyx_r = __pyx_v_val;
    goto __pyx_L0;

    /* "cyac/trie.pyx":576
 *         cdef byte_t *ckey = bkey
 *         val = self.get_bytes(ckey, bkey_len)
 *         if val >= 0:             # <<<<<<<<<<<<<<
 *             return val
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)
 */
  }

  /* "cyac/trie.pyx":578
 *         if val >= 0:
 *             return val
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)             # <<<<<<<<<<<<<<
 *         cdef int id_
 *         if self.last_remove_leaf != value_limit:
 */
  __pyx_v_p = __pyx_f_4cyac_4trie_4Trie__get(__pyx_v_self, __pyx_v_ckey, __pyx_v_bkey_len, 0, 0);

  /* "cyac/trie.pyx":580
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)
 *         cdef int id_
 *         if self.last_remove_leaf != value_limit:             # <<<<<<<<<<<<<<
 *             id_ = self.last_remove_leaf
 *             self.last_remove_leaf = -(self.leafs[id_] + 1)
 */
  __pyx_t_6 = ((__pyx_v_self->last_remove_leaf != __pyx_v_4cyac_4trie_value_limit) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":581
 *         cdef int id_
 *         if self.last_remove_leaf != value_limit:
 *             id_ = self.last_remove_leaf             # <<<<<<<<<<<<<<
 *             self.last_remove_leaf = -(self.leafs[id_] + 1)
 *         else:
 */
    __pyx_t_5 = __pyx_v_self->last_remove_leaf;
    __pyx_v_id_ = __pyx_t_5;

    /* "cyac/trie.pyx":582
 *         if self.last_remove_leaf != value_limit:
 *             id_ = self.last_remove_leaf
 *             self.last_remove_leaf = -(self.leafs[id_] + 1)             # <<<<<<<<<<<<<<
 *         else:
 *             id_ = self.leaf_size
 */
    __pyx_v_self->last_remove_leaf = (-((__pyx_v_self->leafs[__pyx_v_id_]) + 1));

    /* "cyac/trie.pyx":580
 *         cdef int p = self._get(ckey, bkey_len, 0, 0)
 *         cdef int id_
 *         if self.last_remove_leaf != value_limit:             # <<<<<<<<<<<<<<
 *             id_ = self.last_remove_leaf
 *             self.last_remove_leaf = -(self.leafs[id_] + 1)
 */
    goto __pyx_L6;
  }

  /* "cyac/trie.pyx":584
 *             self.last_remove_leaf = -(self.leafs[id_] + 1)
 *         else:
 *             id_ = self.leaf_size             # <<<<<<<<<<<<<<
 *             if self.leaf_size == self.key_capacity:
 *                 self.key_capacity *= 2
 */
  /*else*/ {
    __pyx_t_5 = __pyx_v_self->leaf_size;
    __pyx_v_id_ = __pyx_t_5;

    /* "cyac/trie.pyx":585
 *         else:
 *             id_ = self.leaf_size
 *             if self.leaf_size == self.key_capacity:             # <<<<<<<<<<<<<<
 *                 self.key_capacity *= 2
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))
 */
    __pyx_t_6 = ((__pyx_v_self->leaf_size == __pyx_v_self->key_capacity) != 0);
    if (__pyx_t_6) {

      /* "cyac/trie.pyx":586
 *             id_ = self.leaf_size
 *             if self.leaf_size == self.key_capacity:
 *                 self.key_capacity *= 2             # <<<<<<<<<<<<<<
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))
 *             self.leaf_size += 1
 */
      __pyx_v_self->key_capacity = (__pyx_v_self->key_capacity * 2);

      /* "cyac/trie.pyx":587
 *             if self.leaf_size == self.key_capacity:
 *                 self.key_capacity *= 2
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))             # <<<<<<<<<<<<<<
 *             self.leaf_size += 1
 *         cdef Node *p_ptr = &self.array[p]
 */
      __pyx_v_self->leafs = ((int *)realloc(__pyx_v_self->leafs, (__pyx_v_self->key_capacity * (sizeof(int)))));

      /* "cyac/trie.pyx":585
 *         else:
 *             id_ = self.leaf_size
 *             if self.leaf_size == self.key_capacity:             # <<<<<<<<<<<<<<
 *                 self.key_capacity *= 2
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))
 */
    }

    /* "cyac/trie.pyx":588
 *                 self.key_capacity *= 2
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))
 *             self.leaf_size += 1             # <<<<<<<<<<<<<<
 *         cdef Node *p_ptr = &self.array[p]
 *         p_ptr[0].value = id_
 */
    __pyx_v_self->leaf_size = (__pyx_v_self->leaf_size + 1);
  }
  __pyx_L6:;

  /* "cyac/trie.pyx":589
 *                 self.leafs = <int*> realloc(self.leafs, self.key_capacity*sizeof(int))
 *             self.leaf_size += 1
 *         cdef Node *p_ptr = &self.array[p]             # <<<<<<<<<<<<<<
 *         p_ptr[0].value = id_
 *         self.leafs[id_] = p
 */
  __pyx_v_p_ptr = (&(__pyx_v_self->array[__pyx_v_p]));

  /* "cyac/trie.pyx":590
 *             self.leaf_size += 1
 *         cdef Node *p_ptr = &self.array[p]
 *         p_ptr[0].value = id_             # <<<<<<<<<<<<<<
 *         self.leafs[id_] = p
 *         self.key_num += 1
 */
  (__pyx_v_p_ptr[0]).value = __pyx_v_id_;

  /* "cyac/trie.pyx":591
 *         cdef Node *p_ptr = &self.array[p]
 *         p_ptr[0].value = id_
 *         self.leafs[id_] = p             # <<<<<<<<<<<<<<
 *         self.key_num += 1
 *         return id_
 */
  (__pyx_v_self->leafs[__pyx_v_id_]) = __pyx_v_p;

  /* "cyac/trie.pyx":592
 *         p_ptr[0].value = id_
 *         self.leafs[id_] = p
 *         self.key_num += 1             # <<<<<<<<<<<<<<
 *         return id_
 * 
 */
  __pyx_v_self->key_num = (__pyx_v_self->key_num + 1);

  /* "cyac/trie.pyx":593
 *         self.leafs[id_] = p
 *         self.key_num += 1
 *         return id_             # <<<<<<<<<<<<<<
 * 
 *     cpdef int remove(self, unicode key):
 */
  __pyx_r = __pyx_v_id_;
  goto __pyx_L0;

  /* "cyac/trie.pyx":557
 *         raise AttributeError("Index type is not supported")
 * 
 *     cpdef int insert(self, unicode key):             # <<<<<<<<<<<<<<
 *         """insert key into the trie, return the id of this key.
 *         Args:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cyac.trie.Trie.insert", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bkey);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_11insert(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_10insert[] = "insert key into the trie, return the id of this key.\n        Args:\n            key : string, Cannot be empty.\n        Returns:\n            id  : int\n                The id is continuously increasing. you can use this id to index other values.\n                If some key is removed, and a new key is inserted, the old key's id will be assigned to the new key.\n        Examples:\n            >>> trie.insert(\"python\")\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_11insert(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyUnicode_Type), 1, "key", 1))) __PYX_ERR(0, 557, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_10insert(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_key));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_10insert(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insert", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_4Trie_insert(__pyx_v_self, __pyx_v_key, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":595
 *         return id_
 * 
 *     cpdef int remove(self, unicode key):             # <<<<<<<<<<<<<<
 *         """
 *         remove the given key from the trie
 */

static PyObject *__pyx_pw_4cyac_4trie_4Trie_13remove(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_f_4cyac_4trie_4Trie_remove(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_from_ptr;
  PyObject *__pyx_v_bkey = 0;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_cbkey;
  int __pyx_v_to;
  int __pyx_v_base;
  int __pyx_v_from_;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_label;
  int __pyx_v_vk;
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_to_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_remove); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cyac_4trie_4Trie_13remove)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 595, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cyac/trie.pyx":608
 *             >>> trie.remove("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef Node *from_ptr
 */
  __pyx_t_6 = (__pyx_v_self->ignore_case != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":609
 *         """
 *         if self.ignore_case:
 *             key = key.lower()             # <<<<<<<<<<<<<<
 *         cdef Node *from_ptr
 *         cdef bytes bkey = key.encode("utf8")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":608
 *             >>> trie.remove("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef Node *from_ptr
 */
  }

  /* "cyac/trie.pyx":611
 *             key = key.lower()
 *         cdef Node *from_ptr
 *         cdef bytes bkey = key.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef byte_t* cbkey = bkey
 *         cdef int to = self.jump_bytes(cbkey, len(bkey), 0)
 */
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 611, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bkey = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":612
 *         cdef Node *from_ptr
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef byte_t* cbkey = bkey             # <<<<<<<<<<<<<<
 *         cdef int to = self.jump_bytes(cbkey, len(bkey), 0)
 *         cdef int base, from_
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 612, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableUString(__pyx_v_bkey); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 612, __pyx_L1_error)
  __pyx_v_cbkey = __pyx_t_7;

  /* "cyac/trie.pyx":613
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef byte_t* cbkey = bkey
 *         cdef int to = self.jump_bytes(cbkey, len(bkey), 0)             # <<<<<<<<<<<<<<
 *         cdef int base, from_
 *         cdef byte_t label
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 613, __pyx_L1_error)
  }
  __pyx_t_8 = PyBytes_GET_SIZE(__pyx_v_bkey); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_jump_bytes(__pyx_v_self, __pyx_v_cbkey, __pyx_t_8, 0);

  /* "cyac/trie.pyx":616
 *         cdef int base, from_
 *         cdef byte_t label
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int vk = self.value(to)
 */
  __pyx_t_6 = ((__pyx_v_to < 0) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":617
 *         cdef byte_t label
 *         if to < 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef int vk = self.value(to)
 *         if vk < 0:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":616
 *         cdef int base, from_
 *         cdef byte_t label
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int vk = self.value(to)
 */
  }

  /* "cyac/trie.pyx":618
 *         if to < 0:
 *             return -1
 *         cdef int vk = self.value(to)             # <<<<<<<<<<<<<<
 *         if vk < 0:
 *             return -1
 */
  __pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_v_self, __pyx_v_to);

  /* "cyac/trie.pyx":619
 *             return -1
 *         cdef int vk = self.value(to)
 *         if vk < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef Node *to_ptr = &self.array[to]
 */
  __pyx_t_6 = ((__pyx_v_vk < 0) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":620
 *         cdef int vk = self.value(to)
 *         if vk < 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].value < 0:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":619
 *             return -1
 *         cdef int vk = self.value(to)
 *         if vk < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef Node *to_ptr = &self.array[to]
 */
  }

  /* "cyac/trie.pyx":621
 *         if vk < 0:
 *             return -1
 *         cdef Node *to_ptr = &self.array[to]             # <<<<<<<<<<<<<<
 *         if to_ptr[0].value < 0:
 *             base = self._node_base(to_ptr)
 */
  __pyx_v_to_ptr = (&(__pyx_v_self->array[__pyx_v_to]));

  /* "cyac/trie.pyx":622
 *             return -1
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].value < 0:             # <<<<<<<<<<<<<<
 *             base = self._node_base(to_ptr)
 *             if self.array[base].check == to:
 */
  __pyx_t_6 = (((__pyx_v_to_ptr[0]).value < 0) != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":623
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].value < 0:
 *             base = self._node_base(to_ptr)             # <<<<<<<<<<<<<<
 *             if self.array[base].check == to:
 *                 to = base
 */
    __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_to_ptr);

    /* "cyac/trie.pyx":624
 *         if to_ptr[0].value < 0:
 *             base = self._node_base(to_ptr)
 *             if self.array[base].check == to:             # <<<<<<<<<<<<<<
 *                 to = base
 *         while to > 0:
 */
    __pyx_t_6 = (((__pyx_v_self->array[__pyx_v_base]).check == __pyx_v_to) != 0);
    if (__pyx_t_6) {

      /* "cyac/trie.pyx":625
 *             base = self._node_base(to_ptr)
 *             if self.array[base].check == to:
 *                 to = base             # <<<<<<<<<<<<<<
 *         while to > 0:
 *             to_ptr = &self.array[to]
 */
      __pyx_v_to = __pyx_v_base;

      /* "cyac/trie.pyx":624
 *         if to_ptr[0].value < 0:
 *             base = self._node_base(to_ptr)
 *             if self.array[base].check == to:             # <<<<<<<<<<<<<<
 *                 to = base
 *         while to > 0:
 */
    }

    /* "cyac/trie.pyx":622
 *             return -1
 *         cdef Node *to_ptr = &self.array[to]
 *         if to_ptr[0].value < 0:             # <<<<<<<<<<<<<<
 *             base = self._node_base(to_ptr)
 *             if self.array[base].check == to:
 */
  }

  /* "cyac/trie.pyx":626
 *             if self.array[base].check == to:
 *                 to = base
 *         while to > 0:             # <<<<<<<<<<<<<<
 *             to_ptr = &self.array[to]
 *             from_ = to_ptr[0].check
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_to > 0) != 0);
    if (!__pyx_t_6) break;

    /* "cyac/trie.pyx":627
 *                 to = base
 *         while to > 0:
 *             to_ptr = &self.array[to]             # <<<<<<<<<<<<<<
 *             from_ = to_ptr[0].check
 *             from_ptr = &self.array[from_]
 */
    __pyx_v_to_ptr = (&(__pyx_v_self->array[__pyx_v_to]));

    /* "cyac/trie.pyx":628
 *         while to > 0:
 *             to_ptr = &self.array[to]
 *             from_ = to_ptr[0].check             # <<<<<<<<<<<<<<
 *             from_ptr = &self.array[from_]
 *             base = self._node_base(from_ptr)
 */
    __pyx_t_5 = (__pyx_v_to_ptr[0]).check;
    __pyx_v_from_ = __pyx_t_5;

    /* "cyac/trie.pyx":629
 *             to_ptr = &self.array[to]
 *             from_ = to_ptr[0].check
 *             from_ptr = &self.array[from_]             # <<<<<<<<<<<<<<
 *             base = self._node_base(from_ptr)
 *             label = (to ^ base)
 */
    __pyx_v_from_ptr = (&(__pyx_v_self->array[__pyx_v_from_]));

    /* "cyac/trie.pyx":630
 *             from_ = to_ptr[0].check
 *             from_ptr = &self.array[from_]
 *             base = self._node_base(from_ptr)             # <<<<<<<<<<<<<<
 *             label = (to ^ base)
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:
 */
    __pyx_v_base = __pyx_f_4cyac_4trie_4Trie__node_base(__pyx_v_self, __pyx_v_from_ptr);

    /* "cyac/trie.pyx":631
 *             from_ptr = &self.array[from_]
 *             base = self._node_base(from_ptr)
 *             label = (to ^ base)             # <<<<<<<<<<<<<<
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:
 *                 self.pop_sibling(from_, label)
 */
    __pyx_v_label = (__pyx_v_to ^ __pyx_v_base);

    /* "cyac/trie.pyx":632
 *             base = self._node_base(from_ptr)
 *             label = (to ^ base)
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:             # <<<<<<<<<<<<<<
 *                 self.pop_sibling(from_, label)
 *                 self.push_enode(to)
 */
    __pyx_t_9 = (((__pyx_v_to_ptr[0]).sibling != 0) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_6 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_from_ptr[0]).child != __pyx_v_label) != 0);
    __pyx_t_6 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_6) {

      /* "cyac/trie.pyx":633
 *             label = (to ^ base)
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:
 *                 self.pop_sibling(from_, label)             # <<<<<<<<<<<<<<
 *                 self.push_enode(to)
 *                 break
 */
      __pyx_f_4cyac_4trie_4Trie_pop_sibling(__pyx_v_self, __pyx_v_from_, __pyx_v_label);

      /* "cyac/trie.pyx":634
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:
 *                 self.pop_sibling(from_, label)
 *                 self.push_enode(to)             # <<<<<<<<<<<<<<
 *                 break
 *             self.push_enode(to)
 */
      ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->push_enode(__pyx_v_self, __pyx_v_to);

      /* "cyac/trie.pyx":635
 *                 self.pop_sibling(from_, label)
 *                 self.push_enode(to)
 *                 break             # <<<<<<<<<<<<<<
 *             self.push_enode(to)
 *             to = from_
 */
      goto __pyx_L9_break;

      /* "cyac/trie.pyx":632
 *             base = self._node_base(from_ptr)
 *             label = (to ^ base)
 *             if to_ptr[0].sibling != 0  or  from_ptr[0].child != label:             # <<<<<<<<<<<<<<
 *                 self.pop_sibling(from_, label)
 *                 self.push_enode(to)
 */
    }

    /* "cyac/trie.pyx":636
 *                 self.push_enode(to)
 *                 break
 *             self.push_enode(to)             # <<<<<<<<<<<<<<
 *             to = from_
 *         self.key_num -= 1
 */
    ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->push_enode(__pyx_v_self, __pyx_v_to);

    /* "cyac/trie.pyx":637
 *                 break
 *             self.push_enode(to)
 *             to = from_             # <<<<<<<<<<<<<<
 *         self.key_num -= 1
 *         self.leafs[vk] = -self.last_remove_leaf - 1
 */
    __pyx_v_to = __pyx_v_from_;
  }
  __pyx_L9_break:;

  /* "cyac/trie.pyx":638
 *             self.push_enode(to)
 *             to = from_
 *         self.key_num -= 1             # <<<<<<<<<<<<<<
 *         self.leafs[vk] = -self.last_remove_leaf - 1
 *         self.last_remove_leaf = vk
 */
  __pyx_v_self->key_num = (__pyx_v_self->key_num - 1);

  /* "cyac/trie.pyx":639
 *             to = from_
 *         self.key_num -= 1
 *         self.leafs[vk] = -self.last_remove_leaf - 1             # <<<<<<<<<<<<<<
 *         self.last_remove_leaf = vk
 *         return vk
 */
  (__pyx_v_self->leafs[__pyx_v_vk]) = ((-__pyx_v_self->last_remove_leaf) - 1);

  /* "cyac/trie.pyx":640
 *         self.key_num -= 1
 *         self.leafs[vk] = -self.last_remove_leaf - 1
 *         self.last_remove_leaf = vk             # <<<<<<<<<<<<<<
 *         return vk
 * 
 */
  __pyx_v_self->last_remove_leaf = __pyx_v_vk;

  /* "cyac/trie.pyx":641
 *         self.leafs[vk] = -self.last_remove_leaf - 1
 *         self.last_remove_leaf = vk
 *         return vk             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get(self, unicode key):
 */
  __pyx_r = __pyx_v_vk;
  goto __pyx_L0;

  /* "cyac/trie.pyx":595
 *         return id_
 * 
 *     cpdef int remove(self, unicode key):             # <<<<<<<<<<<<<<
 *         """
 *         remove the given key from the trie
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cyac.trie.Trie.remove", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bkey);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_13remove(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_12remove[] = "\n        remove the given key from the trie\n        Args:\n            key : string\n                keyword that you want to remove if it's present.\n        Returns:\n            id : bool\n                the id of key.\n                if this key doesn't exist in trie, then return -1.\n        Examples:\n            >>> trie.remove(\"python\")\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_13remove(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyUnicode_Type), 1, "key", 1))) __PYX_ERR(0, 595, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_12remove(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_key));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_12remove(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_4Trie_remove(__pyx_v_self, __pyx_v_key, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":643
 *         return vk
 * 
 *     cpdef int get(self, unicode key):             # <<<<<<<<<<<<<<
 *         """
 *         get id of given key, if it doesn't exist, return -1.
 */

static PyObject *__pyx_pw_4cyac_4trie_4Trie_15get(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_f_4cyac_4trie_4Trie_get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_bkey = 0;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_ckey;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_INCREF(__pyx_v_key);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_4cyac_4trie_4Trie_15get)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_key);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cyac/trie.pyx":656
 *             >>> trie.get("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 */
  __pyx_t_6 = (__pyx_v_self->ignore_case != 0);
  if (__pyx_t_6) {

    /* "cyac/trie.pyx":657
 *         """
 *         if self.ignore_case:
 *             key = key.lower()             # <<<<<<<<<<<<<<
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef byte_t* ckey = bkey
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_key, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":656
 *             >>> trie.get("python")
 *         """
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 */
  }

  /* "cyac/trie.pyx":658
 *         if self.ignore_case:
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef byte_t* ckey = bkey
 *         return self.get_bytes(ckey, len(bkey))
 */
  if (unlikely(__pyx_v_key == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bkey = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":659
 *             key = key.lower()
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef byte_t* ckey = bkey             # <<<<<<<<<<<<<<
 *         return self.get_bytes(ckey, len(bkey))
 * 
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableUString(__pyx_v_bkey); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L1_error)
  __pyx_v_ckey = __pyx_t_7;

  /* "cyac/trie.pyx":660
 *         cdef bytes bkey = key.encode("utf8")
 *         cdef byte_t* ckey = bkey
 *         return self.get_bytes(ckey, len(bkey))             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int get_bytes(self, byte_t* key, int size):
 */
  if (unlikely(__pyx_v_bkey == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 660, __pyx_L1_error)
  }
  __pyx_t_8 = PyBytes_GET_SIZE(__pyx_v_bkey); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_r = __pyx_f_4cyac_4trie_4Trie_get_bytes(__pyx_v_self, __pyx_v_ckey, __pyx_t_8);
  goto __pyx_L0;

  /* "cyac/trie.pyx":643
 *         return vk
 * 
 *     cpdef int get(self, unicode key):             # <<<<<<<<<<<<<<
 *         """
 *         get id of given key, if it doesn't exist, return -1.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("cyac.trie.Trie.get", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bkey);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_15get(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_14get[] = "\n        get id of given key, if it doesn't exist, return -1.\n        Args:\n            key : string\n                keyword that you want to get if it's present.\n        Returns:\n            id : bool\n                the id of key.\n                if this key doesn't exist in trie, then return -1.\n        Examples:\n            >>> trie.get(\"python\")\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_15get(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyUnicode_Type), 1, "key", 1))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_14get(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_key));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_14get(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_4Trie_get(__pyx_v_self, __pyx_v_key, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":662
 *         return self.get_bytes(ckey, len(bkey))
 * 
 *     cdef inline int get_bytes(self, byte_t* key, int size):             # <<<<<<<<<<<<<<
 *         cdef int to = self.jump_bytes(key, size, 0)
 *         if to < 0:
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_4Trie_get_bytes(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_key, int __pyx_v_size) {
  int __pyx_v_to;
  int __pyx_v_vk;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_bytes", 0);

  /* "cyac/trie.pyx":663
 * 
 *     cdef inline int get_bytes(self, byte_t* key, int size):
 *         cdef int to = self.jump_bytes(key, size, 0)             # <<<<<<<<<<<<<<
 *         if to < 0:
 *             return -1
 */
  __pyx_v_to = __pyx_f_4cyac_4trie_4Trie_jump_bytes(__pyx_v_self, __pyx_v_key, __pyx_v_size, 0);

  /* "cyac/trie.pyx":664
 *     cdef inline int get_bytes(self, byte_t* key, int size):
 *         cdef int to = self.jump_bytes(key, size, 0)
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int vk = self.value(to)
 */
  __pyx_t_1 = ((__pyx_v_to < 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":665
 *         cdef int to = self.jump_bytes(key, size, 0)
 *         if to < 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         cdef int vk = self.value(to)
 *         if vk < 0:
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":664
 *     cdef inline int get_bytes(self, byte_t* key, int size):
 *         cdef int to = self.jump_bytes(key, size, 0)
 *         if to < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         cdef int vk = self.value(to)
 */
  }

  /* "cyac/trie.pyx":666
 *         if to < 0:
 *             return -1
 *         cdef int vk = self.value(to)             # <<<<<<<<<<<<<<
 *         if vk < 0:
 *             return -1
 */
  __pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_v_self, __pyx_v_to);

  /* "cyac/trie.pyx":667
 *             return -1
 *         cdef int vk = self.value(to)
 *         if vk < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         return vk
 */
  __pyx_t_1 = ((__pyx_v_vk < 0) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":668
 *         cdef int vk = self.value(to)
 *         if vk < 0:
 *             return -1             # <<<<<<<<<<<<<<
 *         return vk
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;

    /* "cyac/trie.pyx":667
 *             return -1
 *         cdef int vk = self.value(to)
 *         if vk < 0:             # <<<<<<<<<<<<<<
 *             return -1
 *         return vk
 */
  }

  /* "cyac/trie.pyx":669
 *         if vk < 0:
 *             return -1
 *         return vk             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vk;
  goto __pyx_L0;

  /* "cyac/trie.pyx":662
 *         return self.get_bytes(ckey, len(bkey))
 * 
 *     cdef inline int get_bytes(self, byte_t* key, int size):             # <<<<<<<<<<<<<<
 *         cdef int to = self.jump_bytes(key, size, 0)
 *         if to < 0:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_4trie_4Trie_18generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/trie.pyx":672
 * 
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_17prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_16prefix[] = "\n        return the prefix of given string which is in the trie.\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            prefixes : tuple(id, end_offset)\n                s[:end_offset] matches id\n        Examples:\n            >>> for id_, offset in trie.prefix(\"python\"):\n            >>>     print(id_, offset)\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_17prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 672, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_16prefix(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_16prefix(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prefix", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)__pyx_tp_new_4cyac_4trie___pyx_scope_struct__prefix(__pyx_ptype_4cyac_4trie___pyx_scope_struct__prefix, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 672, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_4trie_4Trie_18generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_prefix, __pyx_n_s_Trie_prefix, __pyx_n_s_cyac_trie); if (unlikely(!gen)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_4trie_4Trie_18generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *__pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 672, __pyx_L1_error)

  /* "cyac/trie.pyx":685
 *             >>>     print(id_, offset)
 *         """
 *         cdef ignore_case_alignment align = None             # <<<<<<<<<<<<<<
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __pyx_cur_scope->__pyx_v_align = ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)Py_None);

  /* "cyac/trie.pyx":686
 *         """
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)             # <<<<<<<<<<<<<<
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_xstring), __pyx_cur_scope->__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_xs = ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":687
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->ignore_case != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":688
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)             # <<<<<<<<<<<<<<
 *             xs = align.lowercase
 *         cdef byte_t b
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_ignore_case_alignment), ((PyObject *)__pyx_cur_scope->__pyx_v_xs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_align));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_align, ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":689
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase             # <<<<<<<<<<<<<<
 *         cdef byte_t b
 *         cdef int node = 0
 */
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_align->lowercase);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_xs));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_xs, ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":687
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  }

  /* "cyac/trie.pyx":691
 *             xs = align.lowercase
 *         cdef byte_t b
 *         cdef int node = 0             # <<<<<<<<<<<<<<
 *         cdef int bi
 *         for bi in range(xs.byte_num):
 */
  __pyx_cur_scope->__pyx_v_node = 0;

  /* "cyac/trie.pyx":693
 *         cdef int node = 0
 *         cdef int bi
 *         for bi in range(xs.byte_num):             # <<<<<<<<<<<<<<
 *             b = xs.bytes_[bi]
 *             node = self.jump(b, node)
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_xs->byte_num;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_bi = __pyx_t_5;

    /* "cyac/trie.pyx":694
 *         cdef int bi
 *         for bi in range(xs.byte_num):
 *             b = xs.bytes_[bi]             # <<<<<<<<<<<<<<
 *             node = self.jump(b, node)
 *             if node >= 0:
 */
    __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_xs->bytes_[__pyx_cur_scope->__pyx_v_bi]);

    /* "cyac/trie.pyx":695
 *         for bi in range(xs.byte_num):
 *             b = xs.bytes_[bi]
 *             node = self.jump(b, node)             # <<<<<<<<<<<<<<
 *             if node >= 0:
 *                 vk = self.value(node)
 */
    __pyx_cur_scope->__pyx_v_node = __pyx_f_4cyac_4trie_4Trie_jump(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_node);

    /* "cyac/trie.pyx":696
 *             b = xs.bytes_[bi]
 *             node = self.jump(b, node)
 *             if node >= 0:             # <<<<<<<<<<<<<<
 *                 vk = self.value(node)
 *                 if vk >= 0:
 */
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_node >= 0) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":697
 *             node = self.jump(b, node)
 *             if node >= 0:
 *                 vk = self.value(node)             # <<<<<<<<<<<<<<
 *                 if vk >= 0:
 *                     yield vk, ignore_case_offset(align, xs, bi) + 1
 */
      __pyx_cur_scope->__pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_node);

      /* "cyac/trie.pyx":698
 *             if node >= 0:
 *                 vk = self.value(node)
 *                 if vk >= 0:             # <<<<<<<<<<<<<<
 *                     yield vk, ignore_case_offset(align, xs, bi) + 1
 *             else:
 */
      __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_vk >= 0) != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":699
 *                 vk = self.value(node)
 *                 if vk >= 0:
 *                     yield vk, ignore_case_offset(align, xs, bi) + 1             # <<<<<<<<<<<<<<
 *             else:
 *                 break
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_vk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xs, __pyx_cur_scope->__pyx_v_bi) + 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
        __pyx_t_1 = 0;
        __pyx_t_6 = 0;
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L9_resume_from_yield:;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
        __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 699, __pyx_L1_error)

        /* "cyac/trie.pyx":698
 *             if node >= 0:
 *                 vk = self.value(node)
 *                 if vk >= 0:             # <<<<<<<<<<<<<<
 *                     yield vk, ignore_case_offset(align, xs, bi) + 1
 *             else:
 */
      }

      /* "cyac/trie.pyx":696
 *             b = xs.bytes_[bi]
 *             node = self.jump(b, node)
 *             if node >= 0:             # <<<<<<<<<<<<<<
 *                 vk = self.value(node)
 *                 if vk >= 0:
 */
      goto __pyx_L7;
    }

    /* "cyac/trie.pyx":701
 *                     yield vk, ignore_case_offset(align, xs, bi) + 1
 *             else:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *     def predict(self, unicode s not None):
 */
    /*else*/ {
      goto __pyx_L6_break;
    }
    __pyx_L7:;
  }
  __pyx_L6_break:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/trie.pyx":672
 * 
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_4trie_4Trie_21generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/trie.pyx":703
 *                 break
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_20predict(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_19predict[] = "\n        return the string in the trie which starts with given string\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            predicts : id\n        Examples:\n            >>> for id_ in trie.predict(\"python\"):\n            >>>     print(id_)\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_20predict(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 703, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_19predict(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject*)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_19predict(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)__pyx_tp_new_4cyac_4trie___pyx_scope_struct_1_predict(__pyx_ptype_4cyac_4trie___pyx_scope_struct_1_predict, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 703, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_4trie_4Trie_21generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_predict, __pyx_n_s_Trie_predict, __pyx_n_s_cyac_trie); if (unlikely(!gen)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_4trie_4Trie_21generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *__pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::deque<int>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 703, __pyx_L1_error)

  /* "cyac/trie.pyx":715
 *             >>>     print(id_)
 *         """
 *         cdef ignore_case_alignment align = None             # <<<<<<<<<<<<<<
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __pyx_cur_scope->__pyx_v_align = ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)Py_None);

  /* "cyac/trie.pyx":716
 *         """
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)             # <<<<<<<<<<<<<<
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_xstring), __pyx_cur_scope->__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_xs = ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":717
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->ignore_case != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":718
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)             # <<<<<<<<<<<<<<
 *             xs = align.lowercase
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_ignore_case_alignment), ((PyObject *)__pyx_cur_scope->__pyx_v_xs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_align));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_align, ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":719
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase             # <<<<<<<<<<<<<<
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)
 *         if node < 0:
 */
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_align->lowercase);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_xs));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_xs, ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":717
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  }

  /* "cyac/trie.pyx":720
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)             # <<<<<<<<<<<<<<
 *         if node < 0:
 *             return
 */
  __pyx_cur_scope->__pyx_v_node = __pyx_f_4cyac_4trie_4Trie_jump_bytes(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_xs->bytes_, __pyx_cur_scope->__pyx_v_xs->byte_num, 0);

  /* "cyac/trie.pyx":721
 *             xs = align.lowercase
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)
 *         if node < 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef int cid, vk, idx
 */
  __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_node < 0) != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":722
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)
 *         if node < 0:
 *             return             # <<<<<<<<<<<<<<
 *         cdef int cid, vk, idx
 *         cdef deque[int] q = deque[int]()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "cyac/trie.pyx":721
 *             xs = align.lowercase
 *         cdef int node = self.jump_bytes(xs.bytes_, xs.byte_num, 0)
 *         if node < 0:             # <<<<<<<<<<<<<<
 *             return
 *         cdef int cid, vk, idx
 */
  }

  /* "cyac/trie.pyx":724
 *             return
 *         cdef int cid, vk, idx
 *         cdef deque[int] q = deque[int]()             # <<<<<<<<<<<<<<
 *         cdef int child_num = 0
 *         cdef byte_t children[256]
 */
  try {
    __pyx_t_3 = std::deque<int> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 724, __pyx_L1_error)
  }
  __pyx_cur_scope->__pyx_v_q = __pyx_t_3;

  /* "cyac/trie.pyx":725
 *         cdef int cid, vk, idx
 *         cdef deque[int] q = deque[int]()
 *         cdef int child_num = 0             # <<<<<<<<<<<<<<
 *         cdef byte_t children[256]
 *         cdef int children_nodes[256]
 */
  __pyx_cur_scope->__pyx_v_child_num = 0;

  /* "cyac/trie.pyx":728
 *         cdef byte_t children[256]
 *         cdef int children_nodes[256]
 *         q.push_back(node)             # <<<<<<<<<<<<<<
 *         while q.size() > 0:
 *             node = q.front()
 */
  __pyx_cur_scope->__pyx_v_q.push_back(__pyx_cur_scope->__pyx_v_node);

  /* "cyac/trie.pyx":729
 *         cdef int children_nodes[256]
 *         q.push_back(node)
 *         while q.size() > 0:             # <<<<<<<<<<<<<<
 *             node = q.front()
 *             q.pop_front()
 */
  while (1) {
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_q.size() > 0) != 0);
    if (!__pyx_t_2) break;

    /* "cyac/trie.pyx":730
 *         q.push_back(node)
 *         while q.size() > 0:
 *             node = q.front()             # <<<<<<<<<<<<<<
 *             q.pop_front()
 *             vk = self.value(node)
 */
    __pyx_cur_scope->__pyx_v_node = __pyx_cur_scope->__pyx_v_q.front();

    /* "cyac/trie.pyx":731
 *         while q.size() > 0:
 *             node = q.front()
 *             q.pop_front()             # <<<<<<<<<<<<<<
 *             vk = self.value(node)
 *             if vk >= 0:
 */
    __pyx_cur_scope->__pyx_v_q.pop_front();

    /* "cyac/trie.pyx":732
 *             node = q.front()
 *             q.pop_front()
 *             vk = self.value(node)             # <<<<<<<<<<<<<<
 *             if vk >= 0:
 *                 yield vk
 */
    __pyx_cur_scope->__pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_node);

    /* "cyac/trie.pyx":733
 *             q.pop_front()
 *             vk = self.value(node)
 *             if vk >= 0:             # <<<<<<<<<<<<<<
 *                 yield vk
 *             num = self.children(node, children, children_nodes, 256)
 */
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_vk >= 0) != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":734
 *             vk = self.value(node)
 *             if vk >= 0:
 *                 yield vk             # <<<<<<<<<<<<<<
 *             num = self.children(node, children, children_nodes, 256)
 *             for idx in range(num):
 */
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_vk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L9_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 734, __pyx_L1_error)

      /* "cyac/trie.pyx":733
 *             q.pop_front()
 *             vk = self.value(node)
 *             if vk >= 0:             # <<<<<<<<<<<<<<
 *                 yield vk
 *             num = self.children(node, children, children_nodes, 256)
 */
    }

    /* "cyac/trie.pyx":735
 *             if vk >= 0:
 *                 yield vk
 *             num = self.children(node, children, children_nodes, 256)             # <<<<<<<<<<<<<<
 *             for idx in range(num):
 *                 q.push_back(children_nodes[idx])
 */
    __pyx_cur_scope->__pyx_v_num = __pyx_f_4cyac_4trie_4Trie_children(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_node, __pyx_cur_scope->__pyx_v_children, __pyx_cur_scope->__pyx_v_children_nodes, 0x100);

    /* "cyac/trie.pyx":736
 *                 yield vk
 *             num = self.children(node, children, children_nodes, 256)
 *             for idx in range(num):             # <<<<<<<<<<<<<<
 *                 q.push_back(children_nodes[idx])
 * 
 */
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_num;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_cur_scope->__pyx_v_idx = __pyx_t_6;

      /* "cyac/trie.pyx":737
 *             num = self.children(node, children, children_nodes, 256)
 *             for idx in range(num):
 *                 q.push_back(children_nodes[idx])             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
      __pyx_cur_scope->__pyx_v_q.push_back((__pyx_cur_scope->__pyx_v_children_nodes[__pyx_cur_scope->__pyx_v_idx]));
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/trie.pyx":703
 *                 break
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_4trie_4Trie_24generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/trie.pyx":739
 *                 q.push_back(children_nodes[idx])
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_23items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_22items[] = "\n        return all key and id ordered by id\n        Iterates:\n            items : (unicode, int)\n        Examples:\n            >>> for key, id_ in trie.items():\n            >>>     print(id_, key)\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_23items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_22items(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_22items(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)__pyx_tp_new_4cyac_4trie___pyx_scope_struct_2_items(__pyx_ptype_4cyac_4trie___pyx_scope_struct_2_items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 739, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_4trie_4Trie_24generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_Trie_items, __pyx_n_s_cyac_trie); if (unlikely(!gen)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_4trie_4Trie_24generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *__pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 739, __pyx_L1_error)

  /* "cyac/trie.pyx":749
 *         """
 *         cdef int id_
 *         for id_ in range(0,self.leaf_size):             # <<<<<<<<<<<<<<
 *             lnode = self.leafs[id_]
 *             if lnode >= 0:
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->leaf_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_id_ = __pyx_t_3;

    /* "cyac/trie.pyx":750
 *         cdef int id_
 *         for id_ in range(0,self.leaf_size):
 *             lnode = self.leafs[id_]             # <<<<<<<<<<<<<<
 *             if lnode >= 0:
 *                 key_ = self.key(lnode)
 */
    __pyx_cur_scope->__pyx_v_lnode = (__pyx_cur_scope->__pyx_v_self->leafs[__pyx_cur_scope->__pyx_v_id_]);

    /* "cyac/trie.pyx":751
 *         for id_ in range(0,self.leaf_size):
 *             lnode = self.leafs[id_]
 *             if lnode >= 0:             # <<<<<<<<<<<<<<
 *                 key_ = self.key(lnode)
 *                 yield key_.decode("utf8"), id_
 */
    __pyx_t_4 = ((__pyx_cur_scope->__pyx_v_lnode >= 0) != 0);
    if (__pyx_t_4) {

      /* "cyac/trie.pyx":752
 *             lnode = self.leafs[id_]
 *             if lnode >= 0:
 *                 key_ = self.key(lnode)             # <<<<<<<<<<<<<<
 *                 yield key_.decode("utf8"), id_
 * 
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->key(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_lnode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_key_);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_key_, ((PyObject*)__pyx_t_5));
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "cyac/trie.pyx":753
 *             if lnode >= 0:
 *                 key_ = self.key(lnode)
 *                 yield key_.decode("utf8"), id_             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_key_ == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
        __PYX_ERR(0, 753, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_decode_bytes(__pyx_cur_scope->__pyx_v_key_, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_id_); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 753, __pyx_L1_error)

      /* "cyac/trie.pyx":751
 *         for id_ in range(0,self.leaf_size):
 *             lnode = self.leafs[id_]
 *             if lnode >= 0:             # <<<<<<<<<<<<<<
 *                 key_ = self.key(lnode)
 *                 yield key_.decode("utf8"), id_
 */
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/trie.pyx":739
 *                 q.push_back(children_nodes[idx])
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":756
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.buff == NULL:
 *             free(self.leafs)
 */

/* Python wrapper */
static void __pyx_pw_4cyac_4trie_4Trie_26__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cyac_4trie_4Trie_26__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cyac_4trie_4Trie_25__dealloc__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cyac_4trie_4Trie_25__dealloc__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cyac/trie.pyx":757
 * 
 *     def __dealloc__(self):
 *         if self.buff == NULL:             # <<<<<<<<<<<<<<
 *             free(self.leafs)
 *             free(self.array)
 */
  __pyx_t_1 = ((__pyx_v_self->buff == NULL) != 0);
  if (__pyx_t_1) {

    /* "cyac/trie.pyx":758
 *     def __dealloc__(self):
 *         if self.buff == NULL:
 *             free(self.leafs)             # <<<<<<<<<<<<<<
 *             free(self.array)
 *             free(self.blocks)
 */
    free(__pyx_v_self->leafs);

    /* "cyac/trie.pyx":759
 *         if self.buff == NULL:
 *             free(self.leafs)
 *             free(self.array)             # <<<<<<<<<<<<<<
 *             free(self.blocks)
 *         else:
 */
    free(__pyx_v_self->array);

    /* "cyac/trie.pyx":760
 *             free(self.leafs)
 *             free(self.array)
 *             free(self.blocks)             # <<<<<<<<<<<<<<
 *         else:
 *             PyBuffer_Release(self.buff)
 */
    free(__pyx_v_self->blocks);

    /* "cyac/trie.pyx":757
 * 
 *     def __dealloc__(self):
 *         if self.buff == NULL:             # <<<<<<<<<<<<<<
 *             free(self.leafs)
 *             free(self.array)
 */
    goto __pyx_L3;
  }

  /* "cyac/trie.pyx":762
 *             free(self.blocks)
 *         else:
 *             PyBuffer_Release(self.buff)             # <<<<<<<<<<<<<<
 *             free(self.buff)
 * 
 */
  /*else*/ {
    PyBuffer_Release(__pyx_v_self->buff);

    /* "cyac/trie.pyx":763
 *         else:
 *             PyBuffer_Release(self.buff)
 *             free(self.buff)             # <<<<<<<<<<<<<<
 * 
 *     def match_longest(self, unicode s not None, sep = None):
 */
    free(__pyx_v_self->buff);
  }
  __pyx_L3:;

  /* "cyac/trie.pyx":756
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.buff == NULL:
 *             free(self.leafs)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}
static PyObject *__pyx_gb_4cyac_4trie_4Trie_29generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/trie.pyx":765
 *             free(self.buff)
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_28match_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_27match_longest[] = "\n        extract trie's keys from given string. only return the longest.\n        Args:\n            s : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in trie.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_28match_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_sep = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_longest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_sep,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match_longest") < 0)) __PYX_ERR(0, 765, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = ((PyObject*)values[0]);
    __pyx_v_sep = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match_longest", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 765, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 765, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_27match_longest(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), __pyx_v_s, __pyx_v_sep);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_27match_longest(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_sep) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match_longest", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)__pyx_tp_new_4cyac_4trie___pyx_scope_struct_3_match_longest(__pyx_ptype_4cyac_4trie___pyx_scope_struct_3_match_longest, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 765, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  __pyx_cur_scope->__pyx_v_sep = __pyx_v_sep;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sep);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sep);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_4trie_4Trie_29generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_match_longest, __pyx_n_s_Trie_match_longest, __pyx_n_s_cyac_trie); if (unlikely(!gen)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_4trie_4Trie_29generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *__pyx_cur_scope = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_longest", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L27_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 765, __pyx_L1_error)

  /* "cyac/trie.pyx":779
 *             >>>     print(id_, start_offset, end_offset)
 *         """
 *         cdef ignore_case_alignment align = None             # <<<<<<<<<<<<<<
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __pyx_cur_scope->__pyx_v_align = ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)Py_None);

  /* "cyac/trie.pyx":780
 *         """
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)             # <<<<<<<<<<<<<<
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_xstring), __pyx_cur_scope->__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_xs = ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":781
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->ignore_case != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":782
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)             # <<<<<<<<<<<<<<
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_ignore_case_alignment), ((PyObject *)__pyx_cur_scope->__pyx_v_xs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_align));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_align, ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":783
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase             # <<<<<<<<<<<<<<
 *         cdef int offset = 0 # byte offset
 *         cdef int node = 0
 */
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_align->lowercase);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_xs));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_xs, ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":781
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  }

  /* "cyac/trie.pyx":784
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset             # <<<<<<<<<<<<<<
 *         cdef int node = 0
 *         cdef int bi
 */
  __pyx_cur_scope->__pyx_v_offset = 0;

  /* "cyac/trie.pyx":785
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset
 *         cdef int node = 0             # <<<<<<<<<<<<<<
 *         cdef int bi
 *         cdef int last_vk
 */
  __pyx_cur_scope->__pyx_v_node = 0;

  /* "cyac/trie.pyx":789
 *         cdef int last_vk
 *         cdef int last_b
 *         while offset < xs.byte_num:             # <<<<<<<<<<<<<<
 *             last_vk = -1
 *             last_b = 0
 */
  while (1) {
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_offset < __pyx_cur_scope->__pyx_v_xs->byte_num) != 0);
    if (!__pyx_t_2) break;

    /* "cyac/trie.pyx":790
 *         cdef int last_b
 *         while offset < xs.byte_num:
 *             last_vk = -1             # <<<<<<<<<<<<<<
 *             last_b = 0
 *             if sep is not None:
 */
    __pyx_cur_scope->__pyx_v_last_vk = -1;

    /* "cyac/trie.pyx":791
 *         while offset < xs.byte_num:
 *             last_vk = -1
 *             last_b = 0             # <<<<<<<<<<<<<<
 *             if sep is not None:
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 */
    __pyx_cur_scope->__pyx_v_last_b = 0;

    /* "cyac/trie.pyx":792
 *             last_vk = -1
 *             last_b = 0
 *             if sep is not None:             # <<<<<<<<<<<<<<
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_sep != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "cyac/trie.pyx":793
 *             last_b = 0
 *             if sep is not None:
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:             # <<<<<<<<<<<<<<
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset >= xs.byte_num:
 */
      while (1) {
        __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_offset < __pyx_cur_scope->__pyx_v_xs->byte_num) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L10_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_xs->chars[(__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[__pyx_cur_scope->__pyx_v_offset])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_sep, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = (__pyx_t_2 != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L10_bool_binop_done:;
        if (!__pyx_t_3) break;

        /* "cyac/trie.pyx":794
 *             if sep is not None:
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 if offset >= xs.byte_num:
 *                     break
 */
        __pyx_cur_scope->__pyx_v_offset = (__pyx_cur_scope->__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_cur_scope->__pyx_v_xs, (__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[__pyx_cur_scope->__pyx_v_offset])));
      }

      /* "cyac/trie.pyx":795
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset >= xs.byte_num:             # <<<<<<<<<<<<<<
 *                     break
 *             node = 0
 */
      __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_offset >= __pyx_cur_scope->__pyx_v_xs->byte_num) != 0);
      if (__pyx_t_3) {

        /* "cyac/trie.pyx":796
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset >= xs.byte_num:
 *                     break             # <<<<<<<<<<<<<<
 *             node = 0
 *             for bi in range(offset, xs.byte_num):
 */
        goto __pyx_L6_break;

        /* "cyac/trie.pyx":795
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset >= xs.byte_num:             # <<<<<<<<<<<<<<
 *                     break
 *             node = 0
 */
      }

      /* "cyac/trie.pyx":792
 *             last_vk = -1
 *             last_b = 0
 *             if sep is not None:             # <<<<<<<<<<<<<<
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
    }

    /* "cyac/trie.pyx":797
 *                 if offset >= xs.byte_num:
 *                     break
 *             node = 0             # <<<<<<<<<<<<<<
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]
 */
    __pyx_cur_scope->__pyx_v_node = 0;

    /* "cyac/trie.pyx":798
 *                     break
 *             node = 0
 *             for bi in range(offset, xs.byte_num):             # <<<<<<<<<<<<<<
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 */
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_xs->byte_num;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = __pyx_cur_scope->__pyx_v_offset; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_cur_scope->__pyx_v_bi = __pyx_t_7;

      /* "cyac/trie.pyx":799
 *             node = 0
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]             # <<<<<<<<<<<<<<
 *                 node = self.jump(b, node)
 *                 if node >= 0:
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_xs->bytes_[__pyx_cur_scope->__pyx_v_bi]);

      /* "cyac/trie.pyx":800
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)             # <<<<<<<<<<<<<<
 *                 if node >= 0:
 *                     vk = self.value(node)
 */
      __pyx_cur_scope->__pyx_v_node = __pyx_f_4cyac_4trie_4Trie_jump(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_node);

      /* "cyac/trie.pyx":801
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 *                 if node >= 0:             # <<<<<<<<<<<<<<
 *                     vk = self.value(node)
 *                     if vk >= 0:
 */
      __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_node >= 0) != 0);
      if (__pyx_t_3) {

        /* "cyac/trie.pyx":802
 *                 node = self.jump(b, node)
 *                 if node >= 0:
 *                     vk = self.value(node)             # <<<<<<<<<<<<<<
 *                     if vk >= 0:
 *                         if sep is not None:
 */
        __pyx_cur_scope->__pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_node);

        /* "cyac/trie.pyx":803
 *                 if node >= 0:
 *                     vk = self.value(node)
 *                     if vk >= 0:             # <<<<<<<<<<<<<<
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 */
        __pyx_t_3 = ((__pyx_cur_scope->__pyx_v_vk >= 0) != 0);
        if (__pyx_t_3) {

          /* "cyac/trie.pyx":804
 *                     vk = self.value(node)
 *                     if vk >= 0:
 *                         if sep is not None:             # <<<<<<<<<<<<<<
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 *                                 continue
 */
          __pyx_t_3 = (__pyx_cur_scope->__pyx_v_sep != Py_None);
          __pyx_t_4 = (__pyx_t_3 != 0);
          if (__pyx_t_4) {

            /* "cyac/trie.pyx":805
 *                     if vk >= 0:
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:             # <<<<<<<<<<<<<<
 *                                 continue
 *                         last_vk = vk
 */
            __pyx_t_3 = (((__pyx_cur_scope->__pyx_v_bi + 1) < __pyx_cur_scope->__pyx_v_xs->byte_num) != 0);
            if (__pyx_t_3) {
            } else {
              __pyx_t_4 = __pyx_t_3;
              goto __pyx_L19_bool_binop_done;
            }
            __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_xs->chars[(__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[(__pyx_cur_scope->__pyx_v_bi + 1)])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 805, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_2 = (__pyx_t_3 != 0);
            __pyx_t_4 = __pyx_t_2;
            __pyx_L19_bool_binop_done:;
            if (__pyx_t_4) {

              /* "cyac/trie.pyx":806
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 *                                 continue             # <<<<<<<<<<<<<<
 *                         last_vk = vk
 *                         last_b = bi
 */
              goto __pyx_L13_continue;

              /* "cyac/trie.pyx":805
 *                     if vk >= 0:
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:             # <<<<<<<<<<<<<<
 *                                 continue
 *                         last_vk = vk
 */
            }

            /* "cyac/trie.pyx":804
 *                     vk = self.value(node)
 *                     if vk >= 0:
 *                         if sep is not None:             # <<<<<<<<<<<<<<
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 *                                 continue
 */
          }

          /* "cyac/trie.pyx":807
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 *                                 continue
 *                         last_vk = vk             # <<<<<<<<<<<<<<
 *                         last_b = bi
 *                 else:
 */
          __pyx_cur_scope->__pyx_v_last_vk = __pyx_cur_scope->__pyx_v_vk;

          /* "cyac/trie.pyx":808
 *                                 continue
 *                         last_vk = vk
 *                         last_b = bi             # <<<<<<<<<<<<<<
 *                 else:
 *                     break
 */
          __pyx_cur_scope->__pyx_v_last_b = __pyx_cur_scope->__pyx_v_bi;

          /* "cyac/trie.pyx":803
 *                 if node >= 0:
 *                     vk = self.value(node)
 *                     if vk >= 0:             # <<<<<<<<<<<<<<
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi+1]] not in sep:
 */
        }

        /* "cyac/trie.pyx":801
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 *                 if node >= 0:             # <<<<<<<<<<<<<<
 *                     vk = self.value(node)
 *                     if vk >= 0:
 */
        goto __pyx_L15;
      }

      /* "cyac/trie.pyx":810
 *                         last_b = bi
 *                 else:
 *                     break             # <<<<<<<<<<<<<<
 *             if last_vk == -1:
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      /*else*/ {
        goto __pyx_L14_break;
      }
      __pyx_L15:;
      __pyx_L13_continue:;
    }
    __pyx_L14_break:;

    /* "cyac/trie.pyx":811
 *                 else:
 *                     break
 *             if last_vk == -1:             # <<<<<<<<<<<<<<
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:
 */
    __pyx_t_4 = ((__pyx_cur_scope->__pyx_v_last_vk == -1L) != 0);
    if (__pyx_t_4) {

      /* "cyac/trie.pyx":812
 *                     break
 *             if last_vk == -1:
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 */
      __pyx_cur_scope->__pyx_v_offset = (__pyx_cur_scope->__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_cur_scope->__pyx_v_xs, (__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[__pyx_cur_scope->__pyx_v_offset])));

      /* "cyac/trie.pyx":813
 *             if last_vk == -1:
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:             # <<<<<<<<<<<<<<
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_sep != Py_None);
      __pyx_t_2 = (__pyx_t_4 != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":814
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:             # <<<<<<<<<<<<<<
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 continue
 */
        while (1) {
          __pyx_t_4 = ((__pyx_cur_scope->__pyx_v_offset < __pyx_cur_scope->__pyx_v_xs->byte_num) != 0);
          if (__pyx_t_4) {
          } else {
            __pyx_t_2 = __pyx_t_4;
            goto __pyx_L25_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_xs->chars[(__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[__pyx_cur_scope->__pyx_v_offset])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 814, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = (__pyx_t_4 != 0);
          __pyx_t_2 = __pyx_t_3;
          __pyx_L25_bool_binop_done:;
          if (!__pyx_t_2) break;

          /* "cyac/trie.pyx":815
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 continue
 *             yield last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1
 */
          __pyx_cur_scope->__pyx_v_offset = (__pyx_cur_scope->__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_cur_scope->__pyx_v_xs, (__pyx_cur_scope->__pyx_v_xs->char_idx_of_byte[__pyx_cur_scope->__pyx_v_offset])));
        }

        /* "cyac/trie.pyx":813
 *             if last_vk == -1:
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:             # <<<<<<<<<<<<<<
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      }

      /* "cyac/trie.pyx":816
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 continue             # <<<<<<<<<<<<<<
 *             yield last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1
 *             offset = last_b + 1
 */
      goto __pyx_L5_continue;

      /* "cyac/trie.pyx":811
 *                 else:
 *                     break
 *             if last_vk == -1:             # <<<<<<<<<<<<<<
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:
 */
    }

    /* "cyac/trie.pyx":817
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 continue
 *             yield last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1             # <<<<<<<<<<<<<<
 *             offset = last_b + 1
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_last_vk); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xs, __pyx_cur_scope->__pyx_v_offset)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xs, __pyx_cur_scope->__pyx_v_last_b) + 1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
    __pyx_t_1 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L27_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 817, __pyx_L1_error)

    /* "cyac/trie.pyx":818
 *                 continue
 *             yield last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1
 *             offset = last_b + 1             # <<<<<<<<<<<<<<
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):
 */
    __pyx_cur_scope->__pyx_v_offset = (__pyx_cur_scope->__pyx_v_last_b + 1);
    __pyx_L5_continue:;
  }
  __pyx_L6_break:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/trie.pyx":765
 *             free(self.buff)
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":820
 *             offset = last_b + 1
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         replace trie's keys from given string. only replace the longest.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_31replace_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_30replace_longest[] = "\n        replace trie's keys from given string. only replace the longest.\n        Args:\n            s : unicode\n            callback : lambda | list | dict\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Returns:\n            replaced text\n        Examples:\n            >>> python_id = trie.insert(\"python\")\n            >>> text = trie.replace_longest(\"python\", {python_id: \"hahah\"}, set([ord(\" \")]))\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_31replace_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_sep = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace_longest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_callback,&__pyx_n_s_sep,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("replace_longest", 0, 2, 3, 1); __PYX_ERR(0, 820, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replace_longest") < 0)) __PYX_ERR(0, 820, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = ((PyObject*)values[0]);
    __pyx_v_callback = values[1];
    __pyx_v_sep = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace_longest", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 820, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.replace_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 820, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_callback) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "callback"); __PYX_ERR(0, 820, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_30replace_longest(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), __pyx_v_s, __pyx_v_callback, __pyx_v_sep);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_30replace_longest(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_callback, PyObject *__pyx_v_sep) {
  std::stringbuf __pyx_v_sb;
  struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align = 0;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs = 0;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_prev_xs = 0;
  int __pyx_v_offset;
  int __pyx_v_node;
  int __pyx_v_bi;
  int __pyx_v_last_vk;
  int __pyx_v_last_b;
  int __pyx_v_prev_offset;
  int __pyx_v_prev_offset2;
  int __pyx_v_offset2;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_byte_code;
  PyObject *__pyx_v_encoded_replaced = 0;
  bool __pyx_v_callback_list_or_dict;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_b;
  int __pyx_v_vk;
  PyObject *__pyx_v_replaced_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("replace_longest", 0);

  /* "cyac/trie.pyx":836
 *         """
 *         cdef stringbuf sb
 *         cdef ignore_case_alignment align = None             # <<<<<<<<<<<<<<
 *         cdef xstring xs = xstring(s)
 *         cdef xstring prev_xs = xs
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_align = ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)Py_None);

  /* "cyac/trie.pyx":837
 *         cdef stringbuf sb
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)             # <<<<<<<<<<<<<<
 *         cdef xstring prev_xs = xs
 *         if self.ignore_case:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_xstring), __pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_xs = ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":838
 *         cdef ignore_case_alignment align = None
 *         cdef xstring xs = xstring(s)
 *         cdef xstring prev_xs = xs             # <<<<<<<<<<<<<<
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_xs));
  __pyx_v_prev_xs = __pyx_v_xs;

  /* "cyac/trie.pyx":839
 *         cdef xstring xs = xstring(s)
 *         cdef xstring prev_xs = xs
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  __pyx_t_2 = (__pyx_v_self->ignore_case != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":840
 *         cdef xstring prev_xs = xs
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)             # <<<<<<<<<<<<<<
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_ignore_case_alignment), ((PyObject *)__pyx_v_xs)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_align, ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":841
 *         if self.ignore_case:
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase             # <<<<<<<<<<<<<<
 *         cdef int offset = 0 # byte offset
 *         cdef int node = 0
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_align->lowercase);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_xs, ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "cyac/trie.pyx":839
 *         cdef xstring xs = xstring(s)
 *         cdef xstring prev_xs = xs
 *         if self.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 */
  }

  /* "cyac/trie.pyx":842
 *             align = ignore_case_alignment(xs)
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset             # <<<<<<<<<<<<<<
 *         cdef int node = 0
 *         cdef int bi
 */
  __pyx_v_offset = 0;

  /* "cyac/trie.pyx":843
 *             xs = align.lowercase
 *         cdef int offset = 0 # byte offset
 *         cdef int node = 0             # <<<<<<<<<<<<<<
 *         cdef int bi
 *         cdef int last_vk = -1
 */
  __pyx_v_node = 0;

  /* "cyac/trie.pyx":845
 *         cdef int node = 0
 *         cdef int bi
 *         cdef int last_vk = -1             # <<<<<<<<<<<<<<
 *         cdef int last_b = 0
 *         cdef int prev_offset, prev_offset2, offset2
 */
  __pyx_v_last_vk = -1;

  /* "cyac/trie.pyx":846
 *         cdef int bi
 *         cdef int last_vk = -1
 *         cdef int last_b = 0             # <<<<<<<<<<<<<<
 *         cdef int prev_offset, prev_offset2, offset2
 *         cdef byte_t *byte_code
 */
  __pyx_v_last_b = 0;

  /* "cyac/trie.pyx":851
 *         cdef bytes encoded_replaced
 *         cdef int char_byte_num
 *         cdef bool callback_list_or_dict = isinstance(callback, dict) or isinstance(callback, list)             # <<<<<<<<<<<<<<
 * 
 *         while offset < xs.byte_num:
 */
  __pyx_t_2 = PyDict_Check(__pyx_v_callback); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_3 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyList_Check(__pyx_v_callback); 
  __pyx_t_3 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_v_callback_list_or_dict = __pyx_t_3;

  /* "cyac/trie.pyx":853
 *         cdef bool callback_list_or_dict = isinstance(callback, dict) or isinstance(callback, list)
 * 
 *         while offset < xs.byte_num:             # <<<<<<<<<<<<<<
 *             last_vk = -1
 *             last_b = 0
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_offset < __pyx_v_xs->byte_num) != 0);
    if (!__pyx_t_2) break;

    /* "cyac/trie.pyx":854
 * 
 *         while offset < xs.byte_num:
 *             last_vk = -1             # <<<<<<<<<<<<<<
 *             last_b = 0
 *             if sep is not None:
 */
    __pyx_v_last_vk = -1;

    /* "cyac/trie.pyx":855
 *         while offset < xs.byte_num:
 *             last_vk = -1
 *             last_b = 0             # <<<<<<<<<<<<<<
 *             if sep is not None:
 *                 prev_offset = offset
 */
    __pyx_v_last_b = 0;

    /* "cyac/trie.pyx":856
 *             last_vk = -1
 *             last_b = 0
 *             if sep is not None:             # <<<<<<<<<<<<<<
 *                 prev_offset = offset
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 */
    __pyx_t_2 = (__pyx_v_sep != Py_None);
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "cyac/trie.pyx":857
 *             last_b = 0
 *             if sep is not None:
 *                 prev_offset = offset             # <<<<<<<<<<<<<<
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      __pyx_v_prev_offset = __pyx_v_offset;

      /* "cyac/trie.pyx":858
 *             if sep is not None:
 *                 prev_offset = offset
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:             # <<<<<<<<<<<<<<
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset > prev_offset:
 */
      while (1) {
        __pyx_t_2 = ((__pyx_v_offset < __pyx_v_xs->byte_num) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_4 = __pyx_t_2;
          goto __pyx_L11_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_xs->chars[(__pyx_v_xs->char_idx_of_byte[__pyx_v_offset])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_sep, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 858, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = (__pyx_t_2 != 0);
        __pyx_t_4 = __pyx_t_5;
        __pyx_L11_bool_binop_done:;
        if (!__pyx_t_4) break;

        /* "cyac/trie.pyx":859
 *                 prev_offset = offset
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 if offset > prev_offset:
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 */
        __pyx_v_offset = (__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_v_xs, (__pyx_v_xs->char_idx_of_byte[__pyx_v_offset])));
      }

      /* "cyac/trie.pyx":860
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset > prev_offset:             # <<<<<<<<<<<<<<
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 */
      __pyx_t_4 = ((__pyx_v_offset > __pyx_v_prev_offset) != 0);
      if (__pyx_t_4) {

        /* "cyac/trie.pyx":861
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset > prev_offset:
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)             # <<<<<<<<<<<<<<
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 */
        __pyx_v_prev_offset2 = __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(__pyx_v_align, __pyx_v_prev_offset);

        /* "cyac/trie.pyx":862
 *                 if offset > prev_offset:
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)             # <<<<<<<<<<<<<<
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 if offset >= xs.byte_num:
 */
        __pyx_v_offset2 = __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(__pyx_v_align, __pyx_v_offset);

        /* "cyac/trie.pyx":863
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)             # <<<<<<<<<<<<<<
 *                 if offset >= xs.byte_num:
 *                     break
 */
        (void)(__pyx_v_sb.sputn((((char *)__pyx_v_prev_xs->bytes_) + __pyx_v_prev_offset2), (__pyx_v_offset2 - __pyx_v_prev_offset2)));

        /* "cyac/trie.pyx":860
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 *                     offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if offset > prev_offset:             # <<<<<<<<<<<<<<
 *                     prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 */
      }

      /* "cyac/trie.pyx":864
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 if offset >= xs.byte_num:             # <<<<<<<<<<<<<<
 *                     break
 *             node = 0
 */
      __pyx_t_4 = ((__pyx_v_offset >= __pyx_v_xs->byte_num) != 0);
      if (__pyx_t_4) {

        /* "cyac/trie.pyx":865
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 if offset >= xs.byte_num:
 *                     break             # <<<<<<<<<<<<<<
 *             node = 0
 *             for bi in range(offset, xs.byte_num):
 */
        goto __pyx_L7_break;

        /* "cyac/trie.pyx":864
 *                     offset2 = ignore_case_byte_index_mapping(align, offset)
 *                     sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 if offset >= xs.byte_num:             # <<<<<<<<<<<<<<
 *                     break
 *             node = 0
 */
      }

      /* "cyac/trie.pyx":856
 *             last_vk = -1
 *             last_b = 0
 *             if sep is not None:             # <<<<<<<<<<<<<<
 *                 prev_offset = offset
 *                 while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] in sep:
 */
    }

    /* "cyac/trie.pyx":866
 *                 if offset >= xs.byte_num:
 *                     break
 *             node = 0             # <<<<<<<<<<<<<<
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]
 */
    __pyx_v_node = 0;

    /* "cyac/trie.pyx":867
 *                     break
 *             node = 0
 *             for bi in range(offset, xs.byte_num):             # <<<<<<<<<<<<<<
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 */
    __pyx_t_6 = __pyx_v_xs->byte_num;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = __pyx_v_offset; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_bi = __pyx_t_8;

      /* "cyac/trie.pyx":868
 *             node = 0
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]             # <<<<<<<<<<<<<<
 *                 node = self.jump(b, node)
 *                 if node >= 0:
 */
      __pyx_v_b = (__pyx_v_xs->bytes_[__pyx_v_bi]);

      /* "cyac/trie.pyx":869
 *             for bi in range(offset, xs.byte_num):
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)             # <<<<<<<<<<<<<<
 *                 if node >= 0:
 *                     vk = self.value(node)
 */
      __pyx_v_node = __pyx_f_4cyac_4trie_4Trie_jump(__pyx_v_self, __pyx_v_b, __pyx_v_node);

      /* "cyac/trie.pyx":870
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 *                 if node >= 0:             # <<<<<<<<<<<<<<
 *                     vk = self.value(node)
 *                     if vk >= 0:
 */
      __pyx_t_4 = ((__pyx_v_node >= 0) != 0);
      if (__pyx_t_4) {

        /* "cyac/trie.pyx":871
 *                 node = self.jump(b, node)
 *                 if node >= 0:
 *                     vk = self.value(node)             # <<<<<<<<<<<<<<
 *                     if vk >= 0:
 *                         if sep is not None:
 */
        __pyx_v_vk = __pyx_f_4cyac_4trie_4Trie_value(__pyx_v_self, __pyx_v_node);

        /* "cyac/trie.pyx":872
 *                 if node >= 0:
 *                     vk = self.value(node)
 *                     if vk >= 0:             # <<<<<<<<<<<<<<
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 */
        __pyx_t_4 = ((__pyx_v_vk >= 0) != 0);
        if (__pyx_t_4) {

          /* "cyac/trie.pyx":873
 *                     vk = self.value(node)
 *                     if vk >= 0:
 *                         if sep is not None:             # <<<<<<<<<<<<<<
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 *                                 continue
 */
          __pyx_t_4 = (__pyx_v_sep != Py_None);
          __pyx_t_5 = (__pyx_t_4 != 0);
          if (__pyx_t_5) {

            /* "cyac/trie.pyx":874
 *                     if vk >= 0:
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:             # <<<<<<<<<<<<<<
 *                                 continue
 *                         last_vk = vk
 */
            __pyx_t_4 = (((__pyx_v_bi + 1) < __pyx_v_xs->byte_num) != 0);
            if (__pyx_t_4) {
            } else {
              __pyx_t_5 = __pyx_t_4;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_xs->chars[(__pyx_v_xs->char_idx_of_byte[(__pyx_v_bi + 1)])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 874, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_2 = (__pyx_t_4 != 0);
            __pyx_t_5 = __pyx_t_2;
            __pyx_L21_bool_binop_done:;
            if (__pyx_t_5) {

              /* "cyac/trie.pyx":875
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 *                                 continue             # <<<<<<<<<<<<<<
 *                         last_vk = vk
 *                         last_b = bi
 */
              goto __pyx_L15_continue;

              /* "cyac/trie.pyx":874
 *                     if vk >= 0:
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:             # <<<<<<<<<<<<<<
 *                                 continue
 *                         last_vk = vk
 */
            }

            /* "cyac/trie.pyx":873
 *                     vk = self.value(node)
 *                     if vk >= 0:
 *                         if sep is not None:             # <<<<<<<<<<<<<<
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 *                                 continue
 */
          }

          /* "cyac/trie.pyx":876
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 *                                 continue
 *                         last_vk = vk             # <<<<<<<<<<<<<<
 *                         last_b = bi
 *                 else:
 */
          __pyx_v_last_vk = __pyx_v_vk;

          /* "cyac/trie.pyx":877
 *                                 continue
 *                         last_vk = vk
 *                         last_b = bi             # <<<<<<<<<<<<<<
 *                 else:
 *                     break
 */
          __pyx_v_last_b = __pyx_v_bi;

          /* "cyac/trie.pyx":872
 *                 if node >= 0:
 *                     vk = self.value(node)
 *                     if vk >= 0:             # <<<<<<<<<<<<<<
 *                         if sep is not None:
 *                             if bi + 1 < xs.byte_num and xs.chars[xs.char_idx_of_byte[bi + 1]] not in sep:
 */
        }

        /* "cyac/trie.pyx":870
 *                 b = xs.bytes_[bi]
 *                 node = self.jump(b, node)
 *                 if node >= 0:             # <<<<<<<<<<<<<<
 *                     vk = self.value(node)
 *                     if vk >= 0:
 */
        goto __pyx_L17;
      }

      /* "cyac/trie.pyx":879
 *                         last_b = bi
 *                 else:
 *                     break             # <<<<<<<<<<<<<<
 *             if last_vk == -1:
 *                 prev_offset = offset
 */
      /*else*/ {
        goto __pyx_L16_break;
      }
      __pyx_L17:;
      __pyx_L15_continue:;
    }
    __pyx_L16_break:;

    /* "cyac/trie.pyx":880
 *                 else:
 *                     break
 *             if last_vk == -1:             # <<<<<<<<<<<<<<
 *                 prev_offset = offset
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
    __pyx_t_5 = ((__pyx_v_last_vk == -1L) != 0);
    if (__pyx_t_5) {

      /* "cyac/trie.pyx":881
 *                     break
 *             if last_vk == -1:
 *                 prev_offset = offset             # <<<<<<<<<<<<<<
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:
 */
      __pyx_v_prev_offset = __pyx_v_offset;

      /* "cyac/trie.pyx":882
 *             if last_vk == -1:
 *                 prev_offset = offset
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 */
      __pyx_v_offset = (__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_v_xs, (__pyx_v_xs->char_idx_of_byte[__pyx_v_offset])));

      /* "cyac/trie.pyx":883
 *                 prev_offset = offset
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:             # <<<<<<<<<<<<<<
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      __pyx_t_5 = (__pyx_v_sep != Py_None);
      __pyx_t_2 = (__pyx_t_5 != 0);
      if (__pyx_t_2) {

        /* "cyac/trie.pyx":884
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:             # <<<<<<<<<<<<<<
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 */
        while (1) {
          __pyx_t_5 = ((__pyx_v_offset < __pyx_v_xs->byte_num) != 0);
          if (__pyx_t_5) {
          } else {
            __pyx_t_2 = __pyx_t_5;
            goto __pyx_L27_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_xs->chars[(__pyx_v_xs->char_idx_of_byte[__pyx_v_offset])])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 884, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_4 = (__pyx_t_5 != 0);
          __pyx_t_2 = __pyx_t_4;
          __pyx_L27_bool_binop_done:;
          if (!__pyx_t_2) break;

          /* "cyac/trie.pyx":885
 *                 if sep is not None:
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])             # <<<<<<<<<<<<<<
 *                 prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                 offset2 = ignore_case_byte_index_mapping(align, offset)
 */
          __pyx_v_offset = (__pyx_v_offset + __pyx_f_4cyac_7xstring_7xstring_char_byte_num(__pyx_v_xs, (__pyx_v_xs->char_idx_of_byte[__pyx_v_offset])));
        }

        /* "cyac/trie.pyx":883
 *                 prev_offset = offset
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 if sep is not None:             # <<<<<<<<<<<<<<
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
      }

      /* "cyac/trie.pyx":886
 *                     while offset < xs.byte_num and xs.chars[xs.char_idx_of_byte[offset]] not in sep:
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)             # <<<<<<<<<<<<<<
 *                 offset2 = ignore_case_byte_index_mapping(align, offset)
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 */
      __pyx_v_prev_offset2 = __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(__pyx_v_align, __pyx_v_prev_offset);

      /* "cyac/trie.pyx":887
 *                         offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 *                 prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                 offset2 = ignore_case_byte_index_mapping(align, offset)             # <<<<<<<<<<<<<<
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 continue
 */
      __pyx_v_offset2 = __pyx_f_4cyac_4trie_ignore_case_byte_index_mapping(__pyx_v_align, __pyx_v_offset);

      /* "cyac/trie.pyx":888
 *                 prev_offset2 = ignore_case_byte_index_mapping(align, prev_offset)
 *                 offset2 = ignore_case_byte_index_mapping(align, offset)
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)             # <<<<<<<<<<<<<<
 *                 continue
 *             if callback_list_or_dict:
 */
      (void)(__pyx_v_sb.sputn((((char *)__pyx_v_prev_xs->bytes_) + __pyx_v_prev_offset2), (__pyx_v_offset2 - __pyx_v_prev_offset2)));

      /* "cyac/trie.pyx":889
 *                 offset2 = ignore_case_byte_index_mapping(align, offset)
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 continue             # <<<<<<<<<<<<<<
 *             if callback_list_or_dict:
 *                 replaced_ = callback[last_vk]
 */
      goto __pyx_L6_continue;

      /* "cyac/trie.pyx":880
 *                 else:
 *                     break
 *             if last_vk == -1:             # <<<<<<<<<<<<<<
 *                 prev_offset = offset
 *                 offset += xs.char_byte_num(xs.char_idx_of_byte[offset])
 */
    }

    /* "cyac/trie.pyx":890
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 continue
 *             if callback_list_or_dict:             # <<<<<<<<<<<<<<
 *                 replaced_ = callback[last_vk]
 *             else:
 */
    __pyx_t_2 = (__pyx_v_callback_list_or_dict != 0);
    if (__pyx_t_2) {

      /* "cyac/trie.pyx":891
 *                 continue
 *             if callback_list_or_dict:
 *                 replaced_ = callback[last_vk]             # <<<<<<<<<<<<<<
 *             else:
 *                 replaced_ = callback(last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_callback, __pyx_v_last_vk, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_replaced_, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "cyac/trie.pyx":890
 *                 sb.write(<char*>prev_xs.bytes_ + prev_offset2, offset2 - prev_offset2)
 *                 continue
 *             if callback_list_or_dict:             # <<<<<<<<<<<<<<
 *                 replaced_ = callback[last_vk]
 *             else:
 */
      goto __pyx_L29;
    }

    /* "cyac/trie.pyx":893
 *                 replaced_ = callback[last_vk]
 *             else:
 *                 replaced_ = callback(last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1)             # <<<<<<<<<<<<<<
 *             if isinstance(replaced_, unicode):
 *                 encoded_replaced = replaced_.encode("utf8")
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_last_vk); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_v_align, __pyx_v_xs, __pyx_v_offset)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_v_align, __pyx_v_xs, __pyx_v_last_b) + 1)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_v_callback);
      __pyx_t_12 = __pyx_v_callback; __pyx_t_13 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_6 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_9, __pyx_t_10, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
        PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_9, __pyx_t_10, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_6, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_6, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_6, __pyx_t_11);
        __pyx_t_9 = 0;
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_replaced_, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L29:;

    /* "cyac/trie.pyx":894
 *             else:
 *                 replaced_ = callback(last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1)
 *             if isinstance(replaced_, unicode):             # <<<<<<<<<<<<<<
 *                 encoded_replaced = replaced_.encode("utf8")
 *                 byte_code = encoded_replaced
 */
    __pyx_t_2 = PyUnicode_Check(__pyx_v_replaced_); 
    __pyx_t_4 = (__pyx_t_2 != 0);
    if (__pyx_t_4) {

      /* "cyac/trie.pyx":895
 *                 replaced_ = callback(last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1)
 *             if isinstance(replaced_, unicode):
 *                 encoded_replaced = replaced_.encode("utf8")             # <<<<<<<<<<<<<<
 *                 byte_code = encoded_replaced
 *             elif isinstance(replaced_, bytes):
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_replaced_, __pyx_n_s_encode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
        }
      }
      __pyx_t_1 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_14, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_n_u_utf8);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 895, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_encoded_replaced, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "cyac/trie.pyx":896
 *             if isinstance(replaced_, unicode):
 *                 encoded_replaced = replaced_.encode("utf8")
 *                 byte_code = encoded_replaced             # <<<<<<<<<<<<<<
 *             elif isinstance(replaced_, bytes):
 *                 encoded_replaced = replaced_
 */
      if (unlikely(__pyx_v_encoded_replaced == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
        __PYX_ERR(0, 896, __pyx_L1_error)
      }
      __pyx_t_15 = __Pyx_PyBytes_AsWritableUString(__pyx_v_encoded_replaced); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L1_error)
      __pyx_v_byte_code = __pyx_t_15;

      /* "cyac/trie.pyx":894
 *             else:
 *                 replaced_ = callback(last_vk, ignore_case_offset(align, xs, offset), ignore_case_offset(align, xs, last_b) + 1)
 *             if isinstance(replaced_, unicode):             # <<<<<<<<<<<<<<
 *                 encoded_replaced = replaced_.encode("utf8")
 *                 byte_code = encoded_replaced
 */
      goto __pyx_L30;
    }

    /* "cyac/trie.pyx":897
 *                 encoded_replaced = replaced_.encode("utf8")
 *                 byte_code = encoded_replaced
 *             elif isinstance(replaced_, bytes):             # <<<<<<<<<<<<<<
 *                 encoded_replaced = replaced_
 *                 byte_code = replaced_
 */
    __pyx_t_4 = PyBytes_Check(__pyx_v_replaced_); 
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (likely(__pyx_t_2)) {

      /* "cyac/trie.pyx":898
 *                 byte_code = encoded_replaced
 *             elif isinstance(replaced_, bytes):
 *                 encoded_replaced = replaced_             # <<<<<<<<<<<<<<
 *                 byte_code = replaced_
 *             else:
 */
      if (!(likely(PyBytes_CheckExact(__pyx_v_replaced_))||((__pyx_v_replaced_) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_replaced_)->tp_name), 0))) __PYX_ERR(0, 898, __pyx_L1_error)
      __pyx_t_1 = __pyx_v_replaced_;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_encoded_replaced, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "cyac/trie.pyx":899
 *             elif isinstance(replaced_, bytes):
 *                 encoded_replaced = replaced_
 *                 byte_code = replaced_             # <<<<<<<<<<<<<<
 *             else:
 *                 raise Exception("Replaced result should be bytes or unicode")
 */
      __pyx_t_15 = __Pyx_PyObject_AsWritableUString(__pyx_v_replaced_); if (unlikely((!__pyx_t_15) && PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L1_error)
      __pyx_v_byte_code = __pyx_t_15;

      /* "cyac/trie.pyx":897
 *                 encoded_replaced = replaced_.encode("utf8")
 *                 byte_code = encoded_replaced
 *             elif isinstance(replaced_, bytes):             # <<<<<<<<<<<<<<
 *                 encoded_replaced = replaced_
 *                 byte_code = replaced_
 */
      goto __pyx_L30;
    }

    /* "cyac/trie.pyx":901
 *                 byte_code = replaced_
 *             else:
 *                 raise Exception("Replaced result should be bytes or unicode")             # <<<<<<<<<<<<<<
 *             sb.write(<char*>byte_code, len(encoded_replaced))
 *             offset = last_b + 1
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 901, __pyx_L1_error)
    }
    __pyx_L30:;

    /* "cyac/trie.pyx":902
 *             else:
 *                 raise Exception("Replaced result should be bytes or unicode")
 *             sb.write(<char*>byte_code, len(encoded_replaced))             # <<<<<<<<<<<<<<
 *             offset = last_b + 1
 *         return sb.to_string().decode("utf8")
 */
    if (unlikely(__pyx_v_encoded_replaced == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 902, __pyx_L1_error)
    }
    __pyx_t_16 = PyBytes_GET_SIZE(__pyx_v_encoded_replaced); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 902, __pyx_L1_error)
    (void)(__pyx_v_sb.sputn(((char *)__pyx_v_byte_code), __pyx_t_16));

    /* "cyac/trie.pyx":903
 *                 raise Exception("Replaced result should be bytes or unicode")
 *             sb.write(<char*>byte_code, len(encoded_replaced))
 *             offset = last_b + 1             # <<<<<<<<<<<<<<
 *         return sb.to_string().decode("utf8")
 * 
 */
    __pyx_v_offset = (__pyx_v_last_b + 1);
    __pyx_L6_continue:;
  }
  __pyx_L7_break:;

  /* "cyac/trie.pyx":904
 *             sb.write(<char*>byte_code, len(encoded_replaced))
 *             offset = last_b + 1
 *         return sb.to_string().decode("utf8")             # <<<<<<<<<<<<<<
 * 
 *     def _dump_array(self, fname):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_sb.str(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":820
 *             offset = last_b + 1
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         replace trie's keys from given string. only replace the longest.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("cyac.trie.Trie.replace_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_align);
  __Pyx_XDECREF((PyObject *)__pyx_v_xs);
  __Pyx_XDECREF((PyObject *)__pyx_v_prev_xs);
  __Pyx_XDECREF(__pyx_v_encoded_replaced);
  __Pyx_XDECREF(__pyx_v_replaced_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":906
 *         return sb.to_string().decode("utf8")
 * 
 *     def _dump_array(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Used for debug
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_33_dump_array(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_32_dump_array[] = "\n        Used for debug\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_33_dump_array(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dump_array (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_32_dump_array(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_32_dump_array(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_fname) {
  struct __pyx_t_4cyac_4trie_Node *__pyx_v_n;
  int __pyx_v_i;
  PyObject *__pyx_v_fo = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dump_array", 0);

  /* "cyac/trie.pyx":912
 *         cdef Node* n
 *         cdef int i
 *         with open(fname, "w") as fo:             # <<<<<<<<<<<<<<
 *             for i in range(self.array_size):
 *                 n = &self.array[i]
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_fname);
    __Pyx_GIVEREF(__pyx_v_fname);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_fname);
    __Pyx_INCREF(__pyx_n_u_w);
    __Pyx_GIVEREF(__pyx_n_u_w);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __pyx_v_fo = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "cyac/trie.pyx":913
 *         cdef int i
 *         with open(fname, "w") as fo:
 *             for i in range(self.array_size):             # <<<<<<<<<<<<<<
 *                 n = &self.array[i]
 *                 fo.write("value=%s, check=%s, flags=%s, child=%s, sibling=%s\n" % (n.value, n.check, n.flags, n.child, n.sibling))
 */
          __pyx_t_9 = __pyx_v_self->array_size;
          __pyx_t_10 = __pyx_t_9;
          for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
            __pyx_v_i = __pyx_t_11;

            /* "cyac/trie.pyx":914
 *         with open(fname, "w") as fo:
 *             for i in range(self.array_size):
 *                 n = &self.array[i]             # <<<<<<<<<<<<<<
 *                 fo.write("value=%s, check=%s, flags=%s, child=%s, sibling=%s\n" % (n.value, n.check, n.flags, n.child, n.sibling))
 * 
 */
            __pyx_v_n = (&(__pyx_v_self->array[__pyx_v_i]));

            /* "cyac/trie.pyx":915
 *             for i in range(self.array_size):
 *                 n = &self.array[i]
 *                 fo.write("value=%s, check=%s, flags=%s, child=%s, sibling=%s\n" % (n.value, n.check, n.flags, n.child, n.sibling))             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fo, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = PyTuple_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_12 = 0;
            __pyx_t_13 = 127;
            __Pyx_INCREF(__pyx_kp_u_value);
            __pyx_t_12 += 6;
            __Pyx_GIVEREF(__pyx_kp_u_value);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_value);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_n->value, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_check);
            __pyx_t_12 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_check);
            PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_check);
            __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_n->check, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_flags);
            __pyx_t_12 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_flags);
            PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_flags);
            __pyx_t_5 = __Pyx_PyUnicode_From_unsigned_short(__pyx_v_n->flags, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u_child);
            __pyx_t_12 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_child);
            PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_child);
            __pyx_t_5 = __Pyx_PyInt_From_unsigned_char(__pyx_v_n->child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_5), __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_14);
            __pyx_t_14 = 0;
            __Pyx_INCREF(__pyx_kp_u_sibling);
            __pyx_t_12 += 10;
            __Pyx_GIVEREF(__pyx_kp_u_sibling);
            PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_sibling);
            __pyx_t_14 = __Pyx_PyInt_From_unsigned_char(__pyx_v_n->sibling); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_5 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_14), __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_INCREF(__pyx_kp_u__3);
            __pyx_t_12 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__3);
            PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__3);
            __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 11, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 915, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }

          /* "cyac/trie.pyx":912
 *         cdef Node* n
 *         cdef int i
 *         with open(fname, "w") as fo:             # <<<<<<<<<<<<<<
 *             for i in range(self.array_size):
 *                 n = &self.array[i]
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("cyac.trie.Trie._dump_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_5) < 0) __PYX_ERR(0, 912, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 912, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__pyx_t_16 < 0) __PYX_ERR(0, 912, __pyx_L9_except_error)
          __pyx_t_17 = ((!(__pyx_t_16 != 0)) != 0);
          if (__pyx_t_17) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_5);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_2, __pyx_t_5);
            __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_5 = 0; 
            __PYX_ERR(0, 912, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__4, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 912, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L18;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L18:;
  }

  /* "cyac/trie.pyx":906
 *         return sb.to_string().decode("utf8")
 * 
 *     def _dump_array(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         Used for debug
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("cyac.trie.Trie._dump_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":917
 *                 fo.write("value=%s, check=%s, flags=%s, child=%s, sibling=%s\n" % (n.value, n.check, n.flags, n.child, n.sibling))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (Trie,), self.__getstate__())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_35__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_35__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_34__reduce__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_34__reduce__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "cyac/trie.pyx":918
 * 
 *     def __reduce__(self):
 *         return (new_object, (Trie,), self.__getstate__())             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_new_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_4cyac_4trie_Trie));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_4cyac_4trie_Trie));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_4cyac_4trie_Trie));
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":917
 *                 fo.write("value=%s, check=%s, flags=%s, child=%s, sibling=%s\n" % (n.value, n.check, n.flags, n.child, n.sibling))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (Trie,), self.__getstate__())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.trie.Trie.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":920
 *         return (new_object, (Trie,), self.__getstate__())
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.key_num, self.key_capacity,
 *             self.bheadF, self.bheadC, self.bheadO,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_37__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_37__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_36__getstate__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_36__getstate__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "cyac/trie.pyx":921
 * 
 *     def __getstate__(self):
 *         return (self.key_num, self.key_capacity,             # <<<<<<<<<<<<<<
 *             self.bheadF, self.bheadC, self.bheadO,
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->key_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->key_capacity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cyac/trie.pyx":922
 *     def __getstate__(self):
 *         return (self.key_num, self.key_capacity,
 *             self.bheadF, self.bheadC, self.bheadO,             # <<<<<<<<<<<<<<
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,
 *             self.max_trial, self.leaf_size,
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->bheadF); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->bheadC); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->bheadO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "cyac/trie.pyx":923
 *         return (self.key_num, self.key_capacity,
 *             self.bheadF, self.bheadC, self.bheadO,
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,             # <<<<<<<<<<<<<<
 *             self.max_trial, self.leaf_size,
 *             array_to_bytes(<char*>self.array, self.array_size * sizeof(Node)),
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->array_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_self->capacity); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_v_self->ordered); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_self->ignore_case); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "cyac/trie.pyx":924
 *             self.bheadF, self.bheadC, self.bheadO,
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,
 *             self.max_trial, self.leaf_size,             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.array, self.array_size * sizeof(Node)),
 *             array_to_bytes(<char*>self.blocks, (self.array_size >> 8) * sizeof(Block)),
 */
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_self->max_trial); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_self->leaf_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "cyac/trie.pyx":925
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,
 *             self.max_trial, self.leaf_size,
 *             array_to_bytes(<char*>self.array, self.array_size * sizeof(Node)),             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.blocks, (self.array_size >> 8) * sizeof(Block)),
 *             array_to_bytes(<char*>self.leafs, self.leaf_size * sizeof(int)),
 */
  __pyx_t_12 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->array), (__pyx_v_self->array_size * (sizeof(struct __pyx_t_4cyac_4trie_Node))), 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "cyac/trie.pyx":926
 *             self.max_trial, self.leaf_size,
 *             array_to_bytes(<char*>self.array, self.array_size * sizeof(Node)),
 *             array_to_bytes(<char*>self.blocks, (self.array_size >> 8) * sizeof(Block)),             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.leafs, self.leaf_size * sizeof(int)),
 *             array_to_bytes(<char*>self.reject, 257 * sizeof(int))
 */
  __pyx_t_13 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->blocks), ((__pyx_v_self->array_size >> 8) * (sizeof(struct __pyx_t_4cyac_4trie_Block))), 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "cyac/trie.pyx":927
 *             array_to_bytes(<char*>self.array, self.array_size * sizeof(Node)),
 *             array_to_bytes(<char*>self.blocks, (self.array_size >> 8) * sizeof(Block)),
 *             array_to_bytes(<char*>self.leafs, self.leaf_size * sizeof(int)),             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.reject, 257 * sizeof(int))
 *         )
 */
  __pyx_t_14 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->leafs), (__pyx_v_self->leaf_size * (sizeof(int))), 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);

  /* "cyac/trie.pyx":928
 *             array_to_bytes(<char*>self.blocks, (self.array_size >> 8) * sizeof(Block)),
 *             array_to_bytes(<char*>self.leafs, self.leaf_size * sizeof(int)),
 *             array_to_bytes(<char*>self.reject, 257 * sizeof(int))             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_15 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->reject), (0x101 * (sizeof(int))), 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "cyac/trie.pyx":921
 * 
 *     def __getstate__(self):
 *         return (self.key_num, self.key_capacity,             # <<<<<<<<<<<<<<
 *             self.bheadF, self.bheadC, self.bheadO,
 *             self.array_size, self.capacity, self.ordered, self.ignore_case,
 */
  __pyx_t_16 = PyTuple_New(15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_16, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_16, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_16, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_16, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_16, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_16, 12, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_16, 13, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_16, 14, __pyx_t_15);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_r = __pyx_t_16;
  __pyx_t_16 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":920
 *         return (new_object, (Trie,), self.__getstate__())
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.key_num, self.key_capacity,
 *             self.bheadF, self.bheadC, self.bheadO,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("cyac.trie.Trie.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":931
 *         )
 * 
 *     def __setstate__(self, data):             # <<<<<<<<<<<<<<
 *         self.key_num, self.key_capacity, \
 *         self.bheadF, self.bheadC, self.bheadO, \
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_39__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_4Trie_39__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_38__setstate__(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_38__setstate__(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_array = NULL;
  PyObject *__pyx_v_blocks = NULL;
  PyObject *__pyx_v_leafs = NULL;
  PyObject *__pyx_v_reject = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  bool __pyx_t_25;
  bool __pyx_t_26;
  int __pyx_t_27;
  int __pyx_t_28;
  int __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "cyac/trie.pyx":936
 *         self.array_size, self.capacity, self.ordered, self.ignore_case, \
 *         self.max_trial, self.leaf_size, \
 *         array, blocks, leafs, reject = data             # <<<<<<<<<<<<<<
 *         if self.array != NULL:
 *             free(self.array)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_data))) || (PyList_CheckExact(__pyx_v_data))) {
    PyObject* sequence = __pyx_v_data;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 15)) {
      if (size > 15) __Pyx_RaiseTooManyValuesError(15);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 932, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 5); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 6); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 7); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 8); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 9); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 10); 
      __pyx_t_12 = PyTuple_GET_ITEM(sequence, 11); 
      __pyx_t_13 = PyTuple_GET_ITEM(sequence, 12); 
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 13); 
      __pyx_t_15 = PyTuple_GET_ITEM(sequence, 14); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 5); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 6); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 7); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 8); 
      __pyx_t_10 = PyList_GET_ITEM(sequence, 9); 
      __pyx_t_11 = PyList_GET_ITEM(sequence, 10); 
      __pyx_t_12 = PyList_GET_ITEM(sequence, 11); 
      __pyx_t_13 = PyList_GET_ITEM(sequence, 12); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 13); 
      __pyx_t_15 = PyList_GET_ITEM(sequence, 14); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_t_15);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[15] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15};
      for (i=0; i < 15; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[15] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10,&__pyx_t_11,&__pyx_t_12,&__pyx_t_13,&__pyx_t_14,&__pyx_t_15};
    __pyx_t_16 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = Py_TYPE(__pyx_t_16)->tp_iternext;
    for (index=0; index < 15; index++) {
      PyObject* item = __pyx_t_17(__pyx_t_16); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_16), 15) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
    __pyx_t_17 = NULL;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_17 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 932, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "cyac/trie.pyx":932
 * 
 *     def __setstate__(self, data):
 *         self.key_num, self.key_capacity, \             # <<<<<<<<<<<<<<
 *         self.bheadF, self.bheadC, self.bheadO, \
 *         self.array_size, self.capacity, self.ordered, self.ignore_case, \
 */
  __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_27 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_27 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_28 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_28 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_self->key_num = __pyx_t_18;
  __pyx_v_self->key_capacity = __pyx_t_19;

  /* "cyac/trie.pyx":933
 *     def __setstate__(self, data):
 *         self.key_num, self.key_capacity, \
 *         self.bheadF, self.bheadC, self.bheadO, \             # <<<<<<<<<<<<<<
 *         self.array_size, self.capacity, self.ordered, self.ignore_case, \
 *         self.max_trial, self.leaf_size, \
 */
  __pyx_v_self->bheadF = __pyx_t_20;
  __pyx_v_self->bheadC = __pyx_t_21;
  __pyx_v_self->bheadO = __pyx_t_22;

  /* "cyac/trie.pyx":934
 *         self.key_num, self.key_capacity, \
 *         self.bheadF, self.bheadC, self.bheadO, \
 *         self.array_size, self.capacity, self.ordered, self.ignore_case, \             # <<<<<<<<<<<<<<
 *         self.max_trial, self.leaf_size, \
 *         array, blocks, leafs, reject = data
 */
  __pyx_v_self->array_size = __pyx_t_23;
  __pyx_v_self->capacity = __pyx_t_24;
  __pyx_v_self->ordered = __pyx_t_25;
  __pyx_v_self->ignore_case = __pyx_t_26;

  /* "cyac/trie.pyx":935
 *         self.bheadF, self.bheadC, self.bheadO, \
 *         self.array_size, self.capacity, self.ordered, self.ignore_case, \
 *         self.max_trial, self.leaf_size, \             # <<<<<<<<<<<<<<
 *         array, blocks, leafs, reject = data
 *         if self.array != NULL:
 */
  __pyx_v_self->max_trial = __pyx_t_27;
  __pyx_v_self->leaf_size = __pyx_t_28;
  __pyx_v_array = __pyx_t_12;
  __pyx_t_12 = 0;
  __pyx_v_blocks = __pyx_t_13;
  __pyx_t_13 = 0;
  __pyx_v_leafs = __pyx_t_14;
  __pyx_t_14 = 0;
  __pyx_v_reject = __pyx_t_15;
  __pyx_t_15 = 0;

  /* "cyac/trie.pyx":937
 *         self.max_trial, self.leaf_size, \
 *         array, blocks, leafs, reject = data
 *         if self.array != NULL:             # <<<<<<<<<<<<<<
 *             free(self.array)
 *         if self.blocks != NULL:
 */
  __pyx_t_29 = ((__pyx_v_self->array != NULL) != 0);
  if (__pyx_t_29) {

    /* "cyac/trie.pyx":938
 *         array, blocks, leafs, reject = data
 *         if self.array != NULL:
 *             free(self.array)             # <<<<<<<<<<<<<<
 *         if self.blocks != NULL:
 *             free(self.blocks)
 */
    free(__pyx_v_self->array);

    /* "cyac/trie.pyx":937
 *         self.max_trial, self.leaf_size, \
 *         array, blocks, leafs, reject = data
 *         if self.array != NULL:             # <<<<<<<<<<<<<<
 *             free(self.array)
 *         if self.blocks != NULL:
 */
  }

  /* "cyac/trie.pyx":939
 *         if self.array != NULL:
 *             free(self.array)
 *         if self.blocks != NULL:             # <<<<<<<<<<<<<<
 *             free(self.blocks)
 *         if self.leafs != NULL:
 */
  __pyx_t_29 = ((__pyx_v_self->blocks != NULL) != 0);
  if (__pyx_t_29) {

    /* "cyac/trie.pyx":940
 *             free(self.array)
 *         if self.blocks != NULL:
 *             free(self.blocks)             # <<<<<<<<<<<<<<
 *         if self.leafs != NULL:
 *             free(self.leafs)
 */
    free(__pyx_v_self->blocks);

    /* "cyac/trie.pyx":939
 *         if self.array != NULL:
 *             free(self.array)
 *         if self.blocks != NULL:             # <<<<<<<<<<<<<<
 *             free(self.blocks)
 *         if self.leafs != NULL:
 */
  }

  /* "cyac/trie.pyx":941
 *         if self.blocks != NULL:
 *             free(self.blocks)
 *         if self.leafs != NULL:             # <<<<<<<<<<<<<<
 *             free(self.leafs)
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))
 */
  __pyx_t_29 = ((__pyx_v_self->leafs != NULL) != 0);
  if (__pyx_t_29) {

    /* "cyac/trie.pyx":942
 *             free(self.blocks)
 *         if self.leafs != NULL:
 *             free(self.leafs)             # <<<<<<<<<<<<<<
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))
 *         self.blocks = <Block*> bytes_to_array(blocks, (self.capacity >> 8) * sizeof(Block))
 */
    free(__pyx_v_self->leafs);

    /* "cyac/trie.pyx":941
 *         if self.blocks != NULL:
 *             free(self.blocks)
 *         if self.leafs != NULL:             # <<<<<<<<<<<<<<
 *             free(self.leafs)
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))
 */
  }

  /* "cyac/trie.pyx":943
 *         if self.leafs != NULL:
 *             free(self.leafs)
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))             # <<<<<<<<<<<<<<
 *         self.blocks = <Block*> bytes_to_array(blocks, (self.capacity >> 8) * sizeof(Block))
 *         self.leafs = <int*> bytes_to_array(leafs, self.key_capacity * sizeof(int))
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_array))||((__pyx_v_array) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_array)->tp_name), 0))) __PYX_ERR(0, 943, __pyx_L1_error)
  __pyx_v_self->array = ((struct __pyx_t_4cyac_4trie_Node *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_array), (__pyx_v_self->capacity * (sizeof(struct __pyx_t_4cyac_4trie_Node))), 0));

  /* "cyac/trie.pyx":944
 *             free(self.leafs)
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))
 *         self.blocks = <Block*> bytes_to_array(blocks, (self.capacity >> 8) * sizeof(Block))             # <<<<<<<<<<<<<<
 *         self.leafs = <int*> bytes_to_array(leafs, self.key_capacity * sizeof(int))
 *         cdef int i
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_blocks))||((__pyx_v_blocks) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_blocks)->tp_name), 0))) __PYX_ERR(0, 944, __pyx_L1_error)
  __pyx_v_self->blocks = ((struct __pyx_t_4cyac_4trie_Block *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_blocks), ((__pyx_v_self->capacity >> 8) * (sizeof(struct __pyx_t_4cyac_4trie_Block))), 0));

  /* "cyac/trie.pyx":945
 *         self.array = <Node*> bytes_to_array(array, (self.capacity * sizeof(Node)))
 *         self.blocks = <Block*> bytes_to_array(blocks, (self.capacity >> 8) * sizeof(Block))
 *         self.leafs = <int*> bytes_to_array(leafs, self.key_capacity * sizeof(int))             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(257):
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_leafs))||((__pyx_v_leafs) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_leafs)->tp_name), 0))) __PYX_ERR(0, 945, __pyx_L1_error)
  __pyx_v_self->leafs = ((int *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_leafs), (__pyx_v_self->key_capacity * (sizeof(int))), 0));

  /* "cyac/trie.pyx":947
 *         self.leafs = <int*> bytes_to_array(leafs, self.key_capacity * sizeof(int))
 *         cdef int i
 *         for i in range(257):             # <<<<<<<<<<<<<<
 *             self.reject[i] = reject[i]
 * 
 */
  for (__pyx_t_28 = 0; __pyx_t_28 < 0x101; __pyx_t_28+=1) {
    __pyx_v_i = __pyx_t_28;

    /* "cyac/trie.pyx":948
 *         cdef int i
 *         for i in range(257):
 *             self.reject[i] = reject[i]             # <<<<<<<<<<<<<<
 * 
 *     cdef write(self, FILE* ptr_fw):
 */
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_reject, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_27 = __Pyx_PyInt_As_int(__pyx_t_15); if (unlikely((__pyx_t_27 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    (__pyx_v_self->reject[__pyx_v_i]) = __pyx_t_27;
  }

  /* "cyac/trie.pyx":931
 *         )
 * 
 *     def __setstate__(self, data):             # <<<<<<<<<<<<<<
 *         self.key_num, self.key_capacity, \
 *         self.bheadF, self.bheadC, self.bheadO, \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("cyac.trie.Trie.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_array);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_v_leafs);
  __Pyx_XDECREF(__pyx_v_reject);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":950
 *             self.reject[i] = reject[i]
 * 
 *     cdef write(self, FILE* ptr_fw):             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 */

static PyObject *__pyx_f_4cyac_4trie_4Trie_write(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, FILE *__pyx_v_ptr_fw) {
  int __pyx_v_size;
  int __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "cyac/trie.pyx":951
 * 
 *     cdef write(self, FILE* ptr_fw):
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         cdef int size = self.buff_size()
 *         fwrite(&size, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_4cyac_4util_magic_number)), (sizeof(__pyx_v_4cyac_4util_magic_number)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":952
 *     cdef write(self, FILE* ptr_fw):
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()             # <<<<<<<<<<<<<<
 *         fwrite(&size, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_num, sizeof(int), 1, ptr_fw)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_4;

  /* "cyac/trie.pyx":953
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 *         fwrite(&size, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.key_num, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_capacity, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite((&__pyx_v_size), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":954
 *         cdef int size = self.buff_size()
 *         fwrite(&size, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_num, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.key_capacity, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadF, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->key_num)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":955
 *         fwrite(&size, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_num, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_capacity, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.bheadF, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadC, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->key_capacity)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":956
 *         fwrite(<void*>&self.key_num, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.key_capacity, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadF, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.bheadC, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadO, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->bheadF)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":957
 *         fwrite(<void*>&self.key_capacity, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadF, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadC, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.bheadO, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.array_size, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->bheadC)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":958
 *         fwrite(<void*>&self.bheadF, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadC, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadO, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.array_size, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.capacity, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->bheadO)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":959
 *         fwrite(<void*>&self.bheadC, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.bheadO, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.array_size, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.capacity, sizeof(int), 1, ptr_fw)
 *         # for arm processor, we should align data in 4bytes.
 */
  (void)(fwrite(((void *)(&__pyx_v_self->array_size)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":960
 *         fwrite(<void*>&self.bheadO, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.array_size, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.capacity, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         # for arm processor, we should align data in 4bytes.
 *         cdef int val = self.ordered
 */
  (void)(fwrite(((void *)(&__pyx_v_self->capacity)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":962
 *         fwrite(<void*>&self.capacity, sizeof(int), 1, ptr_fw)
 *         # for arm processor, we should align data in 4bytes.
 *         cdef int val = self.ordered             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         val = self.ignore_case
 */
  __pyx_t_5 = __pyx_v_self->ordered;
  __pyx_v_val = __pyx_t_5;

  /* "cyac/trie.pyx":963
 *         # for arm processor, we should align data in 4bytes.
 *         cdef int val = self.ordered
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         val = self.ignore_case
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_val)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":964
 *         cdef int val = self.ordered
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         val = self.ignore_case             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.max_trial, sizeof(int), 1, ptr_fw)
 */
  __pyx_t_5 = __pyx_v_self->ignore_case;
  __pyx_v_val = __pyx_t_5;

  /* "cyac/trie.pyx":965
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         val = self.ignore_case
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.max_trial, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.leaf_size, sizeof(int), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_val)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":966
 *         val = self.ignore_case
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.max_trial, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.leaf_size, sizeof(int), 1, ptr_fw)
 * 
 */
  (void)(fwrite(((void *)(&__pyx_v_self->max_trial)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":967
 *         fwrite(<void*>&val, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.max_trial, sizeof(int), 1, ptr_fw)
 *         fwrite(<void*>&self.leaf_size, sizeof(int), 1, ptr_fw)             # <<<<<<<<<<<<<<
 * 
 *         fwrite(<void*>self.array, sizeof(Node), self.capacity, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_self->leaf_size)), (sizeof(int)), 1, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":969
 *         fwrite(<void*>&self.leaf_size, sizeof(int), 1, ptr_fw)
 * 
 *         fwrite(<void*>self.array, sizeof(Node), self.capacity, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>self.blocks, sizeof(Block), self.capacity >> 8, ptr_fw)
 *         fwrite(<void*>self.leafs, sizeof(int), self.key_capacity, ptr_fw)
 */
  (void)(fwrite(((void *)__pyx_v_self->array), (sizeof(struct __pyx_t_4cyac_4trie_Node)), __pyx_v_self->capacity, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":970
 * 
 *         fwrite(<void*>self.array, sizeof(Node), self.capacity, ptr_fw)
 *         fwrite(<void*>self.blocks, sizeof(Block), self.capacity >> 8, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>self.leafs, sizeof(int), self.key_capacity, ptr_fw)
 *         fwrite(<void*>&self.reject, sizeof(int), 257, ptr_fw)
 */
  (void)(fwrite(((void *)__pyx_v_self->blocks), (sizeof(struct __pyx_t_4cyac_4trie_Block)), (__pyx_v_self->capacity >> 8), __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":971
 *         fwrite(<void*>self.array, sizeof(Node), self.capacity, ptr_fw)
 *         fwrite(<void*>self.blocks, sizeof(Block), self.capacity >> 8, ptr_fw)
 *         fwrite(<void*>self.leafs, sizeof(int), self.key_capacity, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&self.reject, sizeof(int), 257, ptr_fw)
 * 
 */
  (void)(fwrite(((void *)__pyx_v_self->leafs), (sizeof(int)), __pyx_v_self->key_capacity, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":972
 *         fwrite(<void*>self.blocks, sizeof(Block), self.capacity >> 8, ptr_fw)
 *         fwrite(<void*>self.leafs, sizeof(int), self.key_capacity, ptr_fw)
 *         fwrite(<void*>&self.reject, sizeof(int), 257, ptr_fw)             # <<<<<<<<<<<<<<
 * 
 *     def buff_size(self):
 */
  (void)(fwrite(((void *)(&__pyx_v_self->reject)), (sizeof(int)), 0x101, __pyx_v_ptr_fw));

  /* "cyac/trie.pyx":950
 *             self.reject[i] = reject[i]
 * 
 *     cdef write(self, FILE* ptr_fw):             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.trie.Trie.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":974
 *         fwrite(<void*>&self.reject, sizeof(int), 257, ptr_fw)
 * 
 *     def buff_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         return the memory size of buffer needed for exporting to external buffer.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_41buff_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_40buff_size[] = "\n        return the memory size of buffer needed for exporting to external buffer.\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_41buff_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buff_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_40buff_size(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_40buff_size(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buff_size", 0);

  /* "cyac/trie.pyx":978
 *         return the memory size of buffer needed for exporting to external buffer.
 *         """
 *         return sizeof(magic_number) +  sizeof(int) + sizeof(self.key_num) + sizeof(self.key_capacity) + sizeof(self.bheadF) + sizeof(self.bheadC) + sizeof(self.bheadO) + \             # <<<<<<<<<<<<<<
 *             sizeof(self.array_size) + sizeof(self.capacity) + sizeof(int) + sizeof(int) + sizeof(self.max_trial) + sizeof(self.leaf_size) + \
 *             sizeof(Node) * self.capacity + sizeof(Block) * (self.capacity >> 8) + sizeof(int) * self.key_capacity + sizeof(int) * 257
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cyac/trie.pyx":980
 *         return sizeof(magic_number) +  sizeof(int) + sizeof(self.key_num) + sizeof(self.key_capacity) + sizeof(self.bheadF) + sizeof(self.bheadC) + sizeof(self.bheadO) + \
 *             sizeof(self.array_size) + sizeof(self.capacity) + sizeof(int) + sizeof(int) + sizeof(self.max_trial) + sizeof(self.leaf_size) + \
 *             sizeof(Node) * self.capacity + sizeof(Block) * (self.capacity >> 8) + sizeof(int) * self.key_capacity + sizeof(int) * 257             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((((((((((((((((((sizeof(__pyx_v_4cyac_4util_magic_number)) + (sizeof(int))) + (sizeof(__pyx_v_self->key_num))) + (sizeof(__pyx_v_self->key_capacity))) + (sizeof(__pyx_v_self->bheadF))) + (sizeof(__pyx_v_self->bheadC))) + (sizeof(__pyx_v_self->bheadO))) + (sizeof(__pyx_v_self->array_size))) + (sizeof(__pyx_v_self->capacity))) + (sizeof(int))) + (sizeof(int))) + (sizeof(__pyx_v_self->max_trial))) + (sizeof(__pyx_v_self->leaf_size))) + ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_self->capacity)) + ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_self->capacity >> 8))) + ((sizeof(int)) * __pyx_v_self->key_capacity)) + ((sizeof(int)) * 0x101))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pyx":974
 *         fwrite(<void*>&self.reject, sizeof(int), 257, ptr_fw)
 * 
 *     def buff_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         return the memory size of buffer needed for exporting to external buffer.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.Trie.buff_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":983
 * 
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         save data into binary file
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_43save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_42save[] = "\n        save data into binary file\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_43save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_42save(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_42save(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_fname) {
  FILE *__pyx_v_ptr_fw;
  PyObject *__pyx_v_bfname = 0;
  char *__pyx_v_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "cyac/trie.pyx":988
 *         """
 *         cdef FILE *ptr_fw
 *         cdef bytes bfname = fname.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_utf8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_v_bfname = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":989
 *         cdef FILE *ptr_fw
 *         cdef bytes bfname = fname.encode("utf8")
 *         cdef char* path = bfname             # <<<<<<<<<<<<<<
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:
 */
  if (unlikely(__pyx_v_bfname == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 989, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v_bfname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L1_error)
  __pyx_v_path = __pyx_t_4;

  /* "cyac/trie.pyx":990
 *         cdef bytes bfname = fname.encode("utf8")
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")             # <<<<<<<<<<<<<<
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)
 */
  __pyx_v_ptr_fw = fopen(__pyx_v_path, ((char const *)"wb"));

  /* "cyac/trie.pyx":991
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 */
  __pyx_t_5 = ((__pyx_v_ptr_fw == NULL) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cyac/trie.pyx":992
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)             # <<<<<<<<<<<<<<
 *         self.write(ptr_fw)
 *         fclose(ptr_fw)
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_open_file_s, __pyx_v_fname); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 992, __pyx_L1_error)

    /* "cyac/trie.pyx":991
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 */
  }

  /* "cyac/trie.pyx":993
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)             # <<<<<<<<<<<<<<
 *         fclose(ptr_fw)
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_ptr_fw); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyac/trie.pyx":994
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 *         fclose(ptr_fw)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _to_buff(self, void* buf):
 */
  (void)(fclose(__pyx_v_ptr_fw));

  /* "cyac/trie.pyx":983
 * 
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         save data into binary file
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.trie.Trie.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bfname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":996
 *         fclose(ptr_fw)
 * 
 *     cdef void _to_buff(self, void* buf):             # <<<<<<<<<<<<<<
 *         cdef int offset = 0
 * 
 */

static void __pyx_f_4cyac_4trie_4Trie__to_buff(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, void *__pyx_v_buf) {
  int __pyx_v_offset;
  char *__pyx_v_buff;
  int __pyx_v_size;
  int __pyx_v_val;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_to_buff", 0);

  /* "cyac/trie.pyx":997
 * 
 *     cdef void _to_buff(self, void* buf):
 *         cdef int offset = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef char* buff = <char*>buf
 */
  __pyx_v_offset = 0;

  /* "cyac/trie.pyx":999
 *         cdef int offset = 0
 * 
 *         cdef char* buff = <char*>buf             # <<<<<<<<<<<<<<
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))
 *         offset += sizeof(magic_number)
 */
  __pyx_v_buff = ((char *)__pyx_v_buf);

  /* "cyac/trie.pyx":1000
 * 
 *         cdef char* buff = <char*>buf
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))             # <<<<<<<<<<<<<<
 *         offset += sizeof(magic_number)
 * 
 */
  (void)(memcpy(__pyx_v_buff, ((void *)(&__pyx_v_4cyac_4util_magic_number)), (sizeof(__pyx_v_4cyac_4util_magic_number))));

  /* "cyac/trie.pyx":1001
 *         cdef char* buff = <char*>buf
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))
 *         offset += sizeof(magic_number)             # <<<<<<<<<<<<<<
 * 
 *         cdef int size = self.buff_size()
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(__pyx_v_4cyac_4util_magic_number)));

  /* "cyac/trie.pyx":1003
 *         offset += sizeof(magic_number)
 * 
 *         cdef int size = self.buff_size()             # <<<<<<<<<<<<<<
 *         memcpy(buff + offset, &size, sizeof(int))
 *         offset += sizeof(int)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_4;

  /* "cyac/trie.pyx":1004
 * 
 *         cdef int size = self.buff_size()
 *         memcpy(buff + offset, &size, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), (&__pyx_v_size), (sizeof(int))));

  /* "cyac/trie.pyx":1005
 *         cdef int size = self.buff_size()
 *         memcpy(buff + offset, &size, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.key_num, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1007
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.key_num, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->key_num)), (sizeof(int))));

  /* "cyac/trie.pyx":1008
 * 
 *         memcpy(buff + offset, <void*>&self.key_num, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.key_capacity, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1010
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.key_capacity, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->key_capacity)), (sizeof(int))));

  /* "cyac/trie.pyx":1011
 * 
 *         memcpy(buff + offset, <void*>&self.key_capacity, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.bheadF, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1013
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.bheadF, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->bheadF)), (sizeof(int))));

  /* "cyac/trie.pyx":1014
 * 
 *         memcpy(buff + offset, <void*>&self.bheadF, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.bheadC, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1016
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.bheadC, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->bheadC)), (sizeof(int))));

  /* "cyac/trie.pyx":1017
 * 
 *         memcpy(buff + offset, <void*>&self.bheadC, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.bheadO, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1019
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.bheadO, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->bheadO)), (sizeof(int))));

  /* "cyac/trie.pyx":1020
 * 
 *         memcpy(buff + offset, <void*>&self.bheadO, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.array_size, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1022
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.array_size, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->array_size)), (sizeof(int))));

  /* "cyac/trie.pyx":1023
 * 
 *         memcpy(buff + offset, <void*>&self.array_size, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.capacity, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1025
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.capacity, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->capacity)), (sizeof(int))));

  /* "cyac/trie.pyx":1026
 * 
 *         memcpy(buff + offset, <void*>&self.capacity, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         cdef int val = self.ordered
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1028
 *         offset += sizeof(int)
 * 
 *         cdef int val = self.ordered             # <<<<<<<<<<<<<<
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))
 *         offset += sizeof(int)
 */
  __pyx_t_5 = __pyx_v_self->ordered;
  __pyx_v_val = __pyx_t_5;

  /* "cyac/trie.pyx":1029
 * 
 *         cdef int val = self.ordered
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_val)), (sizeof(bool))));

  /* "cyac/trie.pyx":1030
 *         cdef int val = self.ordered
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         val = self.ignore_case
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1032
 *         offset += sizeof(int)
 * 
 *         val = self.ignore_case             # <<<<<<<<<<<<<<
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))
 *         offset += sizeof(int)
 */
  __pyx_t_5 = __pyx_v_self->ignore_case;
  __pyx_v_val = __pyx_t_5;

  /* "cyac/trie.pyx":1033
 * 
 *         val = self.ignore_case
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_val)), (sizeof(bool))));

  /* "cyac/trie.pyx":1034
 *         val = self.ignore_case
 *         memcpy(buff + offset, <void*>&val, sizeof(bool))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.max_trial, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1036
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.max_trial, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->max_trial)), (sizeof(int))));

  /* "cyac/trie.pyx":1037
 * 
 *         memcpy(buff + offset, <void*>&self.max_trial, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.leaf_size, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1039
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>&self.leaf_size, sizeof(int))             # <<<<<<<<<<<<<<
 *         offset += sizeof(int)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->leaf_size)), (sizeof(int))));

  /* "cyac/trie.pyx":1040
 * 
 *         memcpy(buff + offset, <void*>&self.leaf_size, sizeof(int))
 *         offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.array, sizeof(Node) * self.capacity)
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1042
 *         offset += sizeof(int)
 * 
 *         memcpy(buff + offset, <void*>self.array, sizeof(Node) * self.capacity)             # <<<<<<<<<<<<<<
 *         offset += sizeof(Node) * self.capacity
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->array), ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_self->capacity)));

  /* "cyac/trie.pyx":1043
 * 
 *         memcpy(buff + offset, <void*>self.array, sizeof(Node) * self.capacity)
 *         offset += sizeof(Node) * self.capacity             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.blocks, sizeof(Block) * (self.capacity >> 8))
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_self->capacity));

  /* "cyac/trie.pyx":1045
 *         offset += sizeof(Node) * self.capacity
 * 
 *         memcpy(buff + offset, <void*>self.blocks, sizeof(Block) * (self.capacity >> 8))             # <<<<<<<<<<<<<<
 *         offset += sizeof(Block) * (self.capacity >> 8)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->blocks), ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_self->capacity >> 8))));

  /* "cyac/trie.pyx":1046
 * 
 *         memcpy(buff + offset, <void*>self.blocks, sizeof(Block) * (self.capacity >> 8))
 *         offset += sizeof(Block) * (self.capacity >> 8)             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.leafs, sizeof(int) * self.key_capacity)
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_self->capacity >> 8)));

  /* "cyac/trie.pyx":1048
 *         offset += sizeof(Block) * (self.capacity >> 8)
 * 
 *         memcpy(buff + offset, <void*>self.leafs, sizeof(int) * self.key_capacity)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * self.key_capacity
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->leafs), ((sizeof(int)) * __pyx_v_self->key_capacity)));

  /* "cyac/trie.pyx":1049
 * 
 *         memcpy(buff + offset, <void*>self.leafs, sizeof(int) * self.key_capacity)
 *         offset += sizeof(int) * self.key_capacity             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>&self.reject, sizeof(int) * 257)
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_self->key_capacity));

  /* "cyac/trie.pyx":1051
 *         offset += sizeof(int) * self.key_capacity
 * 
 *         memcpy(buff + offset, <void*>&self.reject, sizeof(int) * 257)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_self->reject)), ((sizeof(int)) * 0x101)));

  /* "cyac/trie.pyx":996
 *         fclose(ptr_fw)
 * 
 *     cdef void _to_buff(self, void* buf):             # <<<<<<<<<<<<<<
 *         cdef int offset = 0
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("cyac.trie.Trie._to_buff", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cyac/trie.pyx":1054
 * 
 * 
 *     def to_buff(self, buff):             # <<<<<<<<<<<<<<
 *         """
 *         copy data into buff
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_45to_buff(PyObject *__pyx_v_self, PyObject *__pyx_v_buff); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_44to_buff[] = "\n        copy data into buff\n        Args:\n            buff: object satisfy Python buff protocol\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_45to_buff(PyObject *__pyx_v_self, PyObject *__pyx_v_buff) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_buff (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_44to_buff(((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_v_self), ((PyObject *)__pyx_v_buff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_44to_buff(struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_self, PyObject *__pyx_v_buff) {
  Py_buffer __pyx_v_view;
  void *__pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  void *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_buff", 0);

  /* "cyac/trie.pyx":1060
 *             buff: object satisfy Python buff protocol
 *         """
 *         check_buffer(buff)             # <<<<<<<<<<<<<<
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 */
  __pyx_f_4cyac_4util_check_buffer(__pyx_v_buff);

  /* "cyac/trie.pyx":1062
 *         check_buffer(buff)
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 */
  __pyx_t_1 = PyObject_GetBuffer(__pyx_v_buff, (&__pyx_v_view), PyBUF_WRITABLE); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1062, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cyac/trie.pyx":1063
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1063, __pyx_L1_error)

    /* "cyac/trie.pyx":1062
 *         check_buffer(buff)
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 */
  }

  /* "cyac/trie.pyx":1064
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:             # <<<<<<<<<<<<<<
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void *buf = view.buf
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_view.len); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "cyac/trie.pyx":1065
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")             # <<<<<<<<<<<<<<
 *         cdef void *buf = view.buf
 *         self._to_buff(buf)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1065, __pyx_L1_error)

    /* "cyac/trie.pyx":1064
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:             # <<<<<<<<<<<<<<
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void *buf = view.buf
 */
  }

  /* "cyac/trie.pyx":1066
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void *buf = view.buf             # <<<<<<<<<<<<<<
 *         self._to_buff(buf)
 *         PyBuffer_Release(&view)
 */
  __pyx_t_6 = __pyx_v_view.buf;
  __pyx_v_buf = __pyx_t_6;

  /* "cyac/trie.pyx":1067
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void *buf = view.buf
 *         self._to_buff(buf)             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(&view)
 * 
 */
  ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->__pyx_vtab)->_to_buff(__pyx_v_self, __pyx_v_buf);

  /* "cyac/trie.pyx":1068
 *         cdef void *buf = view.buf
 *         self._to_buff(buf)
 *         PyBuffer_Release(&view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  PyBuffer_Release((&__pyx_v_view));

  /* "cyac/trie.pyx":1054
 * 
 * 
 *     def to_buff(self, buff):             # <<<<<<<<<<<<<<
 *         """
 *         copy data into buff
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.trie.Trie.to_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":1074
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init trie from buff
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_4Trie_47from_buff(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_4trie_4Trie_46from_buff[] = "\n        init trie from buff\n        Args:\n            buff: object satisfy Python buff protocol https://docs.python.org/zh-cn/3/c-api/buffer.html\n            copy: whether copy data, by default, it copies data from buff\n        ";
static PyObject *__pyx_pw_4cyac_4trie_4Trie_47from_buff(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buff = 0;
  PyObject *__pyx_v_copy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_buff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_copy,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_copy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_buff") < 0)) __PYX_ERR(0, 1074, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = values[0];
    __pyx_v_copy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_buff", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1074, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.Trie.from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_4trie_4Trie_46from_buff(((PyTypeObject*)__pyx_v_cls), __pyx_v_buff, __pyx_v_copy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_4Trie_46from_buff(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_buff, PyObject *__pyx_v_copy) {
  Py_buffer *__pyx_v_view;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_trie = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_buff", 0);

  /* "cyac/trie.pyx":1081
 *             copy: whether copy data, by default, it copies data from buff
 *         """
 *         check_buffer(buff)             # <<<<<<<<<<<<<<
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:
 */
  __pyx_f_4cyac_4util_check_buffer(__pyx_v_buff);

  /* "cyac/trie.pyx":1082
 *         """
 *         check_buffer(buff)
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))             # <<<<<<<<<<<<<<
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:
 *             free(view)
 */
  __pyx_v_view = ((Py_buffer *)malloc((sizeof(Py_buffer))));

  /* "cyac/trie.pyx":1083
 *         check_buffer(buff)
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *             free(view)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 */
  __pyx_t_1 = PyObject_GetBuffer(__pyx_v_buff, __pyx_v_view, PyBUF_SIMPLE); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cyac/trie.pyx":1084
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:
 *             free(view)             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 */
    free(__pyx_v_view);

    /* "cyac/trie.pyx":1085
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:
 *             free(view)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 *         if copy:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1085, __pyx_L1_error)

    /* "cyac/trie.pyx":1083
 *         check_buffer(buff)
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *             free(view)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 */
  }

  /* "cyac/trie.pyx":1086
 *             free(view)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)             # <<<<<<<<<<<<<<
 *         if copy:
 *             trie.buff = NULL
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_copy); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1086, __pyx_L1_error)
  __pyx_t_3 = ((PyObject *)__pyx_f_4cyac_4trie_trie_from_buff(__pyx_v_view->buf, __pyx_v_view->len, __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_trie = ((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cyac/trie.pyx":1087
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 *         if copy:             # <<<<<<<<<<<<<<
 *             trie.buff = NULL
 *             PyBuffer_Release(view)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_copy); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1087, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "cyac/trie.pyx":1088
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 *         if copy:
 *             trie.buff = NULL             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             free(view)
 */
    __pyx_v_trie->buff = NULL;

    /* "cyac/trie.pyx":1089
 *         if copy:
 *             trie.buff = NULL
 *             PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *             free(view)
 *         else:
 */
    PyBuffer_Release(__pyx_v_view);

    /* "cyac/trie.pyx":1090
 *             trie.buff = NULL
 *             PyBuffer_Release(view)
 *             free(view)             # <<<<<<<<<<<<<<
 *         else:
 *             trie.buff = view
 */
    free(__pyx_v_view);

    /* "cyac/trie.pyx":1087
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 *         if copy:             # <<<<<<<<<<<<<<
 *             trie.buff = NULL
 *             PyBuffer_Release(view)
 */
    goto __pyx_L4;
  }

  /* "cyac/trie.pyx":1092
 *             free(view)
 *         else:
 *             trie.buff = view             # <<<<<<<<<<<<<<
 *         return trie
 * 
 */
  /*else*/ {
    __pyx_v_trie->buff = __pyx_v_view;
  }
  __pyx_L4:;

  /* "cyac/trie.pyx":1093
 *         else:
 *             trie.buff = view
 *         return trie             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_trie));
  __pyx_r = ((PyObject *)__pyx_v_trie);
  goto __pyx_L0;

  /* "cyac/trie.pyx":1074
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init trie from buff
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.trie.Trie.from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trie);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pyx":1096
 * 
 * 
 * cdef Trie trie_from_buff(void* buf, int buf_size, bool copy):             # <<<<<<<<<<<<<<
 *     cdef int offset = 0
 *     cdef Trie trie = new_object(Trie)
 */

static struct __pyx_obj_4cyac_4trie_Trie *__pyx_f_4cyac_4trie_trie_from_buff(void *__pyx_v_buf, int __pyx_v_buf_size, bool __pyx_v_copy) {
  int __pyx_v_offset;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_trie = 0;
  int __pyx_v_magic;
  int __pyx_v_size;
  char *__pyx_v_buff;
  int __pyx_v_value;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trie_from_buff", 0);

  /* "cyac/trie.pyx":1097
 * 
 * cdef Trie trie_from_buff(void* buf, int buf_size, bool copy):
 *     cdef int offset = 0             # <<<<<<<<<<<<<<
 *     cdef Trie trie = new_object(Trie)
 *     cdef int magic, size
 */
  __pyx_v_offset = 0;

  /* "cyac/trie.pyx":1098
 * cdef Trie trie_from_buff(void* buf, int buf_size, bool copy):
 *     cdef int offset = 0
 *     cdef Trie trie = new_object(Trie)             # <<<<<<<<<<<<<<
 *     cdef int magic, size
 *     cdef char* buff = <char*>buf
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_new_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_ptype_4cyac_4trie_Trie)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_ptype_4cyac_4trie_Trie));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cyac_4trie_Trie))))) __PYX_ERR(0, 1098, __pyx_L1_error)
  __pyx_v_trie = ((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/trie.pyx":1100
 *     cdef Trie trie = new_object(Trie)
 *     cdef int magic, size
 *     cdef char* buff = <char*>buf             # <<<<<<<<<<<<<<
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:
 */
  __pyx_v_buff = ((char *)__pyx_v_buf);

  /* "cyac/trie.pyx":1101
 *     cdef int magic, size
 *     cdef char* buff = <char*>buf
 *     memcpy(buff, <void*>&magic, sizeof(magic))             # <<<<<<<<<<<<<<
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")
 */
  (void)(memcpy(__pyx_v_buff, ((void *)(&__pyx_v_magic)), (sizeof(__pyx_v_magic))));

  /* "cyac/trie.pyx":1102
 *     cdef char* buff = <char*>buf
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)
 */
  __pyx_t_4 = ((__pyx_v_magic != __pyx_v_4cyac_4util_magic_number) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "cyac/trie.pyx":1103
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")             # <<<<<<<<<<<<<<
 *     offset += sizeof(magic)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1103, __pyx_L1_error)

    /* "cyac/trie.pyx":1102
 *     cdef char* buff = <char*>buf
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)
 */
  }

  /* "cyac/trie.pyx":1104
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(&size, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(__pyx_v_magic)));

  /* "cyac/trie.pyx":1106
 *     offset += sizeof(magic)
 * 
 *     memcpy(&size, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 *     if size > buf_size:
 */
  (void)(memcpy((&__pyx_v_size), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1107
 * 
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1108
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)
 *     if size > buf_size:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, buf size is not correct")
 * 
 */
  __pyx_t_4 = ((__pyx_v_size > __pyx_v_buf_size) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "cyac/trie.pyx":1109
 *     offset += sizeof(int)
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")             # <<<<<<<<<<<<<<
 * 
 *     cdef int value = 0
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1109, __pyx_L1_error)

    /* "cyac/trie.pyx":1108
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)
 *     if size > buf_size:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, buf size is not correct")
 * 
 */
  }

  /* "cyac/trie.pyx":1111
 *         raise Exception("invalid data, buf size is not correct")
 * 
 *     cdef int value = 0             # <<<<<<<<<<<<<<
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.key_num = value
 */
  __pyx_v_value = 0;

  /* "cyac/trie.pyx":1112
 * 
 *     cdef int value = 0
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.key_num = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1113
 *     cdef int value = 0
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.key_num = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->key_num = __pyx_v_value;

  /* "cyac/trie.pyx":1114
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.key_num = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1116
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.key_capacity = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1117
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.key_capacity = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->key_capacity = __pyx_v_value;

  /* "cyac/trie.pyx":1118
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.key_capacity = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1120
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.bheadF = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1121
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadF = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->bheadF = __pyx_v_value;

  /* "cyac/trie.pyx":1122
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadF = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1124
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.bheadC = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1125
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadC = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->bheadC = __pyx_v_value;

  /* "cyac/trie.pyx":1126
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadC = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1128
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.bheadO = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1129
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadO = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->bheadO = __pyx_v_value;

  /* "cyac/trie.pyx":1130
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.bheadO = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1132
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.array_size = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1133
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.array_size = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->array_size = __pyx_v_value;

  /* "cyac/trie.pyx":1134
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.array_size = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1136
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.capacity = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1137
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.capacity = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->capacity = __pyx_v_value;

  /* "cyac/trie.pyx":1138
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.capacity = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1140
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))             # <<<<<<<<<<<<<<
 *     trie.ordered = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(bool))));

  /* "cyac/trie.pyx":1141
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 *     trie.ordered = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->ordered = __pyx_v_value;

  /* "cyac/trie.pyx":1142
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 *     trie.ordered = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1144
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))             # <<<<<<<<<<<<<<
 *     trie.ignore_case = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(bool))));

  /* "cyac/trie.pyx":1145
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 *     trie.ignore_case = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->ignore_case = __pyx_v_value;

  /* "cyac/trie.pyx":1146
 *     memcpy(<void*>&value, buff + offset, sizeof(bool))
 *     trie.ignore_case = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1148
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.max_trial = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1149
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.max_trial = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->max_trial = __pyx_v_value;

  /* "cyac/trie.pyx":1150
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.max_trial = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1152
 *     offset += sizeof(int)
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     trie.leaf_size = value
 *     offset += sizeof(int)
 */
  (void)(memcpy(((void *)(&__pyx_v_value)), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/trie.pyx":1153
 * 
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.leaf_size = value             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 * 
 */
  __pyx_v_trie->leaf_size = __pyx_v_value;

  /* "cyac/trie.pyx":1154
 *     memcpy(<void*>&value, buff + offset, sizeof(int))
 *     trie.leaf_size = value
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 * 
 *     if copy:
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/trie.pyx":1156
 *     offset += sizeof(int)
 * 
 *     if copy:             # <<<<<<<<<<<<<<
 *         trie.array = <Node*>malloc(sizeof(Node) * trie.capacity)
 *         memcpy(<void*>trie.array, buff + offset, sizeof(Node) * trie.capacity)
 */
  __pyx_t_4 = (__pyx_v_copy != 0);
  if (__pyx_t_4) {

    /* "cyac/trie.pyx":1157
 * 
 *     if copy:
 *         trie.array = <Node*>malloc(sizeof(Node) * trie.capacity)             # <<<<<<<<<<<<<<
 *         memcpy(<void*>trie.array, buff + offset, sizeof(Node) * trie.capacity)
 *         offset += sizeof(Node) * trie.capacity
 */
    __pyx_v_trie->array = ((struct __pyx_t_4cyac_4trie_Node *)malloc(((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_trie->capacity)));

    /* "cyac/trie.pyx":1158
 *     if copy:
 *         trie.array = <Node*>malloc(sizeof(Node) * trie.capacity)
 *         memcpy(<void*>trie.array, buff + offset, sizeof(Node) * trie.capacity)             # <<<<<<<<<<<<<<
 *         offset += sizeof(Node) * trie.capacity
 * 
 */
    (void)(memcpy(((void *)__pyx_v_trie->array), (__pyx_v_buff + __pyx_v_offset), ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_trie->capacity)));

    /* "cyac/trie.pyx":1159
 *         trie.array = <Node*>malloc(sizeof(Node) * trie.capacity)
 *         memcpy(<void*>trie.array, buff + offset, sizeof(Node) * trie.capacity)
 *         offset += sizeof(Node) * trie.capacity             # <<<<<<<<<<<<<<
 * 
 *         trie.blocks = <Block*>malloc(sizeof(Block) * (trie.capacity >> 8))
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_trie->capacity));

    /* "cyac/trie.pyx":1161
 *         offset += sizeof(Node) * trie.capacity
 * 
 *         trie.blocks = <Block*>malloc(sizeof(Block) * (trie.capacity >> 8))             # <<<<<<<<<<<<<<
 *         memcpy(<void*>trie.blocks, buff + offset, sizeof(Block) * (trie.capacity >> 8))
 *         offset += sizeof(Block) * (trie.capacity >> 8)
 */
    __pyx_v_trie->blocks = ((struct __pyx_t_4cyac_4trie_Block *)malloc(((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_trie->capacity >> 8))));

    /* "cyac/trie.pyx":1162
 * 
 *         trie.blocks = <Block*>malloc(sizeof(Block) * (trie.capacity >> 8))
 *         memcpy(<void*>trie.blocks, buff + offset, sizeof(Block) * (trie.capacity >> 8))             # <<<<<<<<<<<<<<
 *         offset += sizeof(Block) * (trie.capacity >> 8)
 * 
 */
    (void)(memcpy(((void *)__pyx_v_trie->blocks), (__pyx_v_buff + __pyx_v_offset), ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_trie->capacity >> 8))));

    /* "cyac/trie.pyx":1163
 *         trie.blocks = <Block*>malloc(sizeof(Block) * (trie.capacity >> 8))
 *         memcpy(<void*>trie.blocks, buff + offset, sizeof(Block) * (trie.capacity >> 8))
 *         offset += sizeof(Block) * (trie.capacity >> 8)             # <<<<<<<<<<<<<<
 * 
 *         trie.leafs = <int*>malloc(sizeof(int) * trie.key_capacity)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_trie->capacity >> 8)));

    /* "cyac/trie.pyx":1165
 *         offset += sizeof(Block) * (trie.capacity >> 8)
 * 
 *         trie.leafs = <int*>malloc(sizeof(int) * trie.key_capacity)             # <<<<<<<<<<<<<<
 *         memcpy(<void*>trie.leafs, buff + offset, sizeof(int) * trie.key_capacity)
 *         offset += sizeof(int) * trie.key_capacity
 */
    __pyx_v_trie->leafs = ((int *)malloc(((sizeof(int)) * __pyx_v_trie->key_capacity)));

    /* "cyac/trie.pyx":1166
 * 
 *         trie.leafs = <int*>malloc(sizeof(int) * trie.key_capacity)
 *         memcpy(<void*>trie.leafs, buff + offset, sizeof(int) * trie.key_capacity)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * trie.key_capacity
 *     else:
 */
    (void)(memcpy(((void *)__pyx_v_trie->leafs), (__pyx_v_buff + __pyx_v_offset), ((sizeof(int)) * __pyx_v_trie->key_capacity)));

    /* "cyac/trie.pyx":1167
 *         trie.leafs = <int*>malloc(sizeof(int) * trie.key_capacity)
 *         memcpy(<void*>trie.leafs, buff + offset, sizeof(int) * trie.key_capacity)
 *         offset += sizeof(int) * trie.key_capacity             # <<<<<<<<<<<<<<
 *     else:
 *         trie.array =  <Node*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_trie->key_capacity));

    /* "cyac/trie.pyx":1156
 *     offset += sizeof(int)
 * 
 *     if copy:             # <<<<<<<<<<<<<<
 *         trie.array = <Node*>malloc(sizeof(Node) * trie.capacity)
 *         memcpy(<void*>trie.array, buff + offset, sizeof(Node) * trie.capacity)
 */
    goto __pyx_L5;
  }

  /* "cyac/trie.pyx":1169
 *         offset += sizeof(int) * trie.key_capacity
 *     else:
 *         trie.array =  <Node*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(Node) * trie.capacity
 * 
 */
  /*else*/ {
    __pyx_v_trie->array = ((struct __pyx_t_4cyac_4trie_Node *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/trie.pyx":1170
 *     else:
 *         trie.array =  <Node*>(buff + offset)
 *         offset += sizeof(Node) * trie.capacity             # <<<<<<<<<<<<<<
 * 
 *         trie.blocks = <Block*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Node)) * __pyx_v_trie->capacity));

    /* "cyac/trie.pyx":1172
 *         offset += sizeof(Node) * trie.capacity
 * 
 *         trie.blocks = <Block*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(Block) * (trie.capacity >> 8)
 * 
 */
    __pyx_v_trie->blocks = ((struct __pyx_t_4cyac_4trie_Block *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/trie.pyx":1173
 * 
 *         trie.blocks = <Block*>(buff + offset)
 *         offset += sizeof(Block) * (trie.capacity >> 8)             # <<<<<<<<<<<<<<
 * 
 *         trie.leafs = <int*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_4trie_Block)) * (__pyx_v_trie->capacity >> 8)));

    /* "cyac/trie.pyx":1175
 *         offset += sizeof(Block) * (trie.capacity >> 8)
 * 
 *         trie.leafs = <int*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * trie.key_capacity
 * 
 */
    __pyx_v_trie->leafs = ((int *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/trie.pyx":1176
 * 
 *         trie.leafs = <int*>(buff + offset)
 *         offset += sizeof(int) * trie.key_capacity             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_trie->key_capacity));
  }
  __pyx_L5:;

  /* "cyac/trie.pyx":1179
 * 
 * 
 *     memcpy(<void*>&trie.reject, buff + offset, sizeof(int) * 257)             # <<<<<<<<<<<<<<
 *     return trie
 * 
 */
  (void)(memcpy(((void *)(&__pyx_v_trie->reject)), (__pyx_v_buff + __pyx_v_offset), ((sizeof(int)) * 0x101)));

  /* "cyac/trie.pyx":1180
 * 
 *     memcpy(<void*>&trie.reject, buff + offset, sizeof(int) * 257)
 *     return trie             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_trie));
  __pyx_r = __pyx_v_trie;
  goto __pyx_L0;

  /* "cyac/trie.pyx":1096
 * 
 * 
 * cdef Trie trie_from_buff(void* buf, int buf_size, bool copy):             # <<<<<<<<<<<<<<
 *     cdef int offset = 0
 *     cdef Trie trie = new_object(Trie)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.trie.trie_from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trie);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utf8.pxd":4
 * # distutils: language=c++
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 *     cdef int i
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4utf8_iter_unicode(__pyx_t_4cyac_4utf8_byte_t *__pyx_v_src, int *__pyx_v_ret, int *__pyx_v_char_byte_num) {
  int __pyx_v_result;
  CYTHON_UNUSED int __pyx_v_i;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_leading_byte;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_c;
  int __pyx_v_len_;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("iter_unicode", 0);

  /* "utf8.pxd":5
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):
 *     cdef int result = 0             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef byte_t leading_byte, c
 */
  __pyx_v_result = 0;

  /* "utf8.pxd":9
 *     cdef byte_t leading_byte, c
 *     cdef int len_
 *     leading_byte = src[0]             # <<<<<<<<<<<<<<
 *     src += 1
 *     if leading_byte == 0:
 */
  __pyx_v_leading_byte = (__pyx_v_src[0]);

  /* "utf8.pxd":10
 *     cdef int len_
 *     leading_byte = src[0]
 *     src += 1             # <<<<<<<<<<<<<<
 *     if leading_byte == 0:
 *         ret[0] = 0
 */
  __pyx_v_src = (__pyx_v_src + 1);

  /* "utf8.pxd":11
 *     leading_byte = src[0]
 *     src += 1
 *     if leading_byte == 0:             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 */
  __pyx_t_1 = ((__pyx_v_leading_byte == 0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":12
 *     src += 1
 *     if leading_byte == 0:
 *         ret[0] = 0             # <<<<<<<<<<<<<<
 *         char_byte_num[0] = 1
 *         return src
 */
    (__pyx_v_ret[0]) = 0;

    /* "utf8.pxd":13
 *     if leading_byte == 0:
 *         ret[0] = 0
 *         char_byte_num[0] = 1             # <<<<<<<<<<<<<<
 *         return src
 *     if leading_byte < 0x80:
 */
    (__pyx_v_char_byte_num[0]) = 1;

    /* "utf8.pxd":14
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 *         return src             # <<<<<<<<<<<<<<
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte
 */
    __pyx_r = __pyx_v_src;
    goto __pyx_L0;

    /* "utf8.pxd":11
 *     leading_byte = src[0]
 *     src += 1
 *     if leading_byte == 0:             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 */
  }

  /* "utf8.pxd":15
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte < 0x80:             # <<<<<<<<<<<<<<
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 */
  __pyx_t_1 = ((__pyx_v_leading_byte < 0x80) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":16
 *         return src
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte             # <<<<<<<<<<<<<<
 *         char_byte_num[0] = 1
 *         return src
 */
    (__pyx_v_ret[0]) = __pyx_v_leading_byte;

    /* "utf8.pxd":17
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1             # <<<<<<<<<<<<<<
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:
 */
    (__pyx_v_char_byte_num[0]) = 1;

    /* "utf8.pxd":18
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 *         return src             # <<<<<<<<<<<<<<
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2
 */
    __pyx_r = __pyx_v_src;
    goto __pyx_L0;

    /* "utf8.pxd":15
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte < 0x80:             # <<<<<<<<<<<<<<
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 */
  }

  /* "utf8.pxd":19
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:             # <<<<<<<<<<<<<<
 *         len_ = 2
 *         result = leading_byte & 0x1f
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xe0) == 0xc0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":20
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:
 */
    __pyx_v_len_ = 2;

    /* "utf8.pxd":21
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2
 *         result = leading_byte & 0x1f             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x1f);

    /* "utf8.pxd":19
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:             # <<<<<<<<<<<<<<
 *         len_ = 2
 *         result = leading_byte & 0x1f
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":22
 *         len_ = 2
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:             # <<<<<<<<<<<<<<
 *         len_ = 3
 *         result = leading_byte & 0x0f
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xf0) == 0xe0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":23
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:
 */
    __pyx_v_len_ = 3;

    /* "utf8.pxd":24
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3
 *         result = leading_byte & 0x0f             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x0f);

    /* "utf8.pxd":22
 *         len_ = 2
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:             # <<<<<<<<<<<<<<
 *         len_ = 3
 *         result = leading_byte & 0x0f
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":25
 *         len_ = 3
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:             # <<<<<<<<<<<<<<
 *         len_ = 4
 *         result = leading_byte & 0x07
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xf8) == 0xf0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":26
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:
 */
    __pyx_v_len_ = 4;

    /* "utf8.pxd":27
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4
 *         result = leading_byte & 0x07             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x07);

    /* "utf8.pxd":25
 *         len_ = 3
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:             # <<<<<<<<<<<<<<
 *         len_ = 4
 *         result = leading_byte & 0x07
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":28
 *         len_ = 4
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:             # <<<<<<<<<<<<<<
 *         len_ = 5
 *         result = leading_byte & 0x03
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xfc) == 0xf8) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":29
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:
 */
    __pyx_v_len_ = 5;

    /* "utf8.pxd":30
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5
 *         result = leading_byte & 0x03             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x03);

    /* "utf8.pxd":28
 *         len_ = 4
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:             # <<<<<<<<<<<<<<
 *         len_ = 5
 *         result = leading_byte & 0x03
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":31
 *         len_ = 5
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:             # <<<<<<<<<<<<<<
 *         len_ = 6
 *         result = leading_byte & 0x01
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xfe) == 0xfc) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":32
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x01
 *     else:
 */
    __pyx_v_len_ = 6;

    /* "utf8.pxd":33
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6
 *         result = leading_byte & 0x01             # <<<<<<<<<<<<<<
 *     else:
 *         len_ = 1
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x01);

    /* "utf8.pxd":31
 *         len_ = 5
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:             # <<<<<<<<<<<<<<
 *         len_ = 6
 *         result = leading_byte & 0x01
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":35
 *         result = leading_byte & 0x01
 *     else:
 *         len_ = 1             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         return NULL
 */
  /*else*/ {
    __pyx_v_len_ = 1;

    /* "utf8.pxd":36
 *     else:
 *         len_ = 1
 *         ret[0] = 0             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
    (__pyx_v_ret[0]) = 0;

    /* "utf8.pxd":37
 *         len_ = 1
 *         ret[0] = 0
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     char_byte_num[0] = len_
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }
  __pyx_L5:;

  /* "utf8.pxd":39
 *         return NULL
 * 
 *     char_byte_num[0] = len_             # <<<<<<<<<<<<<<
 *     for i in range(len_ - 1):
 *         c = src[0]
 */
  (__pyx_v_char_byte_num[0]) = __pyx_v_len_;

  /* "utf8.pxd":40
 * 
 *     char_byte_num[0] = len_
 *     for i in range(len_ - 1):             # <<<<<<<<<<<<<<
 *         c = src[0]
 *         src += 1
 */
  __pyx_t_2 = (__pyx_v_len_ - 1);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "utf8.pxd":41
 *     char_byte_num[0] = len_
 *     for i in range(len_ - 1):
 *         c = src[0]             # <<<<<<<<<<<<<<
 *         src += 1
 *         result <<= 6
 */
    __pyx_v_c = (__pyx_v_src[0]);

    /* "utf8.pxd":42
 *     for i in range(len_ - 1):
 *         c = src[0]
 *         src += 1             # <<<<<<<<<<<<<<
 *         result <<= 6
 *         result += c & 0x3f
 */
    __pyx_v_src = (__pyx_v_src + 1);

    /* "utf8.pxd":43
 *         c = src[0]
 *         src += 1
 *         result <<= 6             # <<<<<<<<<<<<<<
 *         result += c & 0x3f
 *     ret[0] = result
 */
    __pyx_v_result = (__pyx_v_result << 6);

    /* "utf8.pxd":44
 *         src += 1
 *         result <<= 6
 *         result += c & 0x3f             # <<<<<<<<<<<<<<
 *     ret[0] = result
 *     return src
 */
    __pyx_v_result = (__pyx_v_result + (__pyx_v_c & 0x3f));
  }

  /* "utf8.pxd":45
 *         result <<= 6
 *         result += c & 0x3f
 *     ret[0] = result             # <<<<<<<<<<<<<<
 *     return src
 * 
 */
  (__pyx_v_ret[0]) = __pyx_v_result;

  /* "utf8.pxd":46
 *         result += c & 0x3f
 *     ret[0] = result
 *     return src             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_src;
  goto __pyx_L0;

  /* "utf8.pxd":4
 * # distutils: language=c++
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utf8.pxd":49
 * 
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):             # <<<<<<<<<<<<<<
 *     if c == 0:
 *         return utf8_dst
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4utf8_encode_unicode(int __pyx_v_c, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_utf8_dst) {
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_ch;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("encode_unicode", 0);

  /* "utf8.pxd":50
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:             # <<<<<<<<<<<<<<
 *         return utf8_dst
 *     cdef byte_t ch
 */
  __pyx_t_1 = ((__pyx_v_c == 0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":51
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:
 *         return utf8_dst             # <<<<<<<<<<<<<<
 *     cdef byte_t ch
 *     if c < 0x00080:
 */
    __pyx_r = __pyx_v_utf8_dst;
    goto __pyx_L0;

    /* "utf8.pxd":50
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:             # <<<<<<<<<<<<<<
 *         return utf8_dst
 *     cdef byte_t ch
 */
  }

  /* "utf8.pxd":53
 *         return utf8_dst
 *     cdef byte_t ch
 *     if c < 0x00080:             # <<<<<<<<<<<<<<
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x00080) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":54
 *     cdef byte_t ch
 *     if c < 0x00080:
 *         ch = (c & 0xFF);             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:
 */
    __pyx_v_ch = (__pyx_v_c & 0xFF);

    /* "utf8.pxd":55
 *     if c < 0x00080:
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":53
 *         return utf8_dst
 *     cdef byte_t ch
 *     if c < 0x00080:             # <<<<<<<<<<<<<<
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":56
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:             # <<<<<<<<<<<<<<
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x00800) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":57
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0xC0 + ((__pyx_v_c >> 6) & 0x1F));

    /* "utf8.pxd":58
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":59
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":60
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":56
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:             # <<<<<<<<<<<<<<
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":61
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:             # <<<<<<<<<<<<<<
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x10000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":62
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 */
    __pyx_v_ch = (0xE0 + ((__pyx_v_c >> 12) & 0x0F));

    /* "utf8.pxd":63
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":64
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":65
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":66
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":67
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":61
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:             # <<<<<<<<<<<<<<
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":68
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:             # <<<<<<<<<<<<<<
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x200000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":69
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0xF0 + ((__pyx_v_c >> 18) & 0x07));

    /* "utf8.pxd":70
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":71
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":72
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":73
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":74
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":75
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":76
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":68
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:             # <<<<<<<<<<<<<<
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":77
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:             # <<<<<<<<<<<<<<
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x8000000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":78
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 */
    __pyx_v_ch = (0xF8 + ((__pyx_v_c >> 24) & 0x03));

    /* "utf8.pxd":79
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":80
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 18) & 0x3F));

    /* "utf8.pxd":81
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":82
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":83
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":84
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":85
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":86
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     else:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":87
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":77
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:             # <<<<<<<<<<<<<<
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":89
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 */
  /*else*/ {
    __pyx_v_ch = (0xFC + ((__pyx_v_c >> 30) & 0x01));

    /* "utf8.pxd":90
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":91
 *         ch = (0xFC + ((c >> 30) & 0x01))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 24) & 0x3F));

    /* "utf8.pxd":92
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":93
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 18) & 0x3F));

    /* "utf8.pxd":94
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":95
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":96
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":97
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":98
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":99
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 * 
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":100
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 * 
 *     return utf8_dst
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);
  }
  __pyx_L4:;

  /* "utf8.pxd":102
 *         utf8_dst[0]=(ch); utf8_dst += 1
 * 
 *     return utf8_dst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_utf8_dst;
  goto __pyx_L0;

  /* "utf8.pxd":49
 * 
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):             # <<<<<<<<<<<<<<
 *     if c == 0:
 *         return utf8_dst
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "xstring.pxd":28
 *     cpdef int char_at(self, int i)
 * 
 *     cdef inline int char_byte_num(self, int i):             # <<<<<<<<<<<<<<
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 */

static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_byte_num", 0);

  /* "xstring.pxd":29
 * 
 *     cdef inline int char_byte_num(self, int i):
 *         return self.char_offsets[i+1] - self.char_offsets[i]             # <<<<<<<<<<<<<<
 * 
 * cdef class ignore_case_alignment(object):
 */
  __pyx_r = ((__pyx_v_self->char_offsets[(__pyx_v_i + 1)]) - (__pyx_v_self->char_offsets[__pyx_v_i]));
  goto __pyx_L0;

  /* "xstring.pxd":28
 *     cpdef int char_at(self, int i)
 * 
 *     cdef inline int char_byte_num(self, int i):             # <<<<<<<<<<<<<<
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pxd":28
 *     unsigned short flags
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):             # <<<<<<<<<<<<<<
 *     return <bytes>ptr[:size]
 * 
 */

static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cyac_4trie_array_to_bytes(char *__pyx_v_ptr, int __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_to_bytes", 0);

  /* "cyac/trie.pxd":29
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):
 *     return <bytes>ptr[:size]             # <<<<<<<<<<<<<<
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_ptr + 0, __pyx_v_size - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/trie.pxd":28
 *     unsigned short flags
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):             # <<<<<<<<<<<<<<
 *     return <bytes>ptr[:size]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_ptr;
  int __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_to_bytes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("array_to_bytes", 1, 2, 2, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array_to_bytes") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ptr = __Pyx_PyObject_AsWritableString(values[0]); if (unlikely((!__pyx_v_ptr) && PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array_to_bytes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_4trie_array_to_bytes(__pyx_self, __pyx_v_ptr, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_array_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_ptr, int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_to_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cyac_4trie_array_to_bytes(__pyx_v_ptr, __pyx_v_size, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pxd":31
 *     return <bytes>ptr[:size]
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):             # <<<<<<<<<<<<<<
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 */

static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE char *__pyx_f_4cyac_4trie_bytes_to_array(PyObject *__pyx_v_data, int __pyx_v_capacity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  char *__pyx_v_ptr;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_array", 0);

  /* "cyac/trie.pxd":32
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 *     cdef char* ptr = <char*> malloc(capacity)             # <<<<<<<<<<<<<<
 *     memcpy(ptr, <char *>data, len(data))
 *     return ptr
 */
  __pyx_v_ptr = ((char *)malloc(__pyx_v_capacity));

  /* "cyac/trie.pxd":33
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))             # <<<<<<<<<<<<<<
 *     return ptr
 * 
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_AsWritableString(__pyx_v_data); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 33, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 33, __pyx_L1_error)
  (void)(memcpy(__pyx_v_ptr, ((char *)__pyx_t_1), __pyx_t_2));

  /* "cyac/trie.pxd":34
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 *     return ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ptr;
  goto __pyx_L0;

  /* "cyac/trie.pxd":31
 *     return <bytes>ptr[:size]
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):             # <<<<<<<<<<<<<<
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_v_capacity;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bytes_to_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_capacity,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_capacity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bytes_to_array", 1, 2, 2, 1); __PYX_ERR(1, 31, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bytes_to_array") < 0)) __PYX_ERR(1, 31, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_data = ((PyObject*)values[0]);
    __pyx_v_capacity = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_capacity == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bytes_to_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 31, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_2bytes_to_array(__pyx_self, __pyx_v_data, __pyx_v_capacity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_2bytes_to_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, int __pyx_v_capacity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_array", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_f_4cyac_4trie_bytes_to_array(__pyx_v_data, __pyx_v_capacity, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/trie.pxd":37
 * 
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):             # <<<<<<<<<<<<<<
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_offset(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align, struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs, int __pyx_v_byte_idx) {
  int __pyx_v_char_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("ignore_case_offset", 0);

  /* "cyac/trie.pxd":38
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]             # <<<<<<<<<<<<<<
 *     if align is None:
 *         return char_offset
 */
  __pyx_v_char_offset = (__pyx_v_xs->char_idx_of_byte[__pyx_v_byte_idx]);

  /* "cyac/trie.pxd":39
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_align) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "cyac/trie.pxd":40
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 *         return char_offset             # <<<<<<<<<<<<<<
 *     return align.lowercase_char_index_mapping[char_offset]
 * 
 */
    __pyx_r = __pyx_v_char_offset;
    goto __pyx_L0;

    /* "cyac/trie.pxd":39
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]
 */
  }

  /* "cyac/trie.pxd":41
 *     if align is None:
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]             # <<<<<<<<<<<<<<
 * 
 * cdef class Trie(object):
 */
  __pyx_r = (__pyx_v_align->lowercase_char_index_mapping[__pyx_v_char_offset]);
  goto __pyx_L0;

  /* "cyac/trie.pxd":37
 * 
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):             # <<<<<<<<<<<<<<
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4cyac_4trie_Trie __pyx_vtable_4cyac_4trie_Trie;

static PyObject *__pyx_tp_new_4cyac_4trie_Trie(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4cyac_4trie_Trie *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cyac_4trie_Trie *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cyac_4trie_Trie;
  if (unlikely(__pyx_pw_4cyac_4trie_4Trie_5__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cyac_4trie_Trie(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cyac_4trie_4Trie_26__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_4cyac_4trie_Trie(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_4cyac_4trie_4Trie_key_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cyac_4trie_4Trie_7key_num_1__get__(o);
}

static PyObject *__pyx_getprop_4cyac_4trie_4Trie_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cyac_4trie_4Trie_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_4cyac_4trie_Trie[] = {
  {"arr_size", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_1arr_size, METH_NOARGS, 0},
  {"insert", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_11insert, METH_O, __pyx_doc_4cyac_4trie_4Trie_10insert},
  {"remove", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_13remove, METH_O, __pyx_doc_4cyac_4trie_4Trie_12remove},
  {"get", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_15get, METH_O, __pyx_doc_4cyac_4trie_4Trie_14get},
  {"prefix", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_17prefix, METH_O, __pyx_doc_4cyac_4trie_4Trie_16prefix},
  {"predict", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_20predict, METH_O, __pyx_doc_4cyac_4trie_4Trie_19predict},
  {"items", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_23items, METH_NOARGS, __pyx_doc_4cyac_4trie_4Trie_22items},
  {"match_longest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_4trie_4Trie_28match_longest, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_4trie_4Trie_27match_longest},
  {"replace_longest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_4trie_4Trie_31replace_longest, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_4trie_4Trie_30replace_longest},
  {"_dump_array", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_33_dump_array, METH_O, __pyx_doc_4cyac_4trie_4Trie_32_dump_array},
  {"__reduce__", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_35__reduce__, METH_NOARGS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_37__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_39__setstate__, METH_O, 0},
  {"buff_size", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_41buff_size, METH_NOARGS, __pyx_doc_4cyac_4trie_4Trie_40buff_size},
  {"save", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_43save, METH_O, __pyx_doc_4cyac_4trie_4Trie_42save},
  {"to_buff", (PyCFunction)__pyx_pw_4cyac_4trie_4Trie_45to_buff, METH_O, __pyx_doc_4cyac_4trie_4Trie_44to_buff},
  {"from_buff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_4trie_4Trie_47from_buff, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_4trie_4Trie_46from_buff},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cyac_4trie_Trie[] = {
  {(char *)"key_num", __pyx_getprop_4cyac_4trie_4Trie_key_num, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop_4cyac_4trie_4Trie_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Trie = {
  __pyx_pw_4cyac_4trie_4Trie_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_4cyac_4trie_Trie, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_4cyac_4trie_4Trie_7__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Trie = {
  __pyx_pw_4cyac_4trie_4Trie_3__len__, /*mp_length*/
  __pyx_pw_4cyac_4trie_4Trie_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_4cyac_4trie_Trie = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.trie.Trie", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_4trie_Trie), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_4trie_Trie, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Trie, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Trie, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Trie\n    Attributes:\n        ignore_case (bool): if the trie should be case sensitive or not. \n            if it's true, all inserted keys will be converted to lowercase.\n            Defaults to False\n        ordered     (bool): the child list of each node should be ordered.\n            Defaults to False\n    Examples:\n        >>> # import module\n        >>> from cyac import Trie\n        >>> # Create an object of Trie\n        >>> trie = Trie()\n        >>> # add keywords\n        >>> keys = [u'abc', u'cde', u'efg']\n        >>> for key in keys:\n        >>>     trie.insert(key)\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cyac_4trie_Trie, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cyac_4trie_Trie, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_4trie_Trie, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *__pyx_freelist_4cyac_4trie___pyx_scope_struct__prefix[8];
static int __pyx_freecount_4cyac_4trie___pyx_scope_struct__prefix = 0;

static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct__prefix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_4trie___pyx_scope_struct__prefix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix)))) {
    o = (PyObject*)__pyx_freelist_4cyac_4trie___pyx_scope_struct__prefix[--__pyx_freecount_4cyac_4trie___pyx_scope_struct__prefix];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct__prefix(PyObject *o) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_align);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_xs);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_4trie___pyx_scope_struct__prefix < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix)))) {
    __pyx_freelist_4cyac_4trie___pyx_scope_struct__prefix[__pyx_freecount_4cyac_4trie___pyx_scope_struct__prefix++] = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct__prefix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix *)o;
  if (p->__pyx_v_align) {
    e = (*v)(((PyObject *)p->__pyx_v_align), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_xs) {
    e = (*v)(((PyObject *)p->__pyx_v_xs), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_4trie___pyx_scope_struct__prefix = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.trie.__pyx_scope_struct__prefix", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct__prefix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct__prefix, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct__prefix, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_4trie___pyx_scope_struct__prefix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *__pyx_freelist_4cyac_4trie___pyx_scope_struct_1_predict[8];
static int __pyx_freecount_4cyac_4trie___pyx_scope_struct_1_predict = 0;

static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_1_predict(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_4trie___pyx_scope_struct_1_predict > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict)))) {
    o = (PyObject*)__pyx_freelist_4cyac_4trie___pyx_scope_struct_1_predict[--__pyx_freecount_4cyac_4trie___pyx_scope_struct_1_predict];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)o);
  new((void*)&(p->__pyx_v_q)) std::deque<int> ();
  return o;
}

static void __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_1_predict(PyObject *o) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_q);
  Py_CLEAR(p->__pyx_v_align);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_xs);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_4trie___pyx_scope_struct_1_predict < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict)))) {
    __pyx_freelist_4cyac_4trie___pyx_scope_struct_1_predict[__pyx_freecount_4cyac_4trie___pyx_scope_struct_1_predict++] = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_1_predict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict *)o;
  if (p->__pyx_v_align) {
    e = (*v)(((PyObject *)p->__pyx_v_align), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_xs) {
    e = (*v)(((PyObject *)p->__pyx_v_xs), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_4trie___pyx_scope_struct_1_predict = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.trie.__pyx_scope_struct_1_predict", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_1_predict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_1_predict, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_1_predict, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_4trie___pyx_scope_struct_1_predict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *__pyx_freelist_4cyac_4trie___pyx_scope_struct_2_items[8];
static int __pyx_freecount_4cyac_4trie___pyx_scope_struct_2_items = 0;

static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_2_items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_4trie___pyx_scope_struct_2_items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items)))) {
    o = (PyObject*)__pyx_freelist_4cyac_4trie___pyx_scope_struct_2_items[--__pyx_freecount_4cyac_4trie___pyx_scope_struct_2_items];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_2_items(PyObject *o) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_key_);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_4trie___pyx_scope_struct_2_items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items)))) {
    __pyx_freelist_4cyac_4trie___pyx_scope_struct_2_items[__pyx_freecount_4cyac_4trie___pyx_scope_struct_2_items++] = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_2_items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_4trie___pyx_scope_struct_2_items = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.trie.__pyx_scope_struct_2_items", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_2_items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_2_items, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_2_items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_4trie___pyx_scope_struct_2_items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *__pyx_freelist_4cyac_4trie___pyx_scope_struct_3_match_longest[8];
static int __pyx_freecount_4cyac_4trie___pyx_scope_struct_3_match_longest = 0;

static PyObject *__pyx_tp_new_4cyac_4trie___pyx_scope_struct_3_match_longest(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_4trie___pyx_scope_struct_3_match_longest > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest)))) {
    o = (PyObject*)__pyx_freelist_4cyac_4trie___pyx_scope_struct_3_match_longest[--__pyx_freecount_4cyac_4trie___pyx_scope_struct_3_match_longest];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_3_match_longest(PyObject *o) {
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_align);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_sep);
  Py_CLEAR(p->__pyx_v_xs);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_4trie___pyx_scope_struct_3_match_longest < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest)))) {
    __pyx_freelist_4cyac_4trie___pyx_scope_struct_3_match_longest[__pyx_freecount_4cyac_4trie___pyx_scope_struct_3_match_longest++] = ((struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_3_match_longest(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *p = (struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest *)o;
  if (p->__pyx_v_align) {
    e = (*v)(((PyObject *)p->__pyx_v_align), a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_sep) {
    e = (*v)(p->__pyx_v_sep, a); if (e) return e;
  }
  if (p->__pyx_v_xs) {
    e = (*v)(((PyObject *)p->__pyx_v_xs), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.trie.__pyx_scope_struct_3_match_longest", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_4trie___pyx_scope_struct_3_match_longest), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_4trie___pyx_scope_struct_3_match_longest, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_4trie___pyx_scope_struct_3_match_longest, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_4trie___pyx_scope_struct_3_match_longest, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"array_to_bytes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_4trie_1array_to_bytes, METH_VARARGS|METH_KEYWORDS, 0},
  {"bytes_to_array", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_4trie_3bytes_to_array, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_trie(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_trie},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "trie",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_find_s, __pyx_k_Cannot_find_s, sizeof(__pyx_k_Cannot_find_s), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_open_file_s, __pyx_k_Cannot_open_file_s, sizeof(__pyx_k_Cannot_open_file_s), 0, 1, 0, 0},
  {&__pyx_kp_u_Index_type_is_not_supported, __pyx_k_Index_type_is_not_supported, sizeof(__pyx_k_Index_type_is_not_supported), 0, 1, 0, 0},
  {&__pyx_kp_u_Replaced_result_should_be_bytes, __pyx_k_Replaced_result_should_be_bytes, sizeof(__pyx_k_Replaced_result_should_be_bytes), 0, 1, 0, 0},
  {&__pyx_n_s_Trie, __pyx_k_Trie, sizeof(__pyx_k_Trie), 0, 0, 1, 1},
  {&__pyx_kp_u_Trie___getitem___line_535, __pyx_k_Trie___getitem___line_535, sizeof(__pyx_k_Trie___getitem___line_535), 0, 1, 0, 0},
  {&__pyx_kp_u_Trie_get_line_643, __pyx_k_Trie_get_line_643, sizeof(__pyx_k_Trie_get_line_643), 0, 1, 0, 0},
  {&__pyx_kp_u_Trie_insert_line_557, __pyx_k_Trie_insert_line_557, sizeof(__pyx_k_Trie_insert_line_557), 0, 1, 0, 0},
  {&__pyx_n_s_Trie_items, __pyx_k_Trie_items, sizeof(__pyx_k_Trie_items), 0, 0, 1, 1},
  {&__pyx_kp_u_Trie_items_line_739, __pyx_k_Trie_items_line_739, sizeof(__pyx_k_Trie_items_line_739), 0, 1, 0, 0},
  {&__pyx_n_s_Trie_match_longest, __pyx_k_Trie_match_longest, sizeof(__pyx_k_Trie_match_longest), 0, 0, 1, 1},
  {&__pyx_kp_u_Trie_match_longest_line_765, __pyx_k_Trie_match_longest_line_765, sizeof(__pyx_k_Trie_match_longest_line_765), 0, 1, 0, 0},
  {&__pyx_n_s_Trie_predict, __pyx_k_Trie_predict, sizeof(__pyx_k_Trie_predict), 0, 0, 1, 1},
  {&__pyx_kp_u_Trie_predict_line_703, __pyx_k_Trie_predict_line_703, sizeof(__pyx_k_Trie_predict_line_703), 0, 1, 0, 0},
  {&__pyx_n_s_Trie_prefix, __pyx_k_Trie_prefix, sizeof(__pyx_k_Trie_prefix), 0, 0, 1, 1},
  {&__pyx_kp_u_Trie_prefix_line_672, __pyx_k_Trie_prefix_line_672, sizeof(__pyx_k_Trie_prefix_line_672), 0, 1, 0, 0},
  {&__pyx_kp_u_Trie_remove_line_595, __pyx_k_Trie_remove_line_595, sizeof(__pyx_k_Trie_remove_line_595), 0, 1, 0, 0},
  {&__pyx_kp_u_Trie_replace_longest_line_820, __pyx_k_Trie_replace_longest_line_820, sizeof(__pyx_k_Trie_replace_longest_line_820), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_buff, __pyx_k_buff, sizeof(__pyx_k_buff), 0, 0, 1, 1},
  {&__pyx_n_s_buff_size, __pyx_k_buff_size, sizeof(__pyx_k_buff_size), 0, 0, 1, 1},
  {&__pyx_kp_u_buff_size_is_smaller_than_needed, __pyx_k_buff_size_is_smaller_than_needed, sizeof(__pyx_k_buff_size_is_smaller_than_needed), 0, 1, 0, 0},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_kp_u_cannot_get_readable_buffer_https, __pyx_k_cannot_get_readable_buffer_https, sizeof(__pyx_k_cannot_get_readable_buffer_https), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_get_writable_buffer_https, __pyx_k_cannot_get_writable_buffer_https, sizeof(__pyx_k_cannot_get_writable_buffer_https), 0, 1, 0, 0},
  {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
  {&__pyx_kp_u_check, __pyx_k_check, sizeof(__pyx_k_check), 0, 1, 0, 0},
  {&__pyx_kp_u_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cyac_trie, __pyx_k_cyac_trie, sizeof(__pyx_k_cyac_trie), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_kp_u_extract_trie_s_keys_from_given, __pyx_k_extract_trie_s_keys_from_given, sizeof(__pyx_k_extract_trie_s_keys_from_given), 0, 1, 0, 0},
  {&__pyx_kp_u_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 1, 0, 0},
  {&__pyx_n_s_from_buff, __pyx_k_from_buff, sizeof(__pyx_k_from_buff), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_kp_u_get_id_of_given_key_if_it_doesn, __pyx_k_get_id_of_given_key_if_it_doesn, sizeof(__pyx_k_get_id_of_given_key_if_it_doesn), 0, 1, 0, 0},
  {&__pyx_kp_u_get_key_by_id_or_get_id_by_key, __pyx_k_get_key_by_id_or_get_id_by_key, sizeof(__pyx_k_get_key_by_id_or_get_id_by_key), 0, 1, 0, 0},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ignore_case, __pyx_k_ignore_case, sizeof(__pyx_k_ignore_case), 0, 0, 1, 1},
  {&__pyx_n_s_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 0, 1, 1},
  {&__pyx_kp_u_insert_key_into_the_trie_return, __pyx_k_insert_key_into_the_trie_return, sizeof(__pyx_k_insert_key_into_the_trie_return), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_data_buf_size_is_not_cor, __pyx_k_invalid_data_buf_size_is_not_cor, sizeof(__pyx_k_invalid_data_buf_size_is_not_cor), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_data_magic_number_is_not, __pyx_k_invalid_data_magic_number_is_not, sizeof(__pyx_k_invalid_data_magic_number_is_not), 0, 1, 0, 0},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_kp_s_lib_cyac_trie_pyx, __pyx_k_lib_cyac_trie_pyx, sizeof(__pyx_k_lib_cyac_trie_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_match_longest, __pyx_k_match_longest, sizeof(__pyx_k_match_longest), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_object, __pyx_k_new_object, sizeof(__pyx_k_new_object), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_ordered, __pyx_k_ordered, sizeof(__pyx_k_ordered), 0, 0, 1, 1},
  {&__pyx_n_s_predict, __pyx_k_predict, sizeof(__pyx_k_predict), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_kp_u_remove_the_given_key_from_the_t, __pyx_k_remove_the_given_key_from_the_t, sizeof(__pyx_k_remove_the_given_key_from_the_t), 0, 1, 0, 0},
  {&__pyx_kp_u_replace_trie_s_keys_from_given, __pyx_k_replace_trie_s_keys_from_given, sizeof(__pyx_k_replace_trie_s_keys_from_given), 0, 1, 0, 0},
  {&__pyx_kp_u_return_all_key_and_id_ordered_b, __pyx_k_return_all_key_and_id_ordered_b, sizeof(__pyx_k_return_all_key_and_id_ordered_b), 0, 1, 0, 0},
  {&__pyx_kp_u_return_the_prefix_of_given_stri, __pyx_k_return_the_prefix_of_given_stri, sizeof(__pyx_k_return_the_prefix_of_given_stri), 0, 1, 0, 0},
  {&__pyx_kp_u_return_the_string_in_the_trie_w, __pyx_k_return_the_string_in_the_trie_w, sizeof(__pyx_k_return_the_string_in_the_trie_w), 0, 1, 0, 0},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_kp_u_sibling, __pyx_k_sibling, sizeof(__pyx_k_sibling), 0, 1, 0, 0},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_kp_u_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 1, 0, 0},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 555, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 912, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cyac/trie.pyx":555
 *                 raise Exception("Cannot find: %s" % repr(sid))
 *             return ret
 *         raise AttributeError("Index type is not supported")             # <<<<<<<<<<<<<<
 * 
 *     cpdef int insert(self, unicode key):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Index_type_is_not_supported); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cyac/trie.pyx":901
 *                 byte_code = replaced_
 *             else:
 *                 raise Exception("Replaced result should be bytes or unicode")             # <<<<<<<<<<<<<<
 *             sb.write(<char*>byte_code, len(encoded_replaced))
 *             offset = last_b + 1
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Replaced_result_should_be_bytes); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cyac/trie.pyx":912
 *         cdef Node* n
 *         cdef int i
 *         with open(fname, "w") as fo:             # <<<<<<<<<<<<<<
 *             for i in range(self.array_size):
 *                 n = &self.array[i]
 */
  __pyx_tuple__4 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cyac/trie.pyx":1063
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_cannot_get_writable_buffer_https); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cyac/trie.pyx":1065
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")             # <<<<<<<<<<<<<<
 *         cdef void *buf = view.buf
 *         self._to_buff(buf)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_buff_size_is_smaller_than_needed); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cyac/trie.pyx":1085
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0:
 *             free(view)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         cdef Trie trie = trie_from_buff(view.buf, view.len, copy)
 *         if copy:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_cannot_get_readable_buffer_https); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "cyac/trie.pyx":1103
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")             # <<<<<<<<<<<<<<
 *     offset += sizeof(magic)
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_invalid_data_magic_number_is_not); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "cyac/trie.pyx":1109
 *     offset += sizeof(int)
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")             # <<<<<<<<<<<<<<
 * 
 *     cdef int value = 0
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_invalid_data_buf_size_is_not_cor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cyac/trie.pyx":12
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lib_cyac_trie_pyx, __pyx_n_s_new_object, 12, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("trie_from_buff", (void (*)(void))__pyx_f_4cyac_4trie_trie_from_buff, "struct __pyx_obj_4cyac_4trie_Trie *(void *, int, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4cyac_4trie_Trie = &__pyx_vtable_4cyac_4trie_Trie;
  __pyx_vtable_4cyac_4trie_Trie._get = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int, int))__pyx_f_4cyac_4trie_4Trie__get;
  __pyx_vtable_4cyac_4trie_Trie.follow = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t))__pyx_f_4cyac_4trie_4Trie_follow;
  __pyx_vtable_4cyac_4trie_Trie.has_label = (bool (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t))__pyx_f_4cyac_4trie_4Trie_has_label;
  __pyx_vtable_4cyac_4trie_Trie.child = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t))__pyx_f_4cyac_4trie_4Trie_child;
  __pyx_vtable_4cyac_4trie_Trie.children = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t *, int *, int))__pyx_f_4cyac_4trie_4Trie_children;
  __pyx_vtable_4cyac_4trie_Trie.jump = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t, int))__pyx_f_4cyac_4trie_4Trie_jump;
  __pyx_vtable_4cyac_4trie_Trie.jump_bytes = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int))__pyx_f_4cyac_4trie_4Trie_jump_bytes;
  __pyx_vtable_4cyac_4trie_Trie.jump_uchar = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_obj_4cyac_7xstring_xstring *, int, int))__pyx_f_4cyac_4trie_4Trie_jump_uchar;
  __pyx_vtable_4cyac_4trie_Trie.substring = (PyObject *(*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int))__pyx_f_4cyac_4trie_4Trie_substring;
  __pyx_vtable_4cyac_4trie_Trie.key = (PyObject *(*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie_key;
  __pyx_vtable_4cyac_4trie_Trie.value = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie_value;
  __pyx_vtable_4cyac_4trie_Trie.has_value = (bool (*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie_has_value;
  __pyx_vtable_4cyac_4trie_Trie.insert = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4cyac_4trie_4Trie_insert;
  __pyx_vtable_4cyac_4trie_Trie.remove = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4cyac_4trie_4Trie_remove;
  __pyx_vtable_4cyac_4trie_Trie.get = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4cyac_4trie_4Trie_get;
  __pyx_vtable_4cyac_4trie_Trie.get_bytes = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int))__pyx_f_4cyac_4trie_4Trie_get_bytes;
  __pyx_vtable_4cyac_4trie_Trie._node_init = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int, int))__pyx_f_4cyac_4trie_4Trie__node_init;
  __pyx_vtable_4cyac_4trie_Trie._node_child_num = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *))__pyx_f_4cyac_4trie_4Trie__node_child_num;
  __pyx_vtable_4cyac_4trie_Trie._node_set_child_num = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int))__pyx_f_4cyac_4trie_4Trie__node_set_child_num;
  __pyx_vtable_4cyac_4trie_Trie._node_base = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *))__pyx_f_4cyac_4trie_4Trie__node_base;
  __pyx_vtable_4cyac_4trie_Trie._node_is_child = (bool (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int))__pyx_f_4cyac_4trie_4Trie__node_is_child;
  __pyx_vtable_4cyac_4trie_Trie._node_child_ptr = (__pyx_t_4cyac_4utf8_byte_t *(*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *))__pyx_f_4cyac_4trie_4Trie__node_child_ptr;
  __pyx_vtable_4cyac_4trie_Trie._node_sibling_ptr = (__pyx_t_4cyac_4utf8_byte_t *(*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *))__pyx_f_4cyac_4trie_4Trie__node_sibling_ptr;
  __pyx_vtable_4cyac_4trie_Trie._block_init = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Block *, int, int, int, int, int, int))__pyx_f_4cyac_4trie_4Trie__block_init;
  __pyx_vtable_4cyac_4trie_Trie._node = (struct __pyx_t_4cyac_4trie_Node *(*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie__node;
  __pyx_vtable_4cyac_4trie_Trie.pop_block = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool))__pyx_f_4cyac_4trie_4Trie_pop_block;
  __pyx_vtable_4cyac_4trie_Trie.push_block = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool))__pyx_f_4cyac_4trie_4Trie_push_block;
  __pyx_vtable_4cyac_4trie_Trie.add_block = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *))__pyx_f_4cyac_4trie_4Trie_add_block;
  __pyx_vtable_4cyac_4trie_Trie.transfer_block = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, int *))__pyx_f_4cyac_4trie_4Trie_transfer_block;
  __pyx_vtable_4cyac_4trie_Trie.pop_enode = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, int))__pyx_f_4cyac_4trie_4Trie_pop_enode;
  __pyx_vtable_4cyac_4trie_Trie.push_enode = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie_push_enode;
  __pyx_vtable_4cyac_4trie_Trie.push_sibling = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t, bool))__pyx_f_4cyac_4trie_4Trie_push_sibling;
  __pyx_vtable_4cyac_4trie_Trie.pop_sibling = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t))__pyx_f_4cyac_4trie_4Trie_pop_sibling;
  __pyx_vtable_4cyac_4trie_Trie.consult = (bool (*)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, struct __pyx_t_4cyac_4trie_Node *))__pyx_f_4cyac_4trie_4Trie_consult;
  __pyx_vtable_4cyac_4trie_Trie.sibling = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int))__pyx_f_4cyac_4trie_4Trie_sibling;
  __pyx_vtable_4cyac_4trie_Trie.set_child = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, __pyx_t_4cyac_4utf8_byte_t, bool, __pyx_t_4cyac_4utf8_byte_t *))__pyx_f_4cyac_4trie_4Trie_set_child;
  __pyx_vtable_4cyac_4trie_Trie.find_place = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *))__pyx_f_4cyac_4trie_4Trie_find_place;
  __pyx_vtable_4cyac_4trie_Trie.find_places = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int))__pyx_f_4cyac_4trie_4Trie_find_places;
  __pyx_vtable_4cyac_4trie_Trie.resolve = (int (*)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t))__pyx_f_4cyac_4trie_4Trie_resolve;
  __pyx_vtable_4cyac_4trie_Trie._to_buff = (void (*)(struct __pyx_obj_4cyac_4trie_Trie *, void *))__pyx_f_4cyac_4trie_4Trie__to_buff;
  __pyx_vtable_4cyac_4trie_Trie.write = (PyObject *(*)(struct __pyx_obj_4cyac_4trie_Trie *, FILE *))__pyx_f_4cyac_4trie_4Trie_write;
  if (PyType_Ready(&__pyx_type_4cyac_4trie_Trie) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_4trie_Trie.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_4trie_Trie.tp_dictoffset && __pyx_type_4cyac_4trie_Trie.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_4trie_Trie.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_4cyac_4trie_Trie, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 31, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cyac_4trie_4Trie_8__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cyac_4trie_4Trie_8__getitem__.doc = __pyx_doc_4cyac_4trie_4Trie_8__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cyac_4trie_4Trie_8__getitem__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cyac_4trie_Trie.tp_dict, __pyx_vtabptr_4cyac_4trie_Trie) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Trie, (PyObject *)&__pyx_type_4cyac_4trie_Trie) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_ptype_4cyac_4trie_Trie = &__pyx_type_4cyac_4trie_Trie;
  if (PyType_Ready(&__pyx_type_4cyac_4trie___pyx_scope_struct__prefix) < 0) __PYX_ERR(0, 672, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_4trie___pyx_scope_struct__prefix.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_4trie___pyx_scope_struct__prefix.tp_dictoffset && __pyx_type_4cyac_4trie___pyx_scope_struct__prefix.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_4trie___pyx_scope_struct__prefix.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_4trie___pyx_scope_struct__prefix = &__pyx_type_4cyac_4trie___pyx_scope_struct__prefix;
  if (PyType_Ready(&__pyx_type_4cyac_4trie___pyx_scope_struct_1_predict) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_4trie___pyx_scope_struct_1_predict.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_4trie___pyx_scope_struct_1_predict.tp_dictoffset && __pyx_type_4cyac_4trie___pyx_scope_struct_1_predict.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_4trie___pyx_scope_struct_1_predict.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_4trie___pyx_scope_struct_1_predict = &__pyx_type_4cyac_4trie___pyx_scope_struct_1_predict;
  if (PyType_Ready(&__pyx_type_4cyac_4trie___pyx_scope_struct_2_items) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_4trie___pyx_scope_struct_2_items.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_4trie___pyx_scope_struct_2_items.tp_dictoffset && __pyx_type_4cyac_4trie___pyx_scope_struct_2_items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_4trie___pyx_scope_struct_2_items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_4trie___pyx_scope_struct_2_items = &__pyx_type_4cyac_4trie___pyx_scope_struct_2_items;
  if (PyType_Ready(&__pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest) < 0) __PYX_ERR(0, 765, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest.tp_dictoffset && __pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_4trie___pyx_scope_struct_3_match_longest = &__pyx_type_4cyac_4trie___pyx_scope_struct_3_match_longest;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.xstring"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cyac_7xstring_xstring = __Pyx_ImportType(__pyx_t_1, "cyac.xstring", "xstring", sizeof(struct __pyx_obj_4cyac_7xstring_xstring), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cyac_7xstring_xstring) __PYX_ERR(3, 16, __pyx_L1_error)
  __pyx_vtabptr_4cyac_7xstring_xstring = (struct __pyx_vtabstruct_4cyac_7xstring_xstring*)__Pyx_GetVtable(__pyx_ptype_4cyac_7xstring_xstring->tp_dict); if (unlikely(!__pyx_vtabptr_4cyac_7xstring_xstring)) __PYX_ERR(3, 16, __pyx_L1_error)
  __pyx_ptype_4cyac_7xstring_ignore_case_alignment = __Pyx_ImportType(__pyx_t_1, "cyac.xstring", "ignore_case_alignment", sizeof(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cyac_7xstring_ignore_case_alignment) __PYX_ERR(3, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "magic_number", (void **)&__pyx_vp_4cyac_4util_magic_number, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "check_buffer", (void (**)(void))&__pyx_f_4cyac_4util_check_buffer, "void (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittrie(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittrie(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_trie(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_trie(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_trie(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'trie' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_trie(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("trie", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cyac__trie) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cyac.trie")) {
      if (unlikely(PyDict_SetItemString(modules, "cyac.trie", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cyac/trie.pyx":12
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cyac_4trie_5new_object, NULL, __pyx_n_s_cyac_trie); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_object, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cyac/trie.pyx":18
 *     void reverse[T](T a, T b);
 * 
 * cdef int CHILD_NUM_MASK = (1 << 9) -1             # <<<<<<<<<<<<<<
 * cdef int END_MASK = 1 << 9
 * cdef int value_limit = (1 << 31) - 1
 */
  __pyx_v_4cyac_4trie_CHILD_NUM_MASK = 0x1FF;

  /* "cyac/trie.pyx":19
 * 
 * cdef int CHILD_NUM_MASK = (1 << 9) -1
 * cdef int END_MASK = 1 << 9             # <<<<<<<<<<<<<<
 * cdef int value_limit = (1 << 31) - 1
 * 
 */
  __pyx_v_4cyac_4trie_END_MASK = 0x200;

  /* "cyac/trie.pyx":20
 * cdef int CHILD_NUM_MASK = (1 << 9) -1
 * cdef int END_MASK = 1 << 9
 * cdef int value_limit = (1 << 31) - 1             # <<<<<<<<<<<<<<
 * 
 * cdef inline int ignore_case_byte_index_mapping(ignore_case_alignment align, int byte_idx):
 */
  __pyx_v_4cyac_4trie_value_limit = 0x7FFFFFFF;

  /* "cyac/trie.pyx":1074
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init trie from buff
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cyac_4trie_Trie, __pyx_n_s_from_buff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cyac/trie.pyx":1073
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_buff(cls, buff, copy = True):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cyac_4trie_Trie->tp_dict, __pyx_n_s_from_buff, __pyx_t_2) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cyac_4trie_Trie);

  /* "cyac/trie.pyx":1
 * #cython: language_level=3, boundscheck=False, overflowcheck=False             # <<<<<<<<<<<<<<
 * #    , profile=True, linetrace=True
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie___getitem___line_535, __pyx_kp_u_get_key_by_id_or_get_id_by_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_insert_line_557, __pyx_kp_u_insert_key_into_the_trie_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_remove_line_595, __pyx_kp_u_remove_the_given_key_from_the_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_get_line_643, __pyx_kp_u_get_id_of_given_key_if_it_doesn) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_prefix_line_672, __pyx_kp_u_return_the_prefix_of_given_stri) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_predict_line_703, __pyx_kp_u_return_the_string_in_the_trie_w) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_items_line_739, __pyx_kp_u_return_all_key_and_id_ordered_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_match_longest_line_765, __pyx_kp_u_extract_trie_s_keys_from_given) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Trie_replace_longest_line_820, __pyx_kp_u_replace_trie_s_keys_from_given) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cyac.trie", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cyac.trie");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_short(unsigned short value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(unsigned short)*3+2];
    char *dpos, *end = digits + sizeof(unsigned short)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    unsigned short remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (unsigned short) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (unsigned short) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (unsigned short) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
    const unsigned char neg_one = (unsigned char) ((unsigned char) 0 - (unsigned char) 1), const_zero = (unsigned char) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */

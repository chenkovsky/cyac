/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "cyac.ac",
        "sources": [
            "lib/cyac/ac.pyx"
        ]
    },
    "module_name": "cyac.ac"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cyac__ac
#define __PYX_HAVE_API__cyac__ac
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <deque>
#include <stdio.h>
#include <string>
#include <sstream>
#include <vector>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "lib/cyac/ac.pyx",
  "lib/cyac/trie.pxd",
  "lib/cyac/xstring.pxd",
};

/* "utf8.pxd":3
 * 
 * # distutils: language=c++
 * ctypedef unsigned char byte_t             # <<<<<<<<<<<<<<
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):
 *     cdef int result = 0
 */
typedef unsigned char __pyx_t_4cyac_4utf8_byte_t;

/*--- Type declarations ---*/
struct __pyx_obj_4cyac_7xstring_xstring;
struct __pyx_obj_4cyac_7xstring_ignore_case_alignment;
struct __pyx_obj_4cyac_4trie_Trie;
struct __pyx_obj_4cyac_2ac_AC;
struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix;
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict;
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items;
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest;
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match;
struct __pyx_t_4cyac_4trie_Block;
struct __pyx_t_4cyac_4trie_Node;

/* "trie.pxd":12
 * 
 * 
 * cdef struct Block:             # <<<<<<<<<<<<<<
 *     int prev
 *     int next_
 */
struct __pyx_t_4cyac_4trie_Block {
  int prev;
  int next_;
  int num;
  int reject;
  int trial;
  int ehead;
};

/* "trie.pxd":21
 * 
 * 
 * cdef struct Node:             # <<<<<<<<<<<<<<
 *     int value
 *     int check
 */
struct __pyx_t_4cyac_4trie_Node {
  int value;
  int check;
  __pyx_t_4cyac_4utf8_byte_t sibling;
  __pyx_t_4cyac_4utf8_byte_t child;
  unsigned short flags;
};
struct __pyx_t_4cyac_2ac_OutNode;
struct __pyx_t_4cyac_2ac_Matched;
struct __pyx_t_4cyac_2ac_QueueNode;

/* "cyac/ac.pyx":20
 * 
 * 
 * cdef struct OutNode:             # <<<<<<<<<<<<<<
 *     int next_
 *     int value
 */
struct __pyx_t_4cyac_2ac_OutNode {
  int next_;
  int value;
};

/* "cyac/ac.pyx":24
 *     int value
 * 
 * cdef struct Matched:             # <<<<<<<<<<<<<<
 *     int val
 *     int start
 */
struct __pyx_t_4cyac_2ac_Matched {
  int val;
  int start;
  int end;
};

/* "cyac/ac.pyx":29
 *     int end
 * 
 * cdef struct QueueNode:             # <<<<<<<<<<<<<<
 *     int node_id
 *     int node_label
 */
struct __pyx_t_4cyac_2ac_QueueNode {
  int node_id;
  int node_label;
  int len;
};

/* "xstring.pxd":16
 *     int
 * 
 * cdef class xstring(object):             # <<<<<<<<<<<<<<
 *     cdef unicode py_unicode
 *     cdef bytes py_bytes
 */
struct __pyx_obj_4cyac_7xstring_xstring {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cyac_7xstring_xstring *__pyx_vtab;
  PyObject *py_unicode;
  PyObject *py_bytes;
  __pyx_t_4cyac_4utf8_byte_t *bytes_;
  int byte_num;
  int char_num;
  int *char_idx_of_byte;
  int *char_offsets;
  int *chars;
};


/* "xstring.pxd":31
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 * cdef class ignore_case_alignment(object):             # <<<<<<<<<<<<<<
 *     cdef xstring original
 *     cdef xstring lowercase
 */
struct __pyx_obj_4cyac_7xstring_ignore_case_alignment {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_xstring *original;
  struct __pyx_obj_4cyac_7xstring_xstring *lowercase;
  int *lowercase_char_index_mapping;
};


/* "trie.pxd":43
 *     return align.lowercase_char_index_mapping[char_offset]
 * 
 * cdef class Trie(object):             # <<<<<<<<<<<<<<
 *     cdef int key_num
 *     cdef int key_capacity
 */
struct __pyx_obj_4cyac_4trie_Trie {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cyac_4trie_Trie *__pyx_vtab;
  int key_num;
  int key_capacity;
  struct __pyx_t_4cyac_4trie_Node *array;
  struct __pyx_t_4cyac_4trie_Block *blocks;
  int reject[0x101];
  int bheadF;
  int bheadC;
  int bheadO;
  int array_size;
  int capacity;
  bool ignore_case;
  bool ordered;
  int max_trial;
  int last_remove_leaf;
  int *leafs;
  int leaf_size;
  Py_buffer *buff;
};


/* "cyac/ac.pyx":34
 *     int len
 * 
 * cdef class AC(object):             # <<<<<<<<<<<<<<
 *     cdef Trie trie
 *     cdef OutNode* output
 */
struct __pyx_obj_4cyac_2ac_AC {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cyac_2ac_AC *__pyx_vtab;
  struct __pyx_obj_4cyac_4trie_Trie *trie;
  struct __pyx_t_4cyac_2ac_OutNode *output;
  int *fails;
  unsigned int *key_lens;
  Py_buffer *buff;
};


/* "cyac/ac.pyx":52
 *         return self.trie[key]
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */
struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix {
  PyObject_HEAD
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cyac/ac.pyx":68
 *             yield x
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict {
  PyObject_HEAD
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cyac/ac.pyx":83
 *             yield x
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items {
  PyObject_HEAD
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
};


/* "cyac/ac.pyx":98
 *         t in self.trie
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest {
  PyObject_HEAD
  PyObject *__pyx_v_s;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self;
  PyObject *__pyx_v_sep;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "cyac/ac.pyx":249
 *         return ac
 * 
 *     def match(self, unicode text not None, sep = None, return_all = False):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string.
 */
struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match {
  PyObject_HEAD
  struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_b;
  int __pyx_v_byte_num;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_v_bytes_;
  int __pyx_v_chr_;
  int __pyx_v_i;
  struct __pyx_t_4cyac_2ac_Matched __pyx_v_m;
  int __pyx_v_nid;
  int __pyx_v_nid2;
  int __pyx_v_nid_;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_prev_xstr;
  PyObject *__pyx_v_return_all;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self;
  PyObject *__pyx_v_sep;
  PyObject *__pyx_v_text;
  std::vector<struct __pyx_t_4cyac_2ac_Matched>  __pyx_v_vect;
  struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xstr;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<struct __pyx_t_4cyac_2ac_Matched> ::iterator __pyx_t_3;
};



/* "xstring.pxd":16
 *     int
 * 
 * cdef class xstring(object):             # <<<<<<<<<<<<<<
 *     cdef unicode py_unicode
 *     cdef bytes py_bytes
 */

struct __pyx_vtabstruct_4cyac_7xstring_xstring {
  int (*char_at)(struct __pyx_obj_4cyac_7xstring_xstring *, int, int __pyx_skip_dispatch);
  int (*char_byte_num)(struct __pyx_obj_4cyac_7xstring_xstring *, int);
};
static struct __pyx_vtabstruct_4cyac_7xstring_xstring *__pyx_vtabptr_4cyac_7xstring_xstring;
static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *, int);


/* "trie.pxd":43
 *     return align.lowercase_char_index_mapping[char_offset]
 * 
 * cdef class Trie(object):             # <<<<<<<<<<<<<<
 *     cdef int key_num
 *     cdef int key_capacity
 */

struct __pyx_vtabstruct_4cyac_4trie_Trie {
  int (*_get)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int, int);
  int (*follow)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  bool (*has_label)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  int (*child)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  int (*children)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t *, int *, int);
  int (*jump)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t, int);
  int (*jump_bytes)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int, int);
  int (*jump_uchar)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_obj_4cyac_7xstring_xstring *, int, int);
  PyObject *(*substring)(struct __pyx_obj_4cyac_4trie_Trie *, int, int);
  PyObject *(*key)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*value)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  bool (*has_value)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*insert)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*remove)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*get)(struct __pyx_obj_4cyac_4trie_Trie *, PyObject *, int __pyx_skip_dispatch);
  int (*get_bytes)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
  void (*_node_init)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int, int);
  int (*_node_child_num)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  void (*_node_set_child_num)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
  int (*_node_base)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  bool (*_node_is_child)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, int);
  __pyx_t_4cyac_4utf8_byte_t *(*_node_child_ptr)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  __pyx_t_4cyac_4utf8_byte_t *(*_node_sibling_ptr)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *);
  void (*_block_init)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Block *, int, int, int, int, int, int);
  struct __pyx_t_4cyac_4trie_Node *(*_node)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  void (*pop_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
  void (*push_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, bool);
  int (*add_block)(struct __pyx_obj_4cyac_4trie_Trie *);
  void (*transfer_block)(struct __pyx_obj_4cyac_4trie_Trie *, int, int *, int *);
  int (*pop_enode)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, int);
  void (*push_enode)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  void (*push_sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t, bool);
  void (*pop_sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t);
  bool (*consult)(struct __pyx_obj_4cyac_4trie_Trie *, struct __pyx_t_4cyac_4trie_Node *, struct __pyx_t_4cyac_4trie_Node *);
  int (*sibling)(struct __pyx_obj_4cyac_4trie_Trie *, int);
  int (*set_child)(struct __pyx_obj_4cyac_4trie_Trie *, int, __pyx_t_4cyac_4utf8_byte_t, __pyx_t_4cyac_4utf8_byte_t, bool, __pyx_t_4cyac_4utf8_byte_t *);
  int (*find_place)(struct __pyx_obj_4cyac_4trie_Trie *);
  int (*find_places)(struct __pyx_obj_4cyac_4trie_Trie *, __pyx_t_4cyac_4utf8_byte_t *, int);
  int (*resolve)(struct __pyx_obj_4cyac_4trie_Trie *, int, int, __pyx_t_4cyac_4utf8_byte_t);
  void (*_to_buff)(struct __pyx_obj_4cyac_4trie_Trie *, void *);
  PyObject *(*write)(struct __pyx_obj_4cyac_4trie_Trie *, FILE *);
};
static struct __pyx_vtabstruct_4cyac_4trie_Trie *__pyx_vtabptr_4cyac_4trie_Trie;


/* "cyac/ac.pyx":34
 *     int len
 * 
 * cdef class AC(object):             # <<<<<<<<<<<<<<
 *     cdef Trie trie
 *     cdef OutNode* output
 */

struct __pyx_vtabstruct_4cyac_2ac_AC {
  void (*__pyx___fetch)(struct __pyx_obj_4cyac_2ac_AC *, int, int, std::vector<struct __pyx_t_4cyac_2ac_Matched>  &);
  PyObject *(*write)(struct __pyx_obj_4cyac_2ac_AC *, FILE *);
  void (*_to_buff)(struct __pyx_obj_4cyac_2ac_AC *, void *);
};
static struct __pyx_vtabstruct_4cyac_2ac_AC *__pyx_vtabptr_4cyac_2ac_AC;
static CYTHON_INLINE void __pyx_f_4cyac_2ac_2AC___fetch(struct __pyx_obj_4cyac_2ac_AC *, int, int, std::vector<struct __pyx_t_4cyac_2ac_Matched>  &);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE void __pyx_f_4cyac_2ac_2AC___fetch(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, int __pyx_v_idx, int __pyx_v_nid, std::vector<struct __pyx_t_4cyac_2ac_Matched>  &__pyx_v_res); /* proto*/
static PyObject *__pyx_f_4cyac_2ac_2AC_write(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, FILE *__pyx_v_ptr_fw); /* proto*/
static void __pyx_f_4cyac_2ac_2AC__to_buff(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, void *__pyx_v_buf); /* proto*/
static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_self, int __pyx_v_i); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.deque' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cyac.utf8' */

/* Module declarations from 'cyac.xstring' */
static PyTypeObject *__pyx_ptype_4cyac_7xstring_xstring = 0;
static PyTypeObject *__pyx_ptype_4cyac_7xstring_ignore_case_alignment = 0;

/* Module declarations from 'cyac.trie' */
static PyTypeObject *__pyx_ptype_4cyac_4trie_Trie = 0;
static CYTHON_INLINE PyObject *__pyx_f_4cyac_4trie_array_to_bytes(char *, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE char *__pyx_f_4cyac_4trie_bytes_to_array(PyObject *, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_offset(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *, struct __pyx_obj_4cyac_7xstring_xstring *, int); /*proto*/
static struct __pyx_obj_4cyac_4trie_Trie *(*__pyx_f_4cyac_4trie_trie_from_buff)(void *, int, bool); /*proto*/

/* Module declarations from 'cyac.util' */
static int *__pyx_vp_4cyac_4util_magic_number = 0;
#define __pyx_v_4cyac_4util_magic_number (*__pyx_vp_4cyac_4util_magic_number)
static void (*__pyx_f_4cyac_4util_check_buffer)(PyObject *); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cyac.ac' */
static PyTypeObject *__pyx_ptype_4cyac_2ac_AC = 0;
static PyTypeObject *__pyx_ptype_4cyac_2ac___pyx_scope_struct__prefix = 0;
static PyTypeObject *__pyx_ptype_4cyac_2ac___pyx_scope_struct_1_predict = 0;
static PyTypeObject *__pyx_ptype_4cyac_2ac___pyx_scope_struct_2_items = 0;
static PyTypeObject *__pyx_ptype_4cyac_2ac___pyx_scope_struct_3_match_longest = 0;
static PyTypeObject *__pyx_ptype_4cyac_2ac___pyx_scope_struct_4_match = 0;
static struct __pyx_obj_4cyac_2ac_AC *__pyx_f_4cyac_2ac_ac_from_buff(void *, int, bool); /*proto*/
#define __Pyx_MODULE_NAME "cyac.ac"
extern int __pyx_module_is_main_cyac__ac;
int __pyx_module_is_main_cyac__ac = 0;

/* Implementation of 'cyac.ac' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_s[] = "s";
static const char __pyx_k_AC[] = "AC";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_buff[] = "buff";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_pats[] = "pats";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_build[] = "build";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_cyac_ac[] = "cyac.ac";
static const char __pyx_k_ordered[] = "ordered";
static const char __pyx_k_predict[] = "predict";
static const char __pyx_k_AC_items[] = "AC.items";
static const char __pyx_k_AC_match[] = "AC.match";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_capacity[] = "capacity";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_AC_prefix[] = "AC.prefix";
static const char __pyx_k_buff_size[] = "buff_size";
static const char __pyx_k_from_buff[] = "from_buff";
static const char __pyx_k_AC_predict[] = "AC.predict";
static const char __pyx_k_new_object[] = "new_object";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_return_all[] = "return_all";
static const char __pyx_k_ignore_case[] = "ignore_case";
static const char __pyx_k_match_longest[] = "match_longest";
static const char __pyx_k_lib_cyac_ac_pyx[] = "lib/cyac/ac.pyx";
static const char __pyx_k_replace_longest[] = "replace_longest";
static const char __pyx_k_AC_items_line_83[] = "AC.items (line 83)";
static const char __pyx_k_AC_match_longest[] = "AC.match_longest";
static const char __pyx_k_AC_build_line_165[] = "AC.build (line 165)";
static const char __pyx_k_AC_match_line_249[] = "AC.match (line 249)";
static const char __pyx_k_AC_prefix_line_52[] = "AC.prefix (line 52)";
static const char __pyx_k_AC_predict_line_68[] = "AC.predict (line 68)";
static const char __pyx_k_Cannot_open_file_s[] = "Cannot open file: %s";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_AC_match_longest_line_98[] = "AC.match_longest (line 98)";
static const char __pyx_k_AC_replace_longest_line_115[] = "AC.replace_longest (line 115)";
static const char __pyx_k_extract_trie_s_keys_from_given[] = "\n        extract trie's keys from given string. only return the longest.\n        Args:\n            s : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in ac.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static const char __pyx_k_replace_trie_s_keys_from_given[] = "\n        replace trie's keys from given string. only replace the longest.\n        Args:\n            s : unicode\n            callback : lambda | list | dict\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Returns:\n            replaced text\n        Examples:\n            >>> python_id = ac.get(\"python\")\n            >>> text = ac.replace_longest(\"python\", {python_id: \"hahah\"}, set([ord(\" \")]))\n        ";
static const char __pyx_k_Build_AC_automata_Args_pats_lis[] = "\n        Build AC automata\n        Args:\n            pats : list(unicode)\n            ignore_case : bool\n                Defaults False\n                see Trie's constructor for details.\n            ordered : bool\n                Defaults False\n                see Trie's constructor for details.\n        Returns:\n            ac : AC\n                ac automata\n        Examples:\n            >>> AC.build([\"python\"])\n        ";
static const char __pyx_k_return_all_key_and_id_ordered_b[] = "\n        return all key and id ordered by id\n        Iterates:\n            items : (unicode, int)\n        Examples:\n            >>> for key, id_ in ac.items():\n            >>>     print(id_, key)\n        ";
static const char __pyx_k_return_the_prefix_of_given_stri[] = "\n        return the prefix of given string which is in the trie.\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            prefixes : tuple(id, end_offset)\n                s[:end_offset] matches id\n        Examples:\n            >>> for id_, offset in ac.prefix(\"python\"):\n            >>>     print(id_, offset)\n        ";
static const char __pyx_k_return_the_string_in_the_trie_w[] = "\n        return the string in the trie which starts with given string\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            predicts : id\n        Examples:\n            >>> for id_ in ac.predict(\"python\"):\n            >>>     print(id_)\n        ";
static const char __pyx_k_buff_size_is_smaller_than_needed[] = "buff size is smaller than needed.";
static const char __pyx_k_cannot_get_readable_buffer_https[] = "cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html";
static const char __pyx_k_cannot_get_writable_buffer_https[] = "cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html";
static const char __pyx_k_extract_trie_s_keys_from_given_2[] = "\n        extract trie's keys from given string. \n        Args:\n            text : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n            return_all: by default, only return the longest. it's useful only when sep is None\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in ac.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static const char __pyx_k_invalid_data_buf_size_is_not_cor[] = "invalid data, buf size is not correct";
static const char __pyx_k_invalid_data_magic_number_is_not[] = "invalid data, magic number is not correct";
static PyObject *__pyx_n_s_AC;
static PyObject *__pyx_kp_u_AC_build_line_165;
static PyObject *__pyx_n_s_AC_items;
static PyObject *__pyx_kp_u_AC_items_line_83;
static PyObject *__pyx_n_s_AC_match;
static PyObject *__pyx_kp_u_AC_match_line_249;
static PyObject *__pyx_n_s_AC_match_longest;
static PyObject *__pyx_kp_u_AC_match_longest_line_98;
static PyObject *__pyx_n_s_AC_predict;
static PyObject *__pyx_kp_u_AC_predict_line_68;
static PyObject *__pyx_n_s_AC_prefix;
static PyObject *__pyx_kp_u_AC_prefix_line_52;
static PyObject *__pyx_kp_u_AC_replace_longest_line_115;
static PyObject *__pyx_kp_u_Build_AC_automata_Args_pats_lis;
static PyObject *__pyx_kp_u_Cannot_open_file_s;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_buff;
static PyObject *__pyx_n_s_buff_size;
static PyObject *__pyx_kp_u_buff_size_is_smaller_than_needed;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_kp_u_cannot_get_readable_buffer_https;
static PyObject *__pyx_kp_u_cannot_get_writable_buffer_https;
static PyObject *__pyx_n_s_capacity;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cyac_ac;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_kp_u_extract_trie_s_keys_from_given;
static PyObject *__pyx_kp_u_extract_trie_s_keys_from_given_2;
static PyObject *__pyx_n_s_from_buff;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ignore_case;
static PyObject *__pyx_kp_u_invalid_data_buf_size_is_not_cor;
static PyObject *__pyx_kp_u_invalid_data_magic_number_is_not;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_kp_s_lib_cyac_ac_pyx;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_match_longest;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_object;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_ordered;
static PyObject *__pyx_n_s_pats;
static PyObject *__pyx_n_s_predict;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_replace_longest;
static PyObject *__pyx_kp_u_replace_trie_s_keys_from_given;
static PyObject *__pyx_n_s_return_all;
static PyObject *__pyx_kp_u_return_all_key_and_id_ordered_b;
static PyObject *__pyx_kp_u_return_the_prefix_of_given_stri;
static PyObject *__pyx_kp_u_return_the_string_in_the_trie_w;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_u_utf8;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_pf_4cyac_2ac_new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_11ignore_case___get__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_4size___get__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC___getitem__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_2prefix(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_5predict(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_8items(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static int __pyx_pf_4cyac_2ac_2AC_11__contains__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_13match_longest(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_sep); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_16replace_longest(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_callback, PyObject *__pyx_v_sep); /* proto */
static int __pyx_pf_4cyac_2ac_2AC_18__cinit__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static void __pyx_pf_4cyac_2ac_2AC_20__dealloc__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_22build(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_pats, PyObject *__pyx_v_ignore_case, PyObject *__pyx_v_ordered); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_24match(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_sep, PyObject *__pyx_v_return_all); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_27__reduce__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_29__getstate__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_31__setstate__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_33save(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_35buff_size(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_37to_buff(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_buff); /* proto */
static PyObject *__pyx_pf_4cyac_2ac_2AC_39from_buff(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_buff, PyObject *__pyx_v_copy); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_array_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_ptr, int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4cyac_4trie_2bytes_to_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, int __pyx_v_capacity); /* proto */
static PyObject *__pyx_tp_new_4cyac_2ac_AC(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct__prefix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_1_predict(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_2_items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_3_match_longest(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_4_match(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_codeobj__7;
/* Late includes */

/* "cyac/ac.pyx":16
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_1new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static PyMethodDef __pyx_mdef_4cyac_2ac_1new_object = {"new_object", (PyCFunction)__pyx_pw_4cyac_2ac_1new_object, METH_O, 0};
static PyObject *__pyx_pw_4cyac_2ac_1new_object(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_object (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_new_object(__pyx_self, ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_new_object(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_object", 0);

  /* "cyac/ac.pyx":17
 * 
 * def new_object(obj):
 *     return obj.__new__(obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_obj);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":16
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.ac.new_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":42
 * 
 *     property ignore_case:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ignore_case
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_11ignore_case_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_11ignore_case_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_11ignore_case___get__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_11ignore_case___get__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cyac/ac.pyx":43
 *     property ignore_case:
 *         def __get__(self):
 *             return self.ignore_case             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ignore_case); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":42
 * 
 *     property ignore_case:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ignore_case
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.ac.AC.ignore_case.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":46
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.trie.key_num
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_4size___get__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_4size___get__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cyac/ac.pyx":47
 *     property size:
 *         def __get__(self):
 *             return self.trie.key_num             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->trie->key_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":46
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.trie.key_num
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.ac.AC.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":49
 *             return self.trie.key_num
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         return self.trie[key]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC___getitem__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC___getitem__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "cyac/ac.pyx":50
 * 
 *     def __getitem__(self, key):
 *         return self.trie[key]             # <<<<<<<<<<<<<<
 * 
 *     def prefix(self, unicode s not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->trie), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":49
 *             return self.trie.key_num
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         return self.trie[key]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.ac.AC.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_2ac_2AC_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/ac.pyx":52
 *         return self.trie[key]
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_3prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_2prefix[] = "\n        return the prefix of given string which is in the trie.\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            prefixes : tuple(id, end_offset)\n                s[:end_offset] matches id\n        Examples:\n            >>> for id_, offset in ac.prefix(\"python\"):\n            >>>     print(id_, offset)\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_3prefix(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_2prefix(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject*)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_2prefix(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prefix", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)__pyx_tp_new_4cyac_2ac___pyx_scope_struct__prefix(__pyx_ptype_4cyac_2ac___pyx_scope_struct__prefix, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 52, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_2ac_2AC_4generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_prefix, __pyx_n_s_AC_prefix, __pyx_n_s_cyac_ac); if (unlikely(!gen)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_2ac_2AC_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *__pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prefix", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 52, __pyx_L1_error)

  /* "cyac/ac.pyx":65
 *             >>>     print(id_, offset)
 *         """
 *         for x in self.trie.prefix(s):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self->trie), __pyx_n_s_prefix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_s);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 65, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 65, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 65, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":66
 *         """
 *         for x in self.trie.prefix(s):
 *             yield x             # <<<<<<<<<<<<<<
 * 
 *     def predict(self, unicode s not None):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
    __pyx_r = __pyx_cur_scope->__pyx_v_x;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 66, __pyx_L1_error)

    /* "cyac/ac.pyx":65
 *             >>>     print(id_, offset)
 *         """
 *         for x in self.trie.prefix(s):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/ac.pyx":52
 *         return self.trie[key]
 * 
 *     def prefix(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the prefix of given string which is in the trie.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("prefix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_2ac_2AC_7generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/ac.pyx":68
 *             yield x
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_6predict(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_5predict[] = "\n        return the string in the trie which starts with given string\n        Args:\n            key : string\n                keyword that you want to searh\n        Iterates:\n            predicts : id\n        Examples:\n            >>> for id_ in ac.predict(\"python\"):\n            >>>     print(id_)\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_6predict(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_5predict(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject*)__pyx_v_s));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_5predict(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("predict", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)__pyx_tp_new_4cyac_2ac___pyx_scope_struct_1_predict(__pyx_ptype_4cyac_2ac___pyx_scope_struct_1_predict, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 68, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_2ac_2AC_7generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_predict, __pyx_n_s_AC_predict, __pyx_n_s_cyac_ac); if (unlikely(!gen)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_2ac_2AC_7generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *__pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 68, __pyx_L1_error)

  /* "cyac/ac.pyx":80
 *             >>>     print(id_)
 *         """
 *         for x in self.trie.predict(s):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self->trie), __pyx_n_s_predict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_s);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 80, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":81
 *         """
 *         for x in self.trie.predict(s):
 *             yield x             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
    __pyx_r = __pyx_cur_scope->__pyx_v_x;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 81, __pyx_L1_error)

    /* "cyac/ac.pyx":80
 *             >>>     print(id_)
 *         """
 *         for x in self.trie.predict(s):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/ac.pyx":68
 *             yield x
 * 
 *     def predict(self, unicode s not None):             # <<<<<<<<<<<<<<
 *         """
 *         return the string in the trie which starts with given string
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_2ac_2AC_10generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/ac.pyx":83
 *             yield x
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_8items[] = "\n        return all key and id ordered by id\n        Iterates:\n            items : (unicode, int)\n        Examples:\n            >>> for key, id_ in ac.items():\n            >>>     print(id_, key)\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_9items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_8items(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_8items(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)__pyx_tp_new_4cyac_2ac___pyx_scope_struct_2_items(__pyx_ptype_4cyac_2ac___pyx_scope_struct_2_items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 83, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_2ac_2AC_10generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_AC_items, __pyx_n_s_cyac_ac); if (unlikely(!gen)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_2ac_2AC_10generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *__pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 83, __pyx_L1_error)

  /* "cyac/ac.pyx":92
 *             >>>     print(id_, key)
 *         """
 *         for x in self.trie.items():             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  __pyx_t_2 = 0;
  if (unlikely(((PyObject *)__pyx_cur_scope->__pyx_v_self->trie) == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 92, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(((PyObject *)__pyx_cur_scope->__pyx_v_self->trie), 0, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, NULL, NULL, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "cyac/ac.pyx":93
 *         """
 *         for x in self.trie.items():
 *             yield x             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, unicode t):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
    __pyx_r = __pyx_cur_scope->__pyx_v_x;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 93, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/ac.pyx":83
 *             yield x
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         """
 *         return all key and id ordered by id
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":95
 *             yield x
 * 
 *     def __contains__(self, unicode t):             # <<<<<<<<<<<<<<
 *         t in self.trie
 * 
 */

/* Python wrapper */
static int __pyx_pw_4cyac_2ac_2AC_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_4cyac_2ac_2AC_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), (&PyUnicode_Type), 1, "t", 1))) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_11__contains__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject*)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cyac_2ac_2AC_11__contains__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "cyac/ac.pyx":96
 * 
 *     def __contains__(self, unicode t):
 *         t in self.trie             # <<<<<<<<<<<<<<
 * 
 *     def match_longest(self, unicode s not None, sep = None):
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_t, ((PyObject *)__pyx_v_self->trie), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)

  /* "cyac/ac.pyx":95
 *             yield x
 * 
 *     def __contains__(self, unicode t):             # <<<<<<<<<<<<<<
 *         t in self.trie
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_2ac_2AC_15generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/ac.pyx":98
 *         t in self.trie
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_14match_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_13match_longest[] = "\n        extract trie's keys from given string. only return the longest.\n        Args:\n            s : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in ac.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_14match_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_sep = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_longest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_sep,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match_longest") < 0)) __PYX_ERR(0, 98, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = ((PyObject*)values[0]);
    __pyx_v_sep = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match_longest", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 98, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.ac.AC.match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 98, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_13match_longest(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), __pyx_v_s, __pyx_v_sep);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_13match_longest(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_sep) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match_longest", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)__pyx_tp_new_4cyac_2ac___pyx_scope_struct_3_match_longest(__pyx_ptype_4cyac_2ac___pyx_scope_struct_3_match_longest, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 98, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_s = __pyx_v_s;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
  __pyx_cur_scope->__pyx_v_sep = __pyx_v_sep;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sep);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sep);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_2ac_2AC_15generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_match_longest, __pyx_n_s_AC_match_longest, __pyx_n_s_cyac_ac); if (unlikely(!gen)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_2ac_2AC_15generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *__pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match_longest", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 98, __pyx_L1_error)

  /* "cyac/ac.pyx":112
 *             >>>     print(id_, start_offset, end_offset)
 *         """
 *         for x in self.trie.match_longest(s, sep):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self->trie), __pyx_n_s_match_longest); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_s, __pyx_cur_scope->__pyx_v_sep};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_s, __pyx_cur_scope->__pyx_v_sep};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_s);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sep);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sep);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_cur_scope->__pyx_v_sep);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 112, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":113
 *         """
 *         for x in self.trie.match_longest(s, sep):
 *             yield x             # <<<<<<<<<<<<<<
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):
 */
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
    __pyx_r = __pyx_cur_scope->__pyx_v_x;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 113, __pyx_L1_error)

    /* "cyac/ac.pyx":112
 *             >>>     print(id_, start_offset, end_offset)
 *         """
 *         for x in self.trie.match_longest(s, sep):             # <<<<<<<<<<<<<<
 *             yield x
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/ac.pyx":98
 *         t in self.trie
 * 
 *     def match_longest(self, unicode s not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string. only return the longest.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("match_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":115
 *             yield x
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         replace trie's keys from given string. only replace the longest.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_17replace_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_16replace_longest[] = "\n        replace trie's keys from given string. only replace the longest.\n        Args:\n            s : unicode\n            callback : lambda | list | dict\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n        Returns:\n            replaced text\n        Examples:\n            >>> python_id = ac.get(\"python\")\n            >>> text = ac.replace_longest(\"python\", {python_id: \"hahah\"}, set([ord(\" \")]))\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_17replace_longest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_s = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_sep = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("replace_longest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_s,&__pyx_n_s_callback,&__pyx_n_s_sep,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("replace_longest", 0, 2, 3, 1); __PYX_ERR(0, 115, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "replace_longest") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = ((PyObject*)values[0]);
    __pyx_v_callback = values[1];
    __pyx_v_sep = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replace_longest", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.ac.AC.replace_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyUnicode_Type), 0, "s", 1))) __PYX_ERR(0, 115, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_callback) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "callback"); __PYX_ERR(0, 115, __pyx_L1_error)
  }
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_16replace_longest(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), __pyx_v_s, __pyx_v_callback, __pyx_v_sep);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_16replace_longest(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_s, PyObject *__pyx_v_callback, PyObject *__pyx_v_sep) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("replace_longest", 0);

  /* "cyac/ac.pyx":130
 *             >>> text = ac.replace_longest("python", {python_id: "hahah"}, set([ord(" ")]))
 *         """
 *         return self.trie.replace_longest(s, callback, sep)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->trie), __pyx_n_s_replace_longest); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s, __pyx_v_callback, __pyx_v_sep};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_s, __pyx_v_callback, __pyx_v_sep};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_s);
    __Pyx_GIVEREF(__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_s);
    __Pyx_INCREF(__pyx_v_callback);
    __Pyx_GIVEREF(__pyx_v_callback);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_callback);
    __Pyx_INCREF(__pyx_v_sep);
    __Pyx_GIVEREF(__pyx_v_sep);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_sep);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":115
 *             yield x
 * 
 *     def replace_longest(self, unicode s not None, callback not None, sep = None):             # <<<<<<<<<<<<<<
 *         """
 *         replace trie's keys from given string. only replace the longest.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.ac.AC.replace_longest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":132
 *         return self.trie.replace_longest(s, callback, sep)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.trie = None
 *         self.output = NULL
 */

/* Python wrapper */
static int __pyx_pw_4cyac_2ac_2AC_19__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4cyac_2ac_2AC_19__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_18__cinit__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4cyac_2ac_2AC_18__cinit__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cyac/ac.pyx":133
 * 
 *     def __cinit__(self):
 *         self.trie = None             # <<<<<<<<<<<<<<
 *         self.output = NULL
 *         self.fails = NULL
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->trie);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->trie));
  __pyx_v_self->trie = ((struct __pyx_obj_4cyac_4trie_Trie *)Py_None);

  /* "cyac/ac.pyx":134
 *     def __cinit__(self):
 *         self.trie = None
 *         self.output = NULL             # <<<<<<<<<<<<<<
 *         self.fails = NULL
 *         self.key_lens = NULL
 */
  __pyx_v_self->output = NULL;

  /* "cyac/ac.pyx":135
 *         self.trie = None
 *         self.output = NULL
 *         self.fails = NULL             # <<<<<<<<<<<<<<
 *         self.key_lens = NULL
 *         self.buff = NULL
 */
  __pyx_v_self->fails = NULL;

  /* "cyac/ac.pyx":136
 *         self.output = NULL
 *         self.fails = NULL
 *         self.key_lens = NULL             # <<<<<<<<<<<<<<
 *         self.buff = NULL
 * 
 */
  __pyx_v_self->key_lens = NULL;

  /* "cyac/ac.pyx":137
 *         self.fails = NULL
 *         self.key_lens = NULL
 *         self.buff = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->buff = NULL;

  /* "cyac/ac.pyx":132
 *         return self.trie.replace_longest(s, callback, sep)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.trie = None
 *         self.output = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":139
 *         self.buff = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.buff == NULL:
 *             if self.output:
 */

/* Python wrapper */
static void __pyx_pw_4cyac_2ac_2AC_21__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4cyac_2ac_2AC_21__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4cyac_2ac_2AC_20__dealloc__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4cyac_2ac_2AC_20__dealloc__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cyac/ac.pyx":140
 * 
 *     def __dealloc__(self):
 *         if self.buff == NULL:             # <<<<<<<<<<<<<<
 *             if self.output:
 *                 free(self.output)
 */
  __pyx_t_1 = ((__pyx_v_self->buff == NULL) != 0);
  if (__pyx_t_1) {

    /* "cyac/ac.pyx":141
 *     def __dealloc__(self):
 *         if self.buff == NULL:
 *             if self.output:             # <<<<<<<<<<<<<<
 *                 free(self.output)
 *             if self.fails:
 */
    __pyx_t_1 = (__pyx_v_self->output != 0);
    if (__pyx_t_1) {

      /* "cyac/ac.pyx":142
 *         if self.buff == NULL:
 *             if self.output:
 *                 free(self.output)             # <<<<<<<<<<<<<<
 *             if self.fails:
 *                 free(self.fails)
 */
      free(__pyx_v_self->output);

      /* "cyac/ac.pyx":141
 *     def __dealloc__(self):
 *         if self.buff == NULL:
 *             if self.output:             # <<<<<<<<<<<<<<
 *                 free(self.output)
 *             if self.fails:
 */
    }

    /* "cyac/ac.pyx":143
 *             if self.output:
 *                 free(self.output)
 *             if self.fails:             # <<<<<<<<<<<<<<
 *                 free(self.fails)
 *             if self.key_lens:
 */
    __pyx_t_1 = (__pyx_v_self->fails != 0);
    if (__pyx_t_1) {

      /* "cyac/ac.pyx":144
 *                 free(self.output)
 *             if self.fails:
 *                 free(self.fails)             # <<<<<<<<<<<<<<
 *             if self.key_lens:
 *                 free(self.key_lens)
 */
      free(__pyx_v_self->fails);

      /* "cyac/ac.pyx":143
 *             if self.output:
 *                 free(self.output)
 *             if self.fails:             # <<<<<<<<<<<<<<
 *                 free(self.fails)
 *             if self.key_lens:
 */
    }

    /* "cyac/ac.pyx":145
 *             if self.fails:
 *                 free(self.fails)
 *             if self.key_lens:             # <<<<<<<<<<<<<<
 *                 free(self.key_lens)
 *         else:
 */
    __pyx_t_1 = (__pyx_v_self->key_lens != 0);
    if (__pyx_t_1) {

      /* "cyac/ac.pyx":146
 *                 free(self.fails)
 *             if self.key_lens:
 *                 free(self.key_lens)             # <<<<<<<<<<<<<<
 *         else:
 *             PyBuffer_Release(self.buff)
 */
      free(__pyx_v_self->key_lens);

      /* "cyac/ac.pyx":145
 *             if self.fails:
 *                 free(self.fails)
 *             if self.key_lens:             # <<<<<<<<<<<<<<
 *                 free(self.key_lens)
 *         else:
 */
    }

    /* "cyac/ac.pyx":140
 * 
 *     def __dealloc__(self):
 *         if self.buff == NULL:             # <<<<<<<<<<<<<<
 *             if self.output:
 *                 free(self.output)
 */
    goto __pyx_L3;
  }

  /* "cyac/ac.pyx":148
 *                 free(self.key_lens)
 *         else:
 *             PyBuffer_Release(self.buff)             # <<<<<<<<<<<<<<
 *             free(self.buff)
 * 
 */
  /*else*/ {
    PyBuffer_Release(__pyx_v_self->buff);

    /* "cyac/ac.pyx":149
 *         else:
 *             PyBuffer_Release(self.buff)
 *             free(self.buff)             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void __fetch(self, int idx, int nid, vector[Matched]& res):
 */
    free(__pyx_v_self->buff);
  }
  __pyx_L3:;

  /* "cyac/ac.pyx":139
 *         self.buff = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.buff == NULL:
 *             if self.output:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cyac/ac.pyx":151
 *             free(self.buff)
 * 
 *     cdef inline void __fetch(self, int idx, int nid, vector[Matched]& res):             # <<<<<<<<<<<<<<
 *         cdef OutNode *e = &self.output[nid]
 *         cdef int val, len_, start_offset, end_offset
 */

static CYTHON_INLINE void __pyx_f_4cyac_2ac_2AC___fetch(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, int __pyx_v_idx, int __pyx_v_nid, std::vector<struct __pyx_t_4cyac_2ac_Matched>  &__pyx_v_res) {
  struct __pyx_t_4cyac_2ac_OutNode *__pyx_v_e;
  int __pyx_v_val;
  int __pyx_v_len_;
  int __pyx_v_start_offset;
  int __pyx_v_end_offset;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  struct __pyx_t_4cyac_2ac_Matched __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__fetch", 0);

  /* "cyac/ac.pyx":152
 * 
 *     cdef inline void __fetch(self, int idx, int nid, vector[Matched]& res):
 *         cdef OutNode *e = &self.output[nid]             # <<<<<<<<<<<<<<
 *         cdef int val, len_, start_offset, end_offset
 *         while e[0].value >= 0:
 */
  __pyx_v_e = (&(__pyx_v_self->output[__pyx_v_nid]));

  /* "cyac/ac.pyx":154
 *         cdef OutNode *e = &self.output[nid]
 *         cdef int val, len_, start_offset, end_offset
 *         while e[0].value >= 0:             # <<<<<<<<<<<<<<
 *             val = e[0].value
 *             len_ = self.key_lens[val]
 */
  while (1) {
    __pyx_t_1 = (((__pyx_v_e[0]).value >= 0) != 0);
    if (!__pyx_t_1) break;

    /* "cyac/ac.pyx":155
 *         cdef int val, len_, start_offset, end_offset
 *         while e[0].value >= 0:
 *             val = e[0].value             # <<<<<<<<<<<<<<
 *             len_ = self.key_lens[val]
 *             start_offset = idx - len_ + 1
 */
    __pyx_t_2 = (__pyx_v_e[0]).value;
    __pyx_v_val = __pyx_t_2;

    /* "cyac/ac.pyx":156
 *         while e[0].value >= 0:
 *             val = e[0].value
 *             len_ = self.key_lens[val]             # <<<<<<<<<<<<<<
 *             start_offset = idx - len_ + 1
 *             end_offset = idx + 1
 */
    __pyx_v_len_ = (__pyx_v_self->key_lens[__pyx_v_val]);

    /* "cyac/ac.pyx":157
 *             val = e[0].value
 *             len_ = self.key_lens[val]
 *             start_offset = idx - len_ + 1             # <<<<<<<<<<<<<<
 *             end_offset = idx + 1
 *             res.push_back(Matched(val, start_offset, end_offset))
 */
    __pyx_v_start_offset = ((__pyx_v_idx - __pyx_v_len_) + 1);

    /* "cyac/ac.pyx":158
 *             len_ = self.key_lens[val]
 *             start_offset = idx - len_ + 1
 *             end_offset = idx + 1             # <<<<<<<<<<<<<<
 *             res.push_back(Matched(val, start_offset, end_offset))
 *             if e[0].next_ < 0:
 */
    __pyx_v_end_offset = (__pyx_v_idx + 1);

    /* "cyac/ac.pyx":159
 *             start_offset = idx - len_ + 1
 *             end_offset = idx + 1
 *             res.push_back(Matched(val, start_offset, end_offset))             # <<<<<<<<<<<<<<
 *             if e[0].next_ < 0:
 *                 break
 */
    __pyx_t_3.val = __pyx_v_val;
    __pyx_t_3.start = __pyx_v_start_offset;
    __pyx_t_3.end = __pyx_v_end_offset;
    try {
      __pyx_v_res.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 159, __pyx_L1_error)
    }

    /* "cyac/ac.pyx":160
 *             end_offset = idx + 1
 *             res.push_back(Matched(val, start_offset, end_offset))
 *             if e[0].next_ < 0:             # <<<<<<<<<<<<<<
 *                 break
 *             e = &self.output[e[0].next_]
 */
    __pyx_t_1 = (((__pyx_v_e[0]).next_ < 0) != 0);
    if (__pyx_t_1) {

      /* "cyac/ac.pyx":161
 *             res.push_back(Matched(val, start_offset, end_offset))
 *             if e[0].next_ < 0:
 *                 break             # <<<<<<<<<<<<<<
 *             e = &self.output[e[0].next_]
 * 
 */
      goto __pyx_L4_break;

      /* "cyac/ac.pyx":160
 *             end_offset = idx + 1
 *             res.push_back(Matched(val, start_offset, end_offset))
 *             if e[0].next_ < 0:             # <<<<<<<<<<<<<<
 *                 break
 *             e = &self.output[e[0].next_]
 */
    }

    /* "cyac/ac.pyx":162
 *             if e[0].next_ < 0:
 *                 break
 *             e = &self.output[e[0].next_]             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __pyx_v_e = (&(__pyx_v_self->output[(__pyx_v_e[0]).next_]));
  }
  __pyx_L4_break:;

  /* "cyac/ac.pyx":151
 *             free(self.buff)
 * 
 *     cdef inline void __fetch(self, int idx, int nid, vector[Matched]& res):             # <<<<<<<<<<<<<<
 *         cdef OutNode *e = &self.output[nid]
 *         cdef int val, len_, start_offset, end_offset
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyac.ac.AC.__fetch", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cyac/ac.pyx":165
 * 
 *     @classmethod
 *     def build(cls, pats, ignore_case=False, ordered=False):             # <<<<<<<<<<<<<<
 *         """
 *         Build AC automata
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_23build(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_22build[] = "\n        Build AC automata\n        Args:\n            pats : list(unicode)\n            ignore_case : bool\n                Defaults False\n                see Trie's constructor for details.\n            ordered : bool\n                Defaults False\n                see Trie's constructor for details.\n        Returns:\n            ac : AC\n                ac automata\n        Examples:\n            >>> AC.build([\"python\"])\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_23build(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pats = 0;
  PyObject *__pyx_v_ignore_case = 0;
  PyObject *__pyx_v_ordered = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pats,&__pyx_n_s_ignore_case,&__pyx_n_s_ordered,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pats)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ignore_case);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ordered);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 165, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pats = values[0];
    __pyx_v_ignore_case = values[1];
    __pyx_v_ordered = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.ac.AC.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_22build(((PyTypeObject*)__pyx_v_cls), __pyx_v_pats, __pyx_v_ignore_case, __pyx_v_ordered);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_22build(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_pats, PyObject *__pyx_v_ignore_case, PyObject *__pyx_v_ordered) {
  int __pyx_v_idx;
  int __pyx_v_id_;
  int __pyx_v_l;
  int __pyx_v_vk;
  int __pyx_v_fid;
  int __pyx_v_nid;
  int __pyx_v_fs;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_label;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_trie = 0;
  PyObject *__pyx_v_s = NULL;
  struct __pyx_t_4cyac_2ac_QueueNode __pyx_v_queue_node;
  struct __pyx_t_4cyac_2ac_QueueNode __pyx_v_queue_node2;
  int __pyx_v_nlen;
  int *__pyx_v_fails;
  struct __pyx_t_4cyac_2ac_OutNode *__pyx_v_output;
  std::deque<struct __pyx_t_4cyac_2ac_QueueNode>  __pyx_v_q;
  unsigned int *__pyx_v_key_lens;
  int __pyx_v_ro;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_children[0x100];
  int __pyx_v_children_nodes[0x100];
  int __pyx_v_child_num;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_ac = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  std::deque<struct __pyx_t_4cyac_2ac_QueueNode>  __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);

  /* "cyac/ac.pyx":184
 *         cdef int idx, id_, l, vk, fid, nid, fs
 *         cdef byte_t label
 *         cdef Trie trie = Trie(ignore_case, ordered)             # <<<<<<<<<<<<<<
 *         for s in pats:
 *             trie.insert(s)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_ignore_case);
  __Pyx_GIVEREF(__pyx_v_ignore_case);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_ignore_case);
  __Pyx_INCREF(__pyx_v_ordered);
  __Pyx_GIVEREF(__pyx_v_ordered);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ordered);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4cyac_4trie_Trie), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_trie = ((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cyac/ac.pyx":185
 *         cdef byte_t label
 *         cdef Trie trie = Trie(ignore_case, ordered)
 *         for s in pats:             # <<<<<<<<<<<<<<
 *             trie.insert(s)
 *         cdef QueueNode queue_node, queue_node2
 */
  if (likely(PyList_CheckExact(__pyx_v_pats)) || PyTuple_CheckExact(__pyx_v_pats)) {
    __pyx_t_2 = __pyx_v_pats; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_pats); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 185, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 185, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 185, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":186
 *         cdef Trie trie = Trie(ignore_case, ordered)
 *         for s in pats:
 *             trie.insert(s)             # <<<<<<<<<<<<<<
 *         cdef QueueNode queue_node, queue_node2
 *         cdef int nlen = trie.array_size
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(0, 186, __pyx_L1_error)
    (void)(((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->insert(__pyx_v_trie, ((PyObject*)__pyx_v_s), 0));

    /* "cyac/ac.pyx":185
 *         cdef byte_t label
 *         cdef Trie trie = Trie(ignore_case, ordered)
 *         for s in pats:             # <<<<<<<<<<<<<<
 *             trie.insert(s)
 *         cdef QueueNode queue_node, queue_node2
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyac/ac.pyx":188
 *             trie.insert(s)
 *         cdef QueueNode queue_node, queue_node2
 *         cdef int nlen = trie.array_size             # <<<<<<<<<<<<<<
 *         cdef int* fails = <int*> malloc(sizeof(int)*nlen)
 *         memset(fails, -1, sizeof(int)*nlen)
 */
  __pyx_t_5 = __pyx_v_trie->array_size;
  __pyx_v_nlen = __pyx_t_5;

  /* "cyac/ac.pyx":189
 *         cdef QueueNode queue_node, queue_node2
 *         cdef int nlen = trie.array_size
 *         cdef int* fails = <int*> malloc(sizeof(int)*nlen)             # <<<<<<<<<<<<<<
 *         memset(fails, -1, sizeof(int)*nlen)
 *         cdef OutNode* output = <OutNode*> malloc(sizeof(OutNode)*nlen)
 */
  __pyx_v_fails = ((int *)malloc(((sizeof(int)) * __pyx_v_nlen)));

  /* "cyac/ac.pyx":190
 *         cdef int nlen = trie.array_size
 *         cdef int* fails = <int*> malloc(sizeof(int)*nlen)
 *         memset(fails, -1, sizeof(int)*nlen)             # <<<<<<<<<<<<<<
 *         cdef OutNode* output = <OutNode*> malloc(sizeof(OutNode)*nlen)
 *         memset(output, -1, sizeof(OutNode)*nlen)
 */
  (void)(memset(__pyx_v_fails, -1, ((sizeof(int)) * __pyx_v_nlen)));

  /* "cyac/ac.pyx":191
 *         cdef int* fails = <int*> malloc(sizeof(int)*nlen)
 *         memset(fails, -1, sizeof(int)*nlen)
 *         cdef OutNode* output = <OutNode*> malloc(sizeof(OutNode)*nlen)             # <<<<<<<<<<<<<<
 *         memset(output, -1, sizeof(OutNode)*nlen)
 *         cdef deque[QueueNode] q = deque[QueueNode]()
 */
  __pyx_v_output = ((struct __pyx_t_4cyac_2ac_OutNode *)malloc(((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_nlen)));

  /* "cyac/ac.pyx":192
 *         memset(fails, -1, sizeof(int)*nlen)
 *         cdef OutNode* output = <OutNode*> malloc(sizeof(OutNode)*nlen)
 *         memset(output, -1, sizeof(OutNode)*nlen)             # <<<<<<<<<<<<<<
 *         cdef deque[QueueNode] q = deque[QueueNode]()
 *         key_lens = <unsigned int*> malloc(sizeof(unsigned int) * trie.leaf_size)
 */
  (void)(memset(__pyx_v_output, -1, ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_nlen)));

  /* "cyac/ac.pyx":193
 *         cdef OutNode* output = <OutNode*> malloc(sizeof(OutNode)*nlen)
 *         memset(output, -1, sizeof(OutNode)*nlen)
 *         cdef deque[QueueNode] q = deque[QueueNode]()             # <<<<<<<<<<<<<<
 *         key_lens = <unsigned int*> malloc(sizeof(unsigned int) * trie.leaf_size)
 *         memset(key_lens, 0, sizeof(unsigned int) * trie.leaf_size)
 */
  try {
    __pyx_t_6 = std::deque<struct __pyx_t_4cyac_2ac_QueueNode> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 193, __pyx_L1_error)
  }
  __pyx_v_q = __pyx_t_6;

  /* "cyac/ac.pyx":194
 *         memset(output, -1, sizeof(OutNode)*nlen)
 *         cdef deque[QueueNode] q = deque[QueueNode]()
 *         key_lens = <unsigned int*> malloc(sizeof(unsigned int) * trie.leaf_size)             # <<<<<<<<<<<<<<
 *         memset(key_lens, 0, sizeof(unsigned int) * trie.leaf_size)
 *         cdef int ro = 0
 */
  __pyx_v_key_lens = ((unsigned int *)malloc(((sizeof(unsigned int)) * __pyx_v_trie->leaf_size)));

  /* "cyac/ac.pyx":195
 *         cdef deque[QueueNode] q = deque[QueueNode]()
 *         key_lens = <unsigned int*> malloc(sizeof(unsigned int) * trie.leaf_size)
 *         memset(key_lens, 0, sizeof(unsigned int) * trie.leaf_size)             # <<<<<<<<<<<<<<
 *         cdef int ro = 0
 *         fails[ro] = ro
 */
  (void)(memset(__pyx_v_key_lens, 0, ((sizeof(unsigned int)) * __pyx_v_trie->leaf_size)));

  /* "cyac/ac.pyx":196
 *         key_lens = <unsigned int*> malloc(sizeof(unsigned int) * trie.leaf_size)
 *         memset(key_lens, 0, sizeof(unsigned int) * trie.leaf_size)
 *         cdef int ro = 0             # <<<<<<<<<<<<<<
 *         fails[ro] = ro
 *         cdef byte_t children[256]
 */
  __pyx_v_ro = 0;

  /* "cyac/ac.pyx":197
 *         memset(key_lens, 0, sizeof(unsigned int) * trie.leaf_size)
 *         cdef int ro = 0
 *         fails[ro] = ro             # <<<<<<<<<<<<<<
 *         cdef byte_t children[256]
 *         cdef int children_nodes[256]
 */
  (__pyx_v_fails[__pyx_v_ro]) = __pyx_v_ro;

  /* "cyac/ac.pyx":200
 *         cdef byte_t children[256]
 *         cdef int children_nodes[256]
 *         child_num = trie.children(ro, children, children_nodes, 256)             # <<<<<<<<<<<<<<
 *         for idx in range(child_num):
 *             label = children[idx]
 */
  __pyx_v_child_num = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->children(__pyx_v_trie, __pyx_v_ro, __pyx_v_children, __pyx_v_children_nodes, 0x100);

  /* "cyac/ac.pyx":201
 *         cdef int children_nodes[256]
 *         child_num = trie.children(ro, children, children_nodes, 256)
 *         for idx in range(child_num):             # <<<<<<<<<<<<<<
 *             label = children[idx]
 *             id_ = children_nodes[idx]
 */
  __pyx_t_5 = __pyx_v_child_num;
  __pyx_t_7 = __pyx_t_5;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_idx = __pyx_t_8;

    /* "cyac/ac.pyx":202
 *         child_num = trie.children(ro, children, children_nodes, 256)
 *         for idx in range(child_num):
 *             label = children[idx]             # <<<<<<<<<<<<<<
 *             id_ = children_nodes[idx]
 *             # print("child[%s][%s] = %s" % (ro, label, id_))
 */
    __pyx_v_label = (__pyx_v_children[__pyx_v_idx]);

    /* "cyac/ac.pyx":203
 *         for idx in range(child_num):
 *             label = children[idx]
 *             id_ = children_nodes[idx]             # <<<<<<<<<<<<<<
 *             # print("child[%s][%s] = %s" % (ro, label, id_))
 *             queue_node.node_id = id_
 */
    __pyx_v_id_ = (__pyx_v_children_nodes[__pyx_v_idx]);

    /* "cyac/ac.pyx":205
 *             id_ = children_nodes[idx]
 *             # print("child[%s][%s] = %s" % (ro, label, id_))
 *             queue_node.node_id = id_             # <<<<<<<<<<<<<<
 *             queue_node.node_label = label
 *             queue_node.len = 1
 */
    __pyx_v_queue_node.node_id = __pyx_v_id_;

    /* "cyac/ac.pyx":206
 *             # print("child[%s][%s] = %s" % (ro, label, id_))
 *             queue_node.node_id = id_
 *             queue_node.node_label = label             # <<<<<<<<<<<<<<
 *             queue_node.len = 1
 *             q.push_back(queue_node)
 */
    __pyx_v_queue_node.node_label = __pyx_v_label;

    /* "cyac/ac.pyx":207
 *             queue_node.node_id = id_
 *             queue_node.node_label = label
 *             queue_node.len = 1             # <<<<<<<<<<<<<<
 *             q.push_back(queue_node)
 *             fails[id_] = ro
 */
    __pyx_v_queue_node.len = 1;

    /* "cyac/ac.pyx":208
 *             queue_node.node_label = label
 *             queue_node.len = 1
 *             q.push_back(queue_node)             # <<<<<<<<<<<<<<
 *             fails[id_] = ro
 *         while q.size() > 0:
 */
    __pyx_v_q.push_back(__pyx_v_queue_node);

    /* "cyac/ac.pyx":209
 *             queue_node.len = 1
 *             q.push_back(queue_node)
 *             fails[id_] = ro             # <<<<<<<<<<<<<<
 *         while q.size() > 0:
 *             queue_node2 = q.front()
 */
    (__pyx_v_fails[__pyx_v_id_]) = __pyx_v_ro;
  }

  /* "cyac/ac.pyx":210
 *             q.push_back(queue_node)
 *             fails[id_] = ro
 *         while q.size() > 0:             # <<<<<<<<<<<<<<
 *             queue_node2 = q.front()
 *             q.pop_front()
 */
  while (1) {
    __pyx_t_9 = ((__pyx_v_q.size() > 0) != 0);
    if (!__pyx_t_9) break;

    /* "cyac/ac.pyx":211
 *             fails[id_] = ro
 *         while q.size() > 0:
 *             queue_node2 = q.front()             # <<<<<<<<<<<<<<
 *             q.pop_front()
 *             # print("queue_node2", queue_node2)
 */
    __pyx_v_queue_node2 = __pyx_v_q.front();

    /* "cyac/ac.pyx":212
 *         while q.size() > 0:
 *             queue_node2 = q.front()
 *             q.pop_front()             # <<<<<<<<<<<<<<
 *             # print("queue_node2", queue_node2)
 *             nid = queue_node2.node_id
 */
    __pyx_v_q.pop_front();

    /* "cyac/ac.pyx":214
 *             q.pop_front()
 *             # print("queue_node2", queue_node2)
 *             nid = queue_node2.node_id             # <<<<<<<<<<<<<<
 *             l = queue_node2.len
 *             vk = trie.value(nid)
 */
    __pyx_t_5 = __pyx_v_queue_node2.node_id;
    __pyx_v_nid = __pyx_t_5;

    /* "cyac/ac.pyx":215
 *             # print("queue_node2", queue_node2)
 *             nid = queue_node2.node_id
 *             l = queue_node2.len             # <<<<<<<<<<<<<<
 *             vk = trie.value(nid)
 *             if vk >= 0:
 */
    __pyx_t_5 = __pyx_v_queue_node2.len;
    __pyx_v_l = __pyx_t_5;

    /* "cyac/ac.pyx":216
 *             nid = queue_node2.node_id
 *             l = queue_node2.len
 *             vk = trie.value(nid)             # <<<<<<<<<<<<<<
 *             if vk >= 0:
 *                 key_lens[vk] = l
 */
    __pyx_v_vk = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->value(__pyx_v_trie, __pyx_v_nid);

    /* "cyac/ac.pyx":217
 *             l = queue_node2.len
 *             vk = trie.value(nid)
 *             if vk >= 0:             # <<<<<<<<<<<<<<
 *                 key_lens[vk] = l
 *                 # print("output[%s].value = %s, label: %s" % (nid, vk, queue_node2.node_label))
 */
    __pyx_t_9 = ((__pyx_v_vk >= 0) != 0);
    if (__pyx_t_9) {

      /* "cyac/ac.pyx":218
 *             vk = trie.value(nid)
 *             if vk >= 0:
 *                 key_lens[vk] = l             # <<<<<<<<<<<<<<
 *                 # print("output[%s].value = %s, label: %s" % (nid, vk, queue_node2.node_label))
 *                 output[nid].value = vk
 */
      (__pyx_v_key_lens[__pyx_v_vk]) = __pyx_v_l;

      /* "cyac/ac.pyx":220
 *                 key_lens[vk] = l
 *                 # print("output[%s].value = %s, label: %s" % (nid, vk, queue_node2.node_label))
 *                 output[nid].value = vk             # <<<<<<<<<<<<<<
 *             child_num = trie.children(nid, children, children_nodes, 256)
 *             for idx in range(child_num):
 */
      (__pyx_v_output[__pyx_v_nid]).value = __pyx_v_vk;

      /* "cyac/ac.pyx":217
 *             l = queue_node2.len
 *             vk = trie.value(nid)
 *             if vk >= 0:             # <<<<<<<<<<<<<<
 *                 key_lens[vk] = l
 *                 # print("output[%s].value = %s, label: %s" % (nid, vk, queue_node2.node_label))
 */
    }

    /* "cyac/ac.pyx":221
 *                 # print("output[%s].value = %s, label: %s" % (nid, vk, queue_node2.node_label))
 *                 output[nid].value = vk
 *             child_num = trie.children(nid, children, children_nodes, 256)             # <<<<<<<<<<<<<<
 *             for idx in range(child_num):
 *                 # print("child_idx %d of %d" % (idx, nid))
 */
    __pyx_v_child_num = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->children(__pyx_v_trie, __pyx_v_nid, __pyx_v_children, __pyx_v_children_nodes, 0x100);

    /* "cyac/ac.pyx":222
 *                 output[nid].value = vk
 *             child_num = trie.children(nid, children, children_nodes, 256)
 *             for idx in range(child_num):             # <<<<<<<<<<<<<<
 *                 # print("child_idx %d of %d" % (idx, nid))
 *                 label = children[idx]
 */
    __pyx_t_5 = __pyx_v_child_num;
    __pyx_t_7 = __pyx_t_5;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_idx = __pyx_t_8;

      /* "cyac/ac.pyx":224
 *             for idx in range(child_num):
 *                 # print("child_idx %d of %d" % (idx, nid))
 *                 label = children[idx]             # <<<<<<<<<<<<<<
 *                 id_ = children_nodes[idx]
 *                 # print("child[%s][%s] = %s" % (nid, label, id_))
 */
      __pyx_v_label = (__pyx_v_children[__pyx_v_idx]);

      /* "cyac/ac.pyx":225
 *                 # print("child_idx %d of %d" % (idx, nid))
 *                 label = children[idx]
 *                 id_ = children_nodes[idx]             # <<<<<<<<<<<<<<
 *                 # print("child[%s][%s] = %s" % (nid, label, id_))
 *                 queue_node.node_id = id_
 */
      __pyx_v_id_ = (__pyx_v_children_nodes[__pyx_v_idx]);

      /* "cyac/ac.pyx":227
 *                 id_ = children_nodes[idx]
 *                 # print("child[%s][%s] = %s" % (nid, label, id_))
 *                 queue_node.node_id = id_             # <<<<<<<<<<<<<<
 *                 queue_node.node_label = label
 *                 queue_node.len = l + 1
 */
      __pyx_v_queue_node.node_id = __pyx_v_id_;

      /* "cyac/ac.pyx":228
 *                 # print("child[%s][%s] = %s" % (nid, label, id_))
 *                 queue_node.node_id = id_
 *                 queue_node.node_label = label             # <<<<<<<<<<<<<<
 *                 queue_node.len = l + 1
 *                 q.push_back(queue_node)
 */
      __pyx_v_queue_node.node_label = __pyx_v_label;

      /* "cyac/ac.pyx":229
 *                 queue_node.node_id = id_
 *                 queue_node.node_label = label
 *                 queue_node.len = l + 1             # <<<<<<<<<<<<<<
 *                 q.push_back(queue_node)
 *                 fid = nid
 */
      __pyx_v_queue_node.len = (__pyx_v_l + 1);

      /* "cyac/ac.pyx":230
 *                 queue_node.node_label = label
 *                 queue_node.len = l + 1
 *                 q.push_back(queue_node)             # <<<<<<<<<<<<<<
 *                 fid = nid
 *                 while fid != ro:
 */
      __pyx_v_q.push_back(__pyx_v_queue_node);

      /* "cyac/ac.pyx":231
 *                 queue_node.len = l + 1
 *                 q.push_back(queue_node)
 *                 fid = nid             # <<<<<<<<<<<<<<
 *                 while fid != ro:
 *                     fs = fails[fid]
 */
      __pyx_v_fid = __pyx_v_nid;

      /* "cyac/ac.pyx":232
 *                 q.push_back(queue_node)
 *                 fid = nid
 *                 while fid != ro:             # <<<<<<<<<<<<<<
 *                     fs = fails[fid]
 *                     if trie.has_label(fs, label):
 */
      while (1) {
        __pyx_t_9 = ((__pyx_v_fid != __pyx_v_ro) != 0);
        if (!__pyx_t_9) break;

        /* "cyac/ac.pyx":233
 *                 fid = nid
 *                 while fid != ro:
 *                     fs = fails[fid]             # <<<<<<<<<<<<<<
 *                     if trie.has_label(fs, label):
 *                         fid = trie.child(fs, label)
 */
        __pyx_v_fs = (__pyx_v_fails[__pyx_v_fid]);

        /* "cyac/ac.pyx":234
 *                 while fid != ro:
 *                     fs = fails[fid]
 *                     if trie.has_label(fs, label):             # <<<<<<<<<<<<<<
 *                         fid = trie.child(fs, label)
 *                         break
 */
        __pyx_t_9 = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->has_label(__pyx_v_trie, __pyx_v_fs, __pyx_v_label) != 0);
        if (__pyx_t_9) {

          /* "cyac/ac.pyx":235
 *                     fs = fails[fid]
 *                     if trie.has_label(fs, label):
 *                         fid = trie.child(fs, label)             # <<<<<<<<<<<<<<
 *                         break
 *                     fid = fails[fid]
 */
          __pyx_v_fid = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->child(__pyx_v_trie, __pyx_v_fs, __pyx_v_label);

          /* "cyac/ac.pyx":236
 *                     if trie.has_label(fs, label):
 *                         fid = trie.child(fs, label)
 *                         break             # <<<<<<<<<<<<<<
 *                     fid = fails[fid]
 *                 fails[id_] = fid
 */
          goto __pyx_L13_break;

          /* "cyac/ac.pyx":234
 *                 while fid != ro:
 *                     fs = fails[fid]
 *                     if trie.has_label(fs, label):             # <<<<<<<<<<<<<<
 *                         fid = trie.child(fs, label)
 *                         break
 */
        }

        /* "cyac/ac.pyx":237
 *                         fid = trie.child(fs, label)
 *                         break
 *                     fid = fails[fid]             # <<<<<<<<<<<<<<
 *                 fails[id_] = fid
 *                 if trie.has_value(fid):
 */
        __pyx_v_fid = (__pyx_v_fails[__pyx_v_fid]);
      }
      __pyx_L13_break:;

      /* "cyac/ac.pyx":238
 *                         break
 *                     fid = fails[fid]
 *                 fails[id_] = fid             # <<<<<<<<<<<<<<
 *                 if trie.has_value(fid):
 *                     output[id_].next_ = fid
 */
      (__pyx_v_fails[__pyx_v_id_]) = __pyx_v_fid;

      /* "cyac/ac.pyx":239
 *                     fid = fails[fid]
 *                 fails[id_] = fid
 *                 if trie.has_value(fid):             # <<<<<<<<<<<<<<
 *                     output[id_].next_ = fid
 *                     # print("output[%s].next_ = %s" % (id_, fid))
 */
      __pyx_t_9 = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_trie->__pyx_vtab)->has_value(__pyx_v_trie, __pyx_v_fid) != 0);
      if (__pyx_t_9) {

        /* "cyac/ac.pyx":240
 *                 fails[id_] = fid
 *                 if trie.has_value(fid):
 *                     output[id_].next_ = fid             # <<<<<<<<<<<<<<
 *                     # print("output[%s].next_ = %s" % (id_, fid))
 *         ac = AC()
 */
        (__pyx_v_output[__pyx_v_id_]).next_ = __pyx_v_fid;

        /* "cyac/ac.pyx":239
 *                     fid = fails[fid]
 *                 fails[id_] = fid
 *                 if trie.has_value(fid):             # <<<<<<<<<<<<<<
 *                     output[id_].next_ = fid
 *                     # print("output[%s].next_ = %s" % (id_, fid))
 */
      }
    }
  }

  /* "cyac/ac.pyx":242
 *                     output[id_].next_ = fid
 *                     # print("output[%s].next_ = %s" % (id_, fid))
 *         ac = AC()             # <<<<<<<<<<<<<<
 *         ac.trie = trie
 *         ac.output = output
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_4cyac_2ac_AC)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ac = ((struct __pyx_obj_4cyac_2ac_AC *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cyac/ac.pyx":243
 *                     # print("output[%s].next_ = %s" % (id_, fid))
 *         ac = AC()
 *         ac.trie = trie             # <<<<<<<<<<<<<<
 *         ac.output = output
 *         ac.fails = fails
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_trie));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_trie));
  __Pyx_GOTREF(__pyx_v_ac->trie);
  __Pyx_DECREF(((PyObject *)__pyx_v_ac->trie));
  __pyx_v_ac->trie = __pyx_v_trie;

  /* "cyac/ac.pyx":244
 *         ac = AC()
 *         ac.trie = trie
 *         ac.output = output             # <<<<<<<<<<<<<<
 *         ac.fails = fails
 *         ac.key_lens = key_lens
 */
  __pyx_v_ac->output = __pyx_v_output;

  /* "cyac/ac.pyx":245
 *         ac.trie = trie
 *         ac.output = output
 *         ac.fails = fails             # <<<<<<<<<<<<<<
 *         ac.key_lens = key_lens
 *         return ac
 */
  __pyx_v_ac->fails = __pyx_v_fails;

  /* "cyac/ac.pyx":246
 *         ac.output = output
 *         ac.fails = fails
 *         ac.key_lens = key_lens             # <<<<<<<<<<<<<<
 *         return ac
 * 
 */
  __pyx_v_ac->key_lens = __pyx_v_key_lens;

  /* "cyac/ac.pyx":247
 *         ac.fails = fails
 *         ac.key_lens = key_lens
 *         return ac             # <<<<<<<<<<<<<<
 * 
 *     def match(self, unicode text not None, sep = None, return_all = False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ac));
  __pyx_r = ((PyObject *)__pyx_v_ac);
  goto __pyx_L0;

  /* "cyac/ac.pyx":165
 * 
 *     @classmethod
 *     def build(cls, pats, ignore_case=False, ordered=False):             # <<<<<<<<<<<<<<
 *         """
 *         Build AC automata
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cyac.ac.AC.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trie);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_ac);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_4cyac_2ac_2AC_26generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cyac/ac.pyx":249
 *         return ac
 * 
 *     def match(self, unicode text not None, sep = None, return_all = False):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_25match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_24match[] = "\n        extract trie's keys from given string. \n        Args:\n            text : unicode\n            sep : set(int) | None\n                If you specify seperators. e.g. set([ord(' ')]), \n                it only matches strings tween seperators.\n            return_all: by default, only return the longest. it's useful only when sep is None\n        Iterates:\n            matched: tuple(id, start_offset, end_offset)\n        Examples:\n            >>> for id_, start_offset, end_offset in ac.match_longest(\"python\", set([ord(\" \")])):\n            >>>     print(id_, start_offset, end_offset)\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_25match(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_sep = 0;
  PyObject *__pyx_v_return_all = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_sep,&__pyx_n_s_return_all,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_return_all);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "match") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_sep = values[1];
    __pyx_v_return_all = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("match", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.ac.AC.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 0, "text", 1))) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_24match(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), __pyx_v_text, __pyx_v_sep, __pyx_v_return_all);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_24match(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_sep, PyObject *__pyx_v_return_all) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("match", 0);
  __pyx_cur_scope = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)__pyx_tp_new_4cyac_2ac___pyx_scope_struct_4_match(__pyx_ptype_4cyac_2ac___pyx_scope_struct_4_match, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 249, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_text = __pyx_v_text;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);
  __pyx_cur_scope->__pyx_v_sep = __pyx_v_sep;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sep);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sep);
  __pyx_cur_scope->__pyx_v_return_all = __pyx_v_return_all;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_return_all);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_return_all);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_4cyac_2ac_2AC_26generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_match, __pyx_n_s_AC_match, __pyx_n_s_cyac_ac); if (unlikely(!gen)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cyac.ac.AC.match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_4cyac_2ac_2AC_26generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *__pyx_cur_scope = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::vector<struct __pyx_t_4cyac_2ac_Matched> ::iterator __pyx_t_8;
  struct __pyx_t_4cyac_2ac_Matched __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("match", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_yield;
    case 2: goto __pyx_L20_resume_from_yield;
    case 3: goto __pyx_L34_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "cyac/ac.pyx":264
 *             >>>     print(id_, start_offset, end_offset)
 *         """
 *         cdef xstring xstr = xstring(text)             # <<<<<<<<<<<<<<
 *         cdef xstring prev_xstr = xstr
 *         cdef ignore_case_alignment align = None
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_xstring), __pyx_cur_scope->__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_xstr = ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/ac.pyx":265
 *         """
 *         cdef xstring xstr = xstring(text)
 *         cdef xstring prev_xstr = xstr             # <<<<<<<<<<<<<<
 *         cdef ignore_case_alignment align = None
 *         cdef vector[Matched] vect
 */
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_xstr));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v_xstr));
  __pyx_cur_scope->__pyx_v_prev_xstr = __pyx_cur_scope->__pyx_v_xstr;

  /* "cyac/ac.pyx":266
 *         cdef xstring xstr = xstring(text)
 *         cdef xstring prev_xstr = xstr
 *         cdef ignore_case_alignment align = None             # <<<<<<<<<<<<<<
 *         cdef vector[Matched] vect
 *         cdef Matched m
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __pyx_cur_scope->__pyx_v_align = ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)Py_None);

  /* "cyac/ac.pyx":269
 *         cdef vector[Matched] vect
 *         cdef Matched m
 *         if self.trie.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xstr)
 *             xstr = align.lowercase
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->trie->ignore_case != 0);
  if (__pyx_t_2) {

    /* "cyac/ac.pyx":270
 *         cdef Matched m
 *         if self.trie.ignore_case:
 *             align = ignore_case_alignment(xstr)             # <<<<<<<<<<<<<<
 *             xstr = align.lowercase
 *         cdef byte_t *bytes_ = xstr.bytes_
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_4cyac_7xstring_ignore_case_alignment), ((PyObject *)__pyx_cur_scope->__pyx_v_xstr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_align));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_align, ((struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":271
 *         if self.trie.ignore_case:
 *             align = ignore_case_alignment(xstr)
 *             xstr = align.lowercase             # <<<<<<<<<<<<<<
 *         cdef byte_t *bytes_ = xstr.bytes_
 *         cdef int byte_num = xstr.byte_num
 */
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_align->lowercase);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_xstr));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_xstr, ((struct __pyx_obj_4cyac_7xstring_xstring *)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cyac/ac.pyx":269
 *         cdef vector[Matched] vect
 *         cdef Matched m
 *         if self.trie.ignore_case:             # <<<<<<<<<<<<<<
 *             align = ignore_case_alignment(xstr)
 *             xstr = align.lowercase
 */
  }

  /* "cyac/ac.pyx":272
 *             align = ignore_case_alignment(xstr)
 *             xstr = align.lowercase
 *         cdef byte_t *bytes_ = xstr.bytes_             # <<<<<<<<<<<<<<
 *         cdef int byte_num = xstr.byte_num
 *         cdef int nid_, i, chr_
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_xstr->bytes_;
  __pyx_cur_scope->__pyx_v_bytes_ = __pyx_t_3;

  /* "cyac/ac.pyx":273
 *             xstr = align.lowercase
 *         cdef byte_t *bytes_ = xstr.bytes_
 *         cdef int byte_num = xstr.byte_num             # <<<<<<<<<<<<<<
 *         cdef int nid_, i, chr_
 *         cdef int nid = 0
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_xstr->byte_num;
  __pyx_cur_scope->__pyx_v_byte_num = __pyx_t_4;

  /* "cyac/ac.pyx":275
 *         cdef int byte_num = xstr.byte_num
 *         cdef int nid_, i, chr_
 *         cdef int nid = 0             # <<<<<<<<<<<<<<
 *         cdef byte_t b
 * 
 */
  __pyx_cur_scope->__pyx_v_nid = 0;

  /* "cyac/ac.pyx":278
 *         cdef byte_t b
 * 
 *         if sep is None:             # <<<<<<<<<<<<<<
 *             for i in range(byte_num):
 *                 b = bytes_[i]
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_sep == Py_None);
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {

    /* "cyac/ac.pyx":279
 * 
 *         if sep is None:
 *             for i in range(byte_num):             # <<<<<<<<<<<<<<
 *                 b = bytes_[i]
 *                 while True:
 */
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_byte_num;
    __pyx_t_6 = __pyx_t_4;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_cur_scope->__pyx_v_i = __pyx_t_7;

      /* "cyac/ac.pyx":280
 *         if sep is None:
 *             for i in range(byte_num):
 *                 b = bytes_[i]             # <<<<<<<<<<<<<<
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_bytes_[__pyx_cur_scope->__pyx_v_i]);

      /* "cyac/ac.pyx":281
 *             for i in range(byte_num):
 *                 b = bytes_[i]
 *                 while True:             # <<<<<<<<<<<<<<
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:
 */
      while (1) {

        /* "cyac/ac.pyx":282
 *                 b = bytes_[i]
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)             # <<<<<<<<<<<<<<
 *                     if nid_ >= 0:
 *                         nid = nid_
 */
        __pyx_cur_scope->__pyx_v_nid_ = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->trie->__pyx_vtab)->child(__pyx_cur_scope->__pyx_v_self->trie, __pyx_cur_scope->__pyx_v_nid, __pyx_cur_scope->__pyx_v_b);

        /* "cyac/ac.pyx":283
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:             # <<<<<<<<<<<<<<
 *                         nid = nid_
 *                         if return_all:
 */
        __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_nid_ >= 0) != 0);
        if (__pyx_t_5) {

          /* "cyac/ac.pyx":284
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:
 *                         nid = nid_             # <<<<<<<<<<<<<<
 *                         if return_all:
 *                             nid2 = nid
 */
          __pyx_cur_scope->__pyx_v_nid = __pyx_cur_scope->__pyx_v_nid_;

          /* "cyac/ac.pyx":285
 *                     if nid_ >= 0:
 *                         nid = nid_
 *                         if return_all:             # <<<<<<<<<<<<<<
 *                             nid2 = nid
 *                             while nid2 > 0:
 */
          __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_return_all); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
          if (__pyx_t_5) {

            /* "cyac/ac.pyx":286
 *                         nid = nid_
 *                         if return_all:
 *                             nid2 = nid             # <<<<<<<<<<<<<<
 *                             while nid2 > 0:
 *                                 if self.trie.has_value(nid2):
 */
            __pyx_cur_scope->__pyx_v_nid2 = __pyx_cur_scope->__pyx_v_nid;

            /* "cyac/ac.pyx":287
 *                         if return_all:
 *                             nid2 = nid
 *                             while nid2 > 0:             # <<<<<<<<<<<<<<
 *                                 if self.trie.has_value(nid2):
 *                                     vect.clear()
 */
            while (1) {
              __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_nid2 > 0) != 0);
              if (!__pyx_t_5) break;

              /* "cyac/ac.pyx":288
 *                             nid2 = nid
 *                             while nid2 > 0:
 *                                 if self.trie.has_value(nid2):             # <<<<<<<<<<<<<<
 *                                     vect.clear()
 *                                     self.__fetch(i, nid2, vect)
 */
              __pyx_t_5 = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->trie->__pyx_vtab)->has_value(__pyx_cur_scope->__pyx_v_self->trie, __pyx_cur_scope->__pyx_v_nid2) != 0);
              if (__pyx_t_5) {

                /* "cyac/ac.pyx":289
 *                             while nid2 > 0:
 *                                 if self.trie.has_value(nid2):
 *                                     vect.clear()             # <<<<<<<<<<<<<<
 *                                     self.__fetch(i, nid2, vect)
 *                                     for m in vect:
 */
                __pyx_cur_scope->__pyx_v_vect.clear();

                /* "cyac/ac.pyx":290
 *                                 if self.trie.has_value(nid2):
 *                                     vect.clear()
 *                                     self.__fetch(i, nid2, vect)             # <<<<<<<<<<<<<<
 *                                     for m in vect:
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 */
                __pyx_f_4cyac_2ac_2AC___fetch(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_i, __pyx_cur_scope->__pyx_v_nid2, __pyx_cur_scope->__pyx_v_vect);

                /* "cyac/ac.pyx":291
 *                                     vect.clear()
 *                                     self.__fetch(i, nid2, vect)
 *                                     for m in vect:             # <<<<<<<<<<<<<<
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                                 nid2 = self.fails[nid2]
 */
                __pyx_t_8 = __pyx_cur_scope->__pyx_v_vect.begin();
                for (;;) {
                  if (!(__pyx_t_8 != __pyx_cur_scope->__pyx_v_vect.end())) break;
                  __pyx_t_9 = *__pyx_t_8;
                  ++__pyx_t_8;
                  __pyx_cur_scope->__pyx_v_m = __pyx_t_9;

                  /* "cyac/ac.pyx":292
 *                                     self.__fetch(i, nid2, vect)
 *                                     for m in vect:
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1             # <<<<<<<<<<<<<<
 *                                 nid2 = self.fails[nid2]
 *                         elif self.trie.has_value(nid):
 */
                  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_m.val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, __pyx_cur_scope->__pyx_v_m.start)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 292, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __pyx_t_11 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, (__pyx_cur_scope->__pyx_v_m.end - 1)) + 1)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 292, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 292, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_11);
                  PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
                  __pyx_t_1 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_11 = 0;
                  __pyx_r = __pyx_t_12;
                  __pyx_t_12 = 0;
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                  /* return from generator, yielding value */
                  __pyx_generator->resume_label = 1;
                  return __pyx_r;
                  __pyx_L17_resume_from_yield:;
                  __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 292, __pyx_L1_error)

                  /* "cyac/ac.pyx":291
 *                                     vect.clear()
 *                                     self.__fetch(i, nid2, vect)
 *                                     for m in vect:             # <<<<<<<<<<<<<<
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                                 nid2 = self.fails[nid2]
 */
                }

                /* "cyac/ac.pyx":288
 *                             nid2 = nid
 *                             while nid2 > 0:
 *                                 if self.trie.has_value(nid2):             # <<<<<<<<<<<<<<
 *                                     vect.clear()
 *                                     self.__fetch(i, nid2, vect)
 */
              }

              /* "cyac/ac.pyx":293
 *                                     for m in vect:
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                                 nid2 = self.fails[nid2]             # <<<<<<<<<<<<<<
 *                         elif self.trie.has_value(nid):
 *                             vect.clear()
 */
              __pyx_cur_scope->__pyx_v_nid2 = (__pyx_cur_scope->__pyx_v_self->fails[__pyx_cur_scope->__pyx_v_nid2]);
            }

            /* "cyac/ac.pyx":285
 *                     if nid_ >= 0:
 *                         nid = nid_
 *                         if return_all:             # <<<<<<<<<<<<<<
 *                             nid2 = nid
 *                             while nid2 > 0:
 */
            goto __pyx_L11;
          }

          /* "cyac/ac.pyx":294
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                                 nid2 = self.fails[nid2]
 *                         elif self.trie.has_value(nid):             # <<<<<<<<<<<<<<
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 */
          __pyx_t_5 = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->trie->__pyx_vtab)->has_value(__pyx_cur_scope->__pyx_v_self->trie, __pyx_cur_scope->__pyx_v_nid) != 0);
          if (__pyx_t_5) {

            /* "cyac/ac.pyx":295
 *                                 nid2 = self.fails[nid2]
 *                         elif self.trie.has_value(nid):
 *                             vect.clear()             # <<<<<<<<<<<<<<
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:
 */
            __pyx_cur_scope->__pyx_v_vect.clear();

            /* "cyac/ac.pyx":296
 *                         elif self.trie.has_value(nid):
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)             # <<<<<<<<<<<<<<
 *                             for m in vect:
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 */
            __pyx_f_4cyac_2ac_2AC___fetch(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_i, __pyx_cur_scope->__pyx_v_nid, __pyx_cur_scope->__pyx_v_vect);

            /* "cyac/ac.pyx":297
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:             # <<<<<<<<<<<<<<
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 */
            __pyx_t_8 = __pyx_cur_scope->__pyx_v_vect.begin();
            for (;;) {
              if (!(__pyx_t_8 != __pyx_cur_scope->__pyx_v_vect.end())) break;
              __pyx_t_9 = *__pyx_t_8;
              ++__pyx_t_8;
              __pyx_cur_scope->__pyx_v_m = __pyx_t_9;

              /* "cyac/ac.pyx":298
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1             # <<<<<<<<<<<<<<
 *                         break
 *                     if nid == 0:
 */
              __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_m.val); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, __pyx_cur_scope->__pyx_v_m.start)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_10 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, (__pyx_cur_scope->__pyx_v_m.end - 1)) + 1)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_12);
              PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_12);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_10);
              __pyx_t_12 = 0;
              __pyx_t_11 = 0;
              __pyx_t_10 = 0;
              __pyx_r = __pyx_t_1;
              __pyx_t_1 = 0;
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, yielding value */
              __pyx_generator->resume_label = 2;
              return __pyx_r;
              __pyx_L20_resume_from_yield:;
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
              __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 298, __pyx_L1_error)

              /* "cyac/ac.pyx":297
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:             # <<<<<<<<<<<<<<
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 */
            }

            /* "cyac/ac.pyx":294
 *                                         yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                                 nid2 = self.fails[nid2]
 *                         elif self.trie.has_value(nid):             # <<<<<<<<<<<<<<
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 */
          }
          __pyx_L11:;

          /* "cyac/ac.pyx":299
 *                             for m in vect:
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break             # <<<<<<<<<<<<<<
 *                     if nid == 0:
 *                         break
 */
          goto __pyx_L9_break;

          /* "cyac/ac.pyx":283
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:             # <<<<<<<<<<<<<<
 *                         nid = nid_
 *                         if return_all:
 */
        }

        /* "cyac/ac.pyx":300
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 *                     if nid == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     nid = self.fails[nid]
 */
        __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_nid == 0) != 0);
        if (__pyx_t_5) {

          /* "cyac/ac.pyx":301
 *                         break
 *                     if nid == 0:
 *                         break             # <<<<<<<<<<<<<<
 *                     nid = self.fails[nid]
 *         else:
 */
          goto __pyx_L9_break;

          /* "cyac/ac.pyx":300
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 *                     if nid == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     nid = self.fails[nid]
 */
        }

        /* "cyac/ac.pyx":302
 *                     if nid == 0:
 *                         break
 *                     nid = self.fails[nid]             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(byte_num):
 */
        __pyx_cur_scope->__pyx_v_nid = (__pyx_cur_scope->__pyx_v_self->fails[__pyx_cur_scope->__pyx_v_nid]);
      }
      __pyx_L9_break:;
    }

    /* "cyac/ac.pyx":278
 *         cdef byte_t b
 * 
 *         if sep is None:             # <<<<<<<<<<<<<<
 *             for i in range(byte_num):
 *                 b = bytes_[i]
 */
    goto __pyx_L5;
  }

  /* "cyac/ac.pyx":304
 *                     nid = self.fails[nid]
 *         else:
 *             for i in range(byte_num):             # <<<<<<<<<<<<<<
 *                 b = bytes_[i]
 *                 while True:
 */
  /*else*/ {
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_byte_num;
    __pyx_t_6 = __pyx_t_4;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_cur_scope->__pyx_v_i = __pyx_t_7;

      /* "cyac/ac.pyx":305
 *         else:
 *             for i in range(byte_num):
 *                 b = bytes_[i]             # <<<<<<<<<<<<<<
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_bytes_[__pyx_cur_scope->__pyx_v_i]);

      /* "cyac/ac.pyx":306
 *             for i in range(byte_num):
 *                 b = bytes_[i]
 *                 while True:             # <<<<<<<<<<<<<<
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:
 */
      while (1) {

        /* "cyac/ac.pyx":307
 *                 b = bytes_[i]
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)             # <<<<<<<<<<<<<<
 *                     if nid_ >= 0:
 *                         nid = nid_
 */
        __pyx_cur_scope->__pyx_v_nid_ = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->trie->__pyx_vtab)->child(__pyx_cur_scope->__pyx_v_self->trie, __pyx_cur_scope->__pyx_v_nid, __pyx_cur_scope->__pyx_v_b);

        /* "cyac/ac.pyx":308
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:             # <<<<<<<<<<<<<<
 *                         nid = nid_
 *                         if self.trie.has_value(nid):
 */
        __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_nid_ >= 0) != 0);
        if (__pyx_t_5) {

          /* "cyac/ac.pyx":309
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:
 *                         nid = nid_             # <<<<<<<<<<<<<<
 *                         if self.trie.has_value(nid):
 *                             if i + 1 < byte_num:
 */
          __pyx_cur_scope->__pyx_v_nid = __pyx_cur_scope->__pyx_v_nid_;

          /* "cyac/ac.pyx":310
 *                     if nid_ >= 0:
 *                         nid = nid_
 *                         if self.trie.has_value(nid):             # <<<<<<<<<<<<<<
 *                             if i + 1 < byte_num:
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 */
          __pyx_t_5 = (((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_cur_scope->__pyx_v_self->trie->__pyx_vtab)->has_value(__pyx_cur_scope->__pyx_v_self->trie, __pyx_cur_scope->__pyx_v_nid) != 0);
          if (__pyx_t_5) {

            /* "cyac/ac.pyx":311
 *                         nid = nid_
 *                         if self.trie.has_value(nid):
 *                             if i + 1 < byte_num:             # <<<<<<<<<<<<<<
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 *                                 if chr_ not in sep:
 */
            __pyx_t_5 = (((__pyx_cur_scope->__pyx_v_i + 1) < __pyx_cur_scope->__pyx_v_byte_num) != 0);
            if (__pyx_t_5) {

              /* "cyac/ac.pyx":312
 *                         if self.trie.has_value(nid):
 *                             if i + 1 < byte_num:
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]             # <<<<<<<<<<<<<<
 *                                 if chr_ not in sep:
 *                                     break
 */
              __pyx_cur_scope->__pyx_v_chr_ = (__pyx_cur_scope->__pyx_v_xstr->chars[(__pyx_cur_scope->__pyx_v_xstr->char_idx_of_byte[(__pyx_cur_scope->__pyx_v_i + 1)])]);

              /* "cyac/ac.pyx":313
 *                             if i + 1 < byte_num:
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 *                                 if chr_ not in sep:             # <<<<<<<<<<<<<<
 *                                     break
 *                             vect.clear()
 */
              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_chr_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_2 = (__pyx_t_5 != 0);
              if (__pyx_t_2) {

                /* "cyac/ac.pyx":314
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 *                                 if chr_ not in sep:
 *                                     break             # <<<<<<<<<<<<<<
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 */
                goto __pyx_L25_break;

                /* "cyac/ac.pyx":313
 *                             if i + 1 < byte_num:
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 *                                 if chr_ not in sep:             # <<<<<<<<<<<<<<
 *                                     break
 *                             vect.clear()
 */
              }

              /* "cyac/ac.pyx":311
 *                         nid = nid_
 *                         if self.trie.has_value(nid):
 *                             if i + 1 < byte_num:             # <<<<<<<<<<<<<<
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 *                                 if chr_ not in sep:
 */
            }

            /* "cyac/ac.pyx":315
 *                                 if chr_ not in sep:
 *                                     break
 *                             vect.clear()             # <<<<<<<<<<<<<<
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:
 */
            __pyx_cur_scope->__pyx_v_vect.clear();

            /* "cyac/ac.pyx":316
 *                                     break
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)             # <<<<<<<<<<<<<<
 *                             for m in vect:
 *                                 if m.start > 0:
 */
            __pyx_f_4cyac_2ac_2AC___fetch(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_i, __pyx_cur_scope->__pyx_v_nid, __pyx_cur_scope->__pyx_v_vect);

            /* "cyac/ac.pyx":317
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:             # <<<<<<<<<<<<<<
 *                                 if m.start > 0:
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 */
            __pyx_t_8 = __pyx_cur_scope->__pyx_v_vect.begin();
            for (;;) {
              if (!(__pyx_t_8 != __pyx_cur_scope->__pyx_v_vect.end())) break;
              __pyx_t_9 = *__pyx_t_8;
              ++__pyx_t_8;
              __pyx_cur_scope->__pyx_v_m = __pyx_t_9;

              /* "cyac/ac.pyx":318
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:
 *                                 if m.start > 0:             # <<<<<<<<<<<<<<
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 *                                     if chr_ not in sep:
 */
              __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_m.start > 0) != 0);
              if (__pyx_t_2) {

                /* "cyac/ac.pyx":319
 *                             for m in vect:
 *                                 if m.start > 0:
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]             # <<<<<<<<<<<<<<
 *                                     if chr_ not in sep:
 *                                         continue
 */
                __pyx_cur_scope->__pyx_v_chr_ = (__pyx_cur_scope->__pyx_v_xstr->chars[(__pyx_cur_scope->__pyx_v_xstr->char_idx_of_byte[(__pyx_cur_scope->__pyx_v_m.start - 1)])]);

                /* "cyac/ac.pyx":320
 *                                 if m.start > 0:
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 *                                     if chr_ not in sep:             # <<<<<<<<<<<<<<
 *                                         continue
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 */
                __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_chr_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_cur_scope->__pyx_v_sep, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 320, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __pyx_t_5 = (__pyx_t_2 != 0);
                if (__pyx_t_5) {

                  /* "cyac/ac.pyx":321
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 *                                     if chr_ not in sep:
 *                                         continue             # <<<<<<<<<<<<<<
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 */
                  goto __pyx_L30_continue;

                  /* "cyac/ac.pyx":320
 *                                 if m.start > 0:
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 *                                     if chr_ not in sep:             # <<<<<<<<<<<<<<
 *                                         continue
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 */
                }

                /* "cyac/ac.pyx":318
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:
 *                                 if m.start > 0:             # <<<<<<<<<<<<<<
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 *                                     if chr_ not in sep:
 */
              }

              /* "cyac/ac.pyx":322
 *                                     if chr_ not in sep:
 *                                         continue
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1             # <<<<<<<<<<<<<<
 *                         break
 *                     if nid == 0:
 */
              __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_m.val); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, __pyx_cur_scope->__pyx_v_m.start)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 322, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_11 = __Pyx_PyInt_From_long((__pyx_f_4cyac_4trie_ignore_case_offset(__pyx_cur_scope->__pyx_v_align, __pyx_cur_scope->__pyx_v_xstr, (__pyx_cur_scope->__pyx_v_m.end - 1)) + 1)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 322, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 322, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_11);
              __pyx_t_1 = 0;
              __pyx_t_10 = 0;
              __pyx_t_11 = 0;
              __pyx_r = __pyx_t_12;
              __pyx_t_12 = 0;
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, yielding value */
              __pyx_generator->resume_label = 3;
              return __pyx_r;
              __pyx_L34_resume_from_yield:;
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
              __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 322, __pyx_L1_error)

              /* "cyac/ac.pyx":317
 *                             vect.clear()
 *                             self.__fetch(i, nid, vect)
 *                             for m in vect:             # <<<<<<<<<<<<<<
 *                                 if m.start > 0:
 *                                     chr_ = xstr.chars[xstr.char_idx_of_byte[m.start - 1]]
 */
              __pyx_L30_continue:;
            }

            /* "cyac/ac.pyx":310
 *                     if nid_ >= 0:
 *                         nid = nid_
 *                         if self.trie.has_value(nid):             # <<<<<<<<<<<<<<
 *                             if i + 1 < byte_num:
 *                                 chr_ = xstr.chars[xstr.char_idx_of_byte[i + 1]]
 */
          }

          /* "cyac/ac.pyx":323
 *                                         continue
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break             # <<<<<<<<<<<<<<
 *                     if nid == 0:
 *                         break
 */
          goto __pyx_L25_break;

          /* "cyac/ac.pyx":308
 *                 while True:
 *                     nid_ = self.trie.child(nid, b)
 *                     if nid_ >= 0:             # <<<<<<<<<<<<<<
 *                         nid = nid_
 *                         if self.trie.has_value(nid):
 */
        }

        /* "cyac/ac.pyx":324
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 *                     if nid == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     nid = self.fails[nid]
 */
        __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_nid == 0) != 0);
        if (__pyx_t_5) {

          /* "cyac/ac.pyx":325
 *                         break
 *                     if nid == 0:
 *                         break             # <<<<<<<<<<<<<<
 *                     nid = self.fails[nid]
 * 
 */
          goto __pyx_L25_break;

          /* "cyac/ac.pyx":324
 *                                 yield m.val, ignore_case_offset(align, xstr, m.start), ignore_case_offset(align, xstr, m.end - 1) + 1
 *                         break
 *                     if nid == 0:             # <<<<<<<<<<<<<<
 *                         break
 *                     nid = self.fails[nid]
 */
        }

        /* "cyac/ac.pyx":326
 *                     if nid == 0:
 *                         break
 *                     nid = self.fails[nid]             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
        __pyx_cur_scope->__pyx_v_nid = (__pyx_cur_scope->__pyx_v_self->fails[__pyx_cur_scope->__pyx_v_nid]);
      }
      __pyx_L25_break:;
    }
  }
  __pyx_L5:;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "cyac/ac.pyx":249
 *         return ac
 * 
 *     def match(self, unicode text not None, sep = None, return_all = False):             # <<<<<<<<<<<<<<
 *         """
 *         extract trie's keys from given string.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("match", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":328
 *                     nid = self.fails[nid]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (AC,), self.__getstate__())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_28__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_28__reduce__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_27__reduce__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_27__reduce__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "cyac/ac.pyx":329
 * 
 *     def __reduce__(self):
 *         return (new_object, (AC,), self.__getstate__())             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_new_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_4cyac_2ac_AC));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_4cyac_2ac_AC));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_4cyac_2ac_AC));
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getstate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":328
 *                     nid = self.fails[nid]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (new_object, (AC,), self.__getstate__())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.ac.AC.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":331
 *         return (new_object, (AC,), self.__getstate__())
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.trie,
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_30__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_30__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_29__getstate__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_29__getstate__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "cyac/ac.pyx":332
 * 
 *     def __getstate__(self):
 *         return (self.trie,             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 *             array_to_bytes(<char*>self.fails, self.trie.array_size * sizeof(int)),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "cyac/ac.pyx":333
 *     def __getstate__(self):
 *         return (self.trie,
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.fails, self.trie.array_size * sizeof(int)),
 *             array_to_bytes(<char*>self.key_lens, self.trie.leaf_size * sizeof(unsigned int)),
 */
  __pyx_t_1 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->output), (__pyx_v_self->trie->array_size * (sizeof(struct __pyx_t_4cyac_2ac_OutNode))), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cyac/ac.pyx":334
 *         return (self.trie,
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 *             array_to_bytes(<char*>self.fails, self.trie.array_size * sizeof(int)),             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.key_lens, self.trie.leaf_size * sizeof(unsigned int)),
 *         )
 */
  __pyx_t_2 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->fails), (__pyx_v_self->trie->array_size * (sizeof(int))), 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cyac/ac.pyx":335
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 *             array_to_bytes(<char*>self.fails, self.trie.array_size * sizeof(int)),
 *             array_to_bytes(<char*>self.key_lens, self.trie.leaf_size * sizeof(unsigned int)),             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = __pyx_f_4cyac_4trie_array_to_bytes(((char *)__pyx_v_self->key_lens), (__pyx_v_self->trie->leaf_size * (sizeof(unsigned int))), 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cyac/ac.pyx":332
 * 
 *     def __getstate__(self):
 *         return (self.trie,             # <<<<<<<<<<<<<<
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 *             array_to_bytes(<char*>self.fails, self.trie.array_size * sizeof(int)),
 */
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->trie));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->trie));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self->trie));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":331
 *         return (new_object, (AC,), self.__getstate__())
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         return (self.trie,
 *             array_to_bytes(<char*>self.output, self.trie.array_size * sizeof(OutNode)),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyac.ac.AC.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":338
 *         )
 * 
 *     def __setstate__(self, data):             # <<<<<<<<<<<<<<
 *         self.trie, output, fails, key_lens = data
 *         if self.output != NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_32__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_4cyac_2ac_2AC_32__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_31__setstate__(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_31__setstate__(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_v_fails = NULL;
  PyObject *__pyx_v_key_lens = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "cyac/ac.pyx":339
 * 
 *     def __setstate__(self, data):
 *         self.trie, output, fails, key_lens = data             # <<<<<<<<<<<<<<
 *         if self.output != NULL:
 *             free(self.output)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_data))) || (PyList_CheckExact(__pyx_v_data))) {
    PyObject* sequence = __pyx_v_data;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 339, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_3,&__pyx_t_4};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_2,&__pyx_t_3,&__pyx_t_4};
    __pyx_t_5 = PyObject_GetIter(__pyx_v_data); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_6(__pyx_t_5); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 4) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 339, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cyac_4trie_Trie))))) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->trie);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->trie));
  __pyx_v_self->trie = ((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_output = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_fails = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_key_lens = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "cyac/ac.pyx":340
 *     def __setstate__(self, data):
 *         self.trie, output, fails, key_lens = data
 *         if self.output != NULL:             # <<<<<<<<<<<<<<
 *             free(self.output)
 *         if self.fails != NULL:
 */
  __pyx_t_7 = ((__pyx_v_self->output != NULL) != 0);
  if (__pyx_t_7) {

    /* "cyac/ac.pyx":341
 *         self.trie, output, fails, key_lens = data
 *         if self.output != NULL:
 *             free(self.output)             # <<<<<<<<<<<<<<
 *         if self.fails != NULL:
 *             free(self.fails)
 */
    free(__pyx_v_self->output);

    /* "cyac/ac.pyx":340
 *     def __setstate__(self, data):
 *         self.trie, output, fails, key_lens = data
 *         if self.output != NULL:             # <<<<<<<<<<<<<<
 *             free(self.output)
 *         if self.fails != NULL:
 */
  }

  /* "cyac/ac.pyx":342
 *         if self.output != NULL:
 *             free(self.output)
 *         if self.fails != NULL:             # <<<<<<<<<<<<<<
 *             free(self.fails)
 *         if self.key_lens != NULL:
 */
  __pyx_t_7 = ((__pyx_v_self->fails != NULL) != 0);
  if (__pyx_t_7) {

    /* "cyac/ac.pyx":343
 *             free(self.output)
 *         if self.fails != NULL:
 *             free(self.fails)             # <<<<<<<<<<<<<<
 *         if self.key_lens != NULL:
 *             free(self.key_lens)
 */
    free(__pyx_v_self->fails);

    /* "cyac/ac.pyx":342
 *         if self.output != NULL:
 *             free(self.output)
 *         if self.fails != NULL:             # <<<<<<<<<<<<<<
 *             free(self.fails)
 *         if self.key_lens != NULL:
 */
  }

  /* "cyac/ac.pyx":344
 *         if self.fails != NULL:
 *             free(self.fails)
 *         if self.key_lens != NULL:             # <<<<<<<<<<<<<<
 *             free(self.key_lens)
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))
 */
  __pyx_t_7 = ((__pyx_v_self->key_lens != NULL) != 0);
  if (__pyx_t_7) {

    /* "cyac/ac.pyx":345
 *             free(self.fails)
 *         if self.key_lens != NULL:
 *             free(self.key_lens)             # <<<<<<<<<<<<<<
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))
 *         self.fails = <int*> bytes_to_array(fails, self.trie.array_size * sizeof(int))
 */
    free(__pyx_v_self->key_lens);

    /* "cyac/ac.pyx":344
 *         if self.fails != NULL:
 *             free(self.fails)
 *         if self.key_lens != NULL:             # <<<<<<<<<<<<<<
 *             free(self.key_lens)
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))
 */
  }

  /* "cyac/ac.pyx":346
 *         if self.key_lens != NULL:
 *             free(self.key_lens)
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))             # <<<<<<<<<<<<<<
 *         self.fails = <int*> bytes_to_array(fails, self.trie.array_size * sizeof(int))
 *         self.key_lens = <unsigned int*> bytes_to_array(key_lens, self.trie.leaf_size * sizeof(unsigned int))
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_output))||((__pyx_v_output) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_output)->tp_name), 0))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_v_self->output = ((struct __pyx_t_4cyac_2ac_OutNode *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_output), (__pyx_v_self->trie->array_size * (sizeof(struct __pyx_t_4cyac_2ac_OutNode))), 0));

  /* "cyac/ac.pyx":347
 *             free(self.key_lens)
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))
 *         self.fails = <int*> bytes_to_array(fails, self.trie.array_size * sizeof(int))             # <<<<<<<<<<<<<<
 *         self.key_lens = <unsigned int*> bytes_to_array(key_lens, self.trie.leaf_size * sizeof(unsigned int))
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_fails))||((__pyx_v_fails) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_fails)->tp_name), 0))) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_v_self->fails = ((int *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_fails), (__pyx_v_self->trie->array_size * (sizeof(int))), 0));

  /* "cyac/ac.pyx":348
 *         self.output = <OutNode*> bytes_to_array(output, self.trie.array_size * sizeof(OutNode))
 *         self.fails = <int*> bytes_to_array(fails, self.trie.array_size * sizeof(int))
 *         self.key_lens = <unsigned int*> bytes_to_array(key_lens, self.trie.leaf_size * sizeof(unsigned int))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_key_lens))||((__pyx_v_key_lens) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_key_lens)->tp_name), 0))) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_v_self->key_lens = ((unsigned int *)__pyx_f_4cyac_4trie_bytes_to_array(((PyObject*)__pyx_v_key_lens), (__pyx_v_self->trie->leaf_size * (sizeof(unsigned int))), 0));

  /* "cyac/ac.pyx":338
 *         )
 * 
 *     def __setstate__(self, data):             # <<<<<<<<<<<<<<
 *         self.trie, output, fails, key_lens = data
 *         if self.output != NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.ac.AC.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XDECREF(__pyx_v_fails);
  __Pyx_XDECREF(__pyx_v_key_lens);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":351
 * 
 * 
 *     cdef write(self, FILE* ptr_fw):             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 */

static PyObject *__pyx_f_4cyac_2ac_2AC_write(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, FILE *__pyx_v_ptr_fw) {
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "cyac/ac.pyx":352
 * 
 *     cdef write(self, FILE* ptr_fw):
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         cdef int size = self.buff_size()
 *         fwrite(<void*>&size, sizeof(size), 1, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_4cyac_4util_magic_number)), (sizeof(__pyx_v_4cyac_4util_magic_number)), 1, __pyx_v_ptr_fw));

  /* "cyac/ac.pyx":353
 *     cdef write(self, FILE* ptr_fw):
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&size, sizeof(size), 1, ptr_fw)
 *         self.trie.write(ptr_fw)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_4;

  /* "cyac/ac.pyx":354
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 *         fwrite(<void*>&size, sizeof(size), 1, ptr_fw)             # <<<<<<<<<<<<<<
 *         self.trie.write(ptr_fw)
 *         fwrite(<void*>self.output, sizeof(OutNode), self.trie.array_size, ptr_fw)
 */
  (void)(fwrite(((void *)(&__pyx_v_size)), (sizeof(__pyx_v_size)), 1, __pyx_v_ptr_fw));

  /* "cyac/ac.pyx":355
 *         cdef int size = self.buff_size()
 *         fwrite(<void*>&size, sizeof(size), 1, ptr_fw)
 *         self.trie.write(ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>self.output, sizeof(OutNode), self.trie.array_size, ptr_fw)
 *         fwrite(<void*>self.fails, sizeof(int), self.trie.array_size, ptr_fw)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->trie->__pyx_vtab)->write(__pyx_v_self->trie, __pyx_v_ptr_fw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cyac/ac.pyx":356
 *         fwrite(<void*>&size, sizeof(size), 1, ptr_fw)
 *         self.trie.write(ptr_fw)
 *         fwrite(<void*>self.output, sizeof(OutNode), self.trie.array_size, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>self.fails, sizeof(int), self.trie.array_size, ptr_fw)
 *         fwrite(<void*>self.key_lens, sizeof(unsigned int), self.trie.array_size, ptr_fw)
 */
  (void)(fwrite(((void *)__pyx_v_self->output), (sizeof(struct __pyx_t_4cyac_2ac_OutNode)), __pyx_v_self->trie->array_size, __pyx_v_ptr_fw));

  /* "cyac/ac.pyx":357
 *         self.trie.write(ptr_fw)
 *         fwrite(<void*>self.output, sizeof(OutNode), self.trie.array_size, ptr_fw)
 *         fwrite(<void*>self.fails, sizeof(int), self.trie.array_size, ptr_fw)             # <<<<<<<<<<<<<<
 *         fwrite(<void*>self.key_lens, sizeof(unsigned int), self.trie.array_size, ptr_fw)
 * 
 */
  (void)(fwrite(((void *)__pyx_v_self->fails), (sizeof(int)), __pyx_v_self->trie->array_size, __pyx_v_ptr_fw));

  /* "cyac/ac.pyx":358
 *         fwrite(<void*>self.output, sizeof(OutNode), self.trie.array_size, ptr_fw)
 *         fwrite(<void*>self.fails, sizeof(int), self.trie.array_size, ptr_fw)
 *         fwrite(<void*>self.key_lens, sizeof(unsigned int), self.trie.array_size, ptr_fw)             # <<<<<<<<<<<<<<
 * 
 *     def save(self, fname):
 */
  (void)(fwrite(((void *)__pyx_v_self->key_lens), (sizeof(unsigned int)), __pyx_v_self->trie->array_size, __pyx_v_ptr_fw));

  /* "cyac/ac.pyx":351
 * 
 * 
 *     cdef write(self, FILE* ptr_fw):             # <<<<<<<<<<<<<<
 *         fwrite(<void*>&magic_number, sizeof(magic_number), 1, ptr_fw)
 *         cdef int size = self.buff_size()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.ac.AC.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":360
 *         fwrite(<void*>self.key_lens, sizeof(unsigned int), self.trie.array_size, ptr_fw)
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         save data into binary file
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_34save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_33save[] = "\n        save data into binary file\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_34save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_33save(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_33save(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_fname) {
  FILE *__pyx_v_ptr_fw;
  PyObject *__pyx_v_bfname = 0;
  char *__pyx_v_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "cyac/ac.pyx":365
 *         """
 *         cdef FILE *ptr_fw
 *         cdef bytes bfname = fname.encode("utf8")             # <<<<<<<<<<<<<<
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_u_utf8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_u_utf8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 365, __pyx_L1_error)
  __pyx_v_bfname = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/ac.pyx":366
 *         cdef FILE *ptr_fw
 *         cdef bytes bfname = fname.encode("utf8")
 *         cdef char* path = bfname             # <<<<<<<<<<<<<<
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:
 */
  if (unlikely(__pyx_v_bfname == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 366, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_AsWritableString(__pyx_v_bfname); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_v_path = __pyx_t_4;

  /* "cyac/ac.pyx":367
 *         cdef bytes bfname = fname.encode("utf8")
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")             # <<<<<<<<<<<<<<
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)
 */
  __pyx_v_ptr_fw = fopen(__pyx_v_path, ((char const *)"wb"));

  /* "cyac/ac.pyx":368
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 */
  __pyx_t_5 = ((__pyx_v_ptr_fw == NULL) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "cyac/ac.pyx":369
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)             # <<<<<<<<<<<<<<
 *         self.write(ptr_fw)
 *         fclose(ptr_fw)
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Cannot_open_file_s, __pyx_v_fname); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 369, __pyx_L1_error)

    /* "cyac/ac.pyx":368
 *         cdef char* path = bfname
 *         ptr_fw = fopen(path, "wb")
 *         if ptr_fw==NULL:             # <<<<<<<<<<<<<<
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 */
  }

  /* "cyac/ac.pyx":370
 *         if ptr_fw==NULL:
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)             # <<<<<<<<<<<<<<
 *         fclose(ptr_fw)
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cyac_2ac_AC *)__pyx_v_self->__pyx_vtab)->write(__pyx_v_self, __pyx_v_ptr_fw); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cyac/ac.pyx":371
 *             raise Exception("Cannot open file: %s" % fname)
 *         self.write(ptr_fw)
 *         fclose(ptr_fw)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(fclose(__pyx_v_ptr_fw));

  /* "cyac/ac.pyx":360
 *         fwrite(<void*>self.key_lens, sizeof(unsigned int), self.trie.array_size, ptr_fw)
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         """
 *         save data into binary file
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.ac.AC.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bfname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":374
 * 
 * 
 *     def buff_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         return the memory size of buffer needed for exporting to external buffer.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_36buff_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_35buff_size[] = "\n        return the memory size of buffer needed for exporting to external buffer.\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_36buff_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buff_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_35buff_size(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_35buff_size(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buff_size", 0);

  /* "cyac/ac.pyx":378
 *         return the memory size of buffer needed for exporting to external buffer.
 *         """
 *         return self.trie.buff_size() + sizeof(magic_number) + sizeof(int) + (sizeof(OutNode) + sizeof(int) + sizeof(unsigned int)) * self.trie.array_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->trie), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_v_4cyac_4util_magic_number))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(((((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) + (sizeof(int))) + (sizeof(unsigned int))) * __pyx_v_self->trie->array_size)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cyac/ac.pyx":374
 * 
 * 
 *     def buff_size(self):             # <<<<<<<<<<<<<<
 *         """
 *         return the memory size of buffer needed for exporting to external buffer.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cyac.ac.AC.buff_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":381
 * 
 * 
 *     def to_buff(self, buff):             # <<<<<<<<<<<<<<
 *         """
 *         copy data into buff
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_38to_buff(PyObject *__pyx_v_self, PyObject *__pyx_v_buff); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_37to_buff[] = "\n        copy data into buff\n        Args:\n            buff: object satisfy Python buff protocol\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_38to_buff(PyObject *__pyx_v_self, PyObject *__pyx_v_buff) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_buff (wrapper)", 0);
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_37to_buff(((struct __pyx_obj_4cyac_2ac_AC *)__pyx_v_self), ((PyObject *)__pyx_v_buff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_37to_buff(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, PyObject *__pyx_v_buff) {
  Py_buffer __pyx_v_view;
  void *__pyx_v_buf;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  void *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_buff", 0);

  /* "cyac/ac.pyx":387
 *             buff: object satisfy Python buff protocol
 *         """
 *         check_buffer(buff)             # <<<<<<<<<<<<<<
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 */
  __pyx_f_4cyac_4util_check_buffer(__pyx_v_buff);

  /* "cyac/ac.pyx":389
 *         check_buffer(buff)
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 */
  __pyx_t_1 = PyObject_GetBuffer(__pyx_v_buff, (&__pyx_v_view), PyBUF_WRITABLE); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cyac/ac.pyx":390
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 390, __pyx_L1_error)

    /* "cyac/ac.pyx":389
 *         check_buffer(buff)
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 */
  }

  /* "cyac/ac.pyx":391
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:             # <<<<<<<<<<<<<<
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void* buf = view.buf
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_view.len); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "cyac/ac.pyx":392
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")             # <<<<<<<<<<<<<<
 *         cdef void* buf = view.buf
 *         self._to_buff(buf)
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 392, __pyx_L1_error)

    /* "cyac/ac.pyx":391
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:             # <<<<<<<<<<<<<<
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void* buf = view.buf
 */
  }

  /* "cyac/ac.pyx":393
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void* buf = view.buf             # <<<<<<<<<<<<<<
 *         self._to_buff(buf)
 *         PyBuffer_Release(&view)
 */
  __pyx_t_6 = __pyx_v_view.buf;
  __pyx_v_buf = __pyx_t_6;

  /* "cyac/ac.pyx":394
 *             raise Exception("buff size is smaller than needed.")
 *         cdef void* buf = view.buf
 *         self._to_buff(buf)             # <<<<<<<<<<<<<<
 *         PyBuffer_Release(&view)
 * 
 */
  ((struct __pyx_vtabstruct_4cyac_2ac_AC *)__pyx_v_self->__pyx_vtab)->_to_buff(__pyx_v_self, __pyx_v_buf);

  /* "cyac/ac.pyx":395
 *         cdef void* buf = view.buf
 *         self._to_buff(buf)
 *         PyBuffer_Release(&view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  PyBuffer_Release((&__pyx_v_view));

  /* "cyac/ac.pyx":381
 * 
 * 
 *     def to_buff(self, buff):             # <<<<<<<<<<<<<<
 *         """
 *         copy data into buff
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.ac.AC.to_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":399
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init ac from buff
 */

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_2ac_2AC_40from_buff(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4cyac_2ac_2AC_39from_buff[] = "\n        init ac from buff\n        Args:\n            buff: object satisfy Python buff protocol https://docs.python.org/zh-cn/3/c-api/buffer.html\n            copy: whether copy data, by default, it copies data from buff\n        ";
static PyObject *__pyx_pw_4cyac_2ac_2AC_40from_buff(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_buff = 0;
  PyObject *__pyx_v_copy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_buff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_copy,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_copy);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_buff") < 0)) __PYX_ERR(0, 399, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = values[0];
    __pyx_v_copy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_buff", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 399, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.ac.AC.from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_2ac_2AC_39from_buff(((PyTypeObject*)__pyx_v_cls), __pyx_v_buff, __pyx_v_copy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_2ac_2AC_39from_buff(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_buff, PyObject *__pyx_v_copy) {
  Py_buffer *__pyx_v_view;
  Py_buffer *__pyx_v_view2;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_ac = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_buff", 0);

  /* "cyac/ac.pyx":406
 *             copy: whether copy data, by default, it copies data from buff
 *         """
 *         check_buffer(buff)             # <<<<<<<<<<<<<<
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))
 */
  __pyx_f_4cyac_4util_check_buffer(__pyx_v_buff);

  /* "cyac/ac.pyx":407
 *         """
 *         check_buffer(buff)
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))             # <<<<<<<<<<<<<<
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:
 */
  __pyx_v_view = ((Py_buffer *)malloc((sizeof(Py_buffer))));

  /* "cyac/ac.pyx":408
 *         check_buffer(buff)
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))             # <<<<<<<<<<<<<<
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:
 *             free(view)
 */
  __pyx_v_view2 = ((Py_buffer *)malloc((sizeof(Py_buffer))));

  /* "cyac/ac.pyx":409
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *             free(view)
 *             free(view2)
 */
  __pyx_t_2 = PyObject_GetBuffer(__pyx_v_buff, __pyx_v_view, PyBUF_SIMPLE); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 != 0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyObject_GetBuffer(__pyx_v_buff, __pyx_v_view2, PyBUF_SIMPLE); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 409, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 != 0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "cyac/ac.pyx":410
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:
 *             free(view)             # <<<<<<<<<<<<<<
 *             free(view2)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 */
    free(__pyx_v_view);

    /* "cyac/ac.pyx":411
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:
 *             free(view)
 *             free(view2)             # <<<<<<<<<<<<<<
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         ac = ac_from_buff(view.buf, view.len, copy)
 */
    free(__pyx_v_view2);

    /* "cyac/ac.pyx":412
 *             free(view)
 *             free(view2)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         ac = ac_from_buff(view.buf, view.len, copy)
 *         if copy:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 412, __pyx_L1_error)

    /* "cyac/ac.pyx":409
 *         cdef Py_buffer* view = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         cdef Py_buffer* view2 = <Py_buffer*>malloc(sizeof(Py_buffer))
 *         if PyObject_GetBuffer(buff, view, PyBUF_SIMPLE) != 0 or PyObject_GetBuffer(buff, view2, PyBUF_SIMPLE) != 0:             # <<<<<<<<<<<<<<
 *             free(view)
 *             free(view2)
 */
  }

  /* "cyac/ac.pyx":413
 *             free(view2)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         ac = ac_from_buff(view.buf, view.len, copy)             # <<<<<<<<<<<<<<
 *         if copy:
 *             ac.buff = NULL
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_copy); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_t_4 = ((PyObject *)__pyx_f_4cyac_2ac_ac_from_buff(__pyx_v_view->buf, __pyx_v_view->len, __pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ac = ((struct __pyx_obj_4cyac_2ac_AC *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cyac/ac.pyx":414
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         ac = ac_from_buff(view.buf, view.len, copy)
 *         if copy:             # <<<<<<<<<<<<<<
 *             ac.buff = NULL
 *             ac.trie.buff = NULL
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_copy); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 414, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cyac/ac.pyx":415
 *         ac = ac_from_buff(view.buf, view.len, copy)
 *         if copy:
 *             ac.buff = NULL             # <<<<<<<<<<<<<<
 *             ac.trie.buff = NULL
 *             PyBuffer_Release(view)
 */
    __pyx_v_ac->buff = NULL;

    /* "cyac/ac.pyx":416
 *         if copy:
 *             ac.buff = NULL
 *             ac.trie.buff = NULL             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             PyBuffer_Release(view2)
 */
    __pyx_v_ac->trie->buff = NULL;

    /* "cyac/ac.pyx":417
 *             ac.buff = NULL
 *             ac.trie.buff = NULL
 *             PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view2)
 *             free(view)
 */
    PyBuffer_Release(__pyx_v_view);

    /* "cyac/ac.pyx":418
 *             ac.trie.buff = NULL
 *             PyBuffer_Release(view)
 *             PyBuffer_Release(view2)             # <<<<<<<<<<<<<<
 *             free(view)
 *             free(view2)
 */
    PyBuffer_Release(__pyx_v_view2);

    /* "cyac/ac.pyx":419
 *             PyBuffer_Release(view)
 *             PyBuffer_Release(view2)
 *             free(view)             # <<<<<<<<<<<<<<
 *             free(view2)
 *         else:
 */
    free(__pyx_v_view);

    /* "cyac/ac.pyx":420
 *             PyBuffer_Release(view2)
 *             free(view)
 *             free(view2)             # <<<<<<<<<<<<<<
 *         else:
 * 
 */
    free(__pyx_v_view2);

    /* "cyac/ac.pyx":414
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         ac = ac_from_buff(view.buf, view.len, copy)
 *         if copy:             # <<<<<<<<<<<<<<
 *             ac.buff = NULL
 *             ac.trie.buff = NULL
 */
    goto __pyx_L6;
  }

  /* "cyac/ac.pyx":423
 *         else:
 * 
 *             ac.buff = view             # <<<<<<<<<<<<<<
 *             ac.trie.buff = view2
 *         return ac
 */
  /*else*/ {
    __pyx_v_ac->buff = __pyx_v_view;

    /* "cyac/ac.pyx":424
 * 
 *             ac.buff = view
 *             ac.trie.buff = view2             # <<<<<<<<<<<<<<
 *         return ac
 * 
 */
    __pyx_v_ac->trie->buff = __pyx_v_view2;
  }
  __pyx_L6:;

  /* "cyac/ac.pyx":425
 *             ac.buff = view
 *             ac.trie.buff = view2
 *         return ac             # <<<<<<<<<<<<<<
 * 
 *     cdef void _to_buff(self, void* buf):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ac));
  __pyx_r = ((PyObject *)__pyx_v_ac);
  goto __pyx_L0;

  /* "cyac/ac.pyx":399
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init ac from buff
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cyac.ac.AC.from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ac);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyac/ac.pyx":427
 *         return ac
 * 
 *     cdef void _to_buff(self, void* buf):             # <<<<<<<<<<<<<<
 *         cdef int offset = 0
 * 
 */

static void __pyx_f_4cyac_2ac_2AC__to_buff(struct __pyx_obj_4cyac_2ac_AC *__pyx_v_self, void *__pyx_v_buf) {
  int __pyx_v_offset;
  char *__pyx_v_buff;
  int __pyx_v_size;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_to_buff", 0);

  /* "cyac/ac.pyx":428
 * 
 *     cdef void _to_buff(self, void* buf):
 *         cdef int offset = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef char* buff = <char*>buf
 */
  __pyx_v_offset = 0;

  /* "cyac/ac.pyx":430
 *         cdef int offset = 0
 * 
 *         cdef char* buff = <char*>buf             # <<<<<<<<<<<<<<
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))
 *         offset += sizeof(magic_number)
 */
  __pyx_v_buff = ((char *)__pyx_v_buf);

  /* "cyac/ac.pyx":431
 * 
 *         cdef char* buff = <char*>buf
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))             # <<<<<<<<<<<<<<
 *         offset += sizeof(magic_number)
 * 
 */
  (void)(memcpy(__pyx_v_buff, ((void *)(&__pyx_v_4cyac_4util_magic_number)), (sizeof(__pyx_v_4cyac_4util_magic_number))));

  /* "cyac/ac.pyx":432
 *         cdef char* buff = <char*>buf
 *         memcpy(buff, <void*>&magic_number, sizeof(magic_number))
 *         offset += sizeof(magic_number)             # <<<<<<<<<<<<<<
 * 
 *         cdef int size = self.buff_size()
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(__pyx_v_4cyac_4util_magic_number)));

  /* "cyac/ac.pyx":434
 *         offset += sizeof(magic_number)
 * 
 *         cdef int size = self.buff_size()             # <<<<<<<<<<<<<<
 *         memcpy(buff + offset, <void*>&size, sizeof(size))
 *         offset += sizeof(size)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_4;

  /* "cyac/ac.pyx":435
 * 
 *         cdef int size = self.buff_size()
 *         memcpy(buff + offset, <void*>&size, sizeof(size))             # <<<<<<<<<<<<<<
 *         offset += sizeof(size)
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)(&__pyx_v_size)), (sizeof(__pyx_v_size))));

  /* "cyac/ac.pyx":436
 *         cdef int size = self.buff_size()
 *         memcpy(buff + offset, <void*>&size, sizeof(size))
 *         offset += sizeof(size)             # <<<<<<<<<<<<<<
 * 
 *         self.trie._to_buff(buff + offset)
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(__pyx_v_size)));

  /* "cyac/ac.pyx":438
 *         offset += sizeof(size)
 * 
 *         self.trie._to_buff(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += self.trie.buff_size()
 * 
 */
  ((struct __pyx_vtabstruct_4cyac_4trie_Trie *)__pyx_v_self->trie->__pyx_vtab)->_to_buff(__pyx_v_self->trie, (__pyx_v_buff + __pyx_v_offset));

  /* "cyac/ac.pyx":439
 * 
 *         self.trie._to_buff(buff + offset)
 *         offset += self.trie.buff_size()             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.output, sizeof(OutNode) * self.trie.array_size)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->trie), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_offset = __pyx_t_4;

  /* "cyac/ac.pyx":441
 *         offset += self.trie.buff_size()
 * 
 *         memcpy(buff + offset, <void*>self.output, sizeof(OutNode) * self.trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(OutNode) * self.trie.array_size
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->output), ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_self->trie->array_size)));

  /* "cyac/ac.pyx":442
 * 
 *         memcpy(buff + offset, <void*>self.output, sizeof(OutNode) * self.trie.array_size)
 *         offset += sizeof(OutNode) * self.trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.fails, sizeof(int) * self.trie.array_size)
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_self->trie->array_size));

  /* "cyac/ac.pyx":444
 *         offset += sizeof(OutNode) * self.trie.array_size
 * 
 *         memcpy(buff + offset, <void*>self.fails, sizeof(int) * self.trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * self.trie.array_size
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->fails), ((sizeof(int)) * __pyx_v_self->trie->array_size)));

  /* "cyac/ac.pyx":445
 * 
 *         memcpy(buff + offset, <void*>self.fails, sizeof(int) * self.trie.array_size)
 *         offset += sizeof(int) * self.trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buff + offset, <void*>self.key_lens, sizeof(unsigned int) * self.trie.array_size)
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_self->trie->array_size));

  /* "cyac/ac.pyx":447
 *         offset += sizeof(int) * self.trie.array_size
 * 
 *         memcpy(buff + offset, <void*>self.key_lens, sizeof(unsigned int) * self.trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(unsigned int) * self.trie.array_size
 * 
 */
  (void)(memcpy((__pyx_v_buff + __pyx_v_offset), ((void *)__pyx_v_self->key_lens), ((sizeof(unsigned int)) * __pyx_v_self->trie->array_size)));

  /* "cyac/ac.pyx":448
 * 
 *         memcpy(buff + offset, <void*>self.key_lens, sizeof(unsigned int) * self.trie.array_size)
 *         offset += sizeof(unsigned int) * self.trie.array_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_offset = (__pyx_v_offset + ((sizeof(unsigned int)) * __pyx_v_self->trie->array_size));

  /* "cyac/ac.pyx":427
 *         return ac
 * 
 *     cdef void _to_buff(self, void* buf):             # <<<<<<<<<<<<<<
 *         cdef int offset = 0
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("cyac.ac.AC._to_buff", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cyac/ac.pyx":451
 * 
 * 
 * cdef AC ac_from_buff(void* buf, int buf_size, bool copy):             # <<<<<<<<<<<<<<
 * 
 *     cdef char* buff = <char*>buf
 */

static struct __pyx_obj_4cyac_2ac_AC *__pyx_f_4cyac_2ac_ac_from_buff(void *__pyx_v_buf, int __pyx_v_buf_size, bool __pyx_v_copy) {
  char *__pyx_v_buff;
  int __pyx_v_offset;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_v_ac = 0;
  int __pyx_v_magic;
  int __pyx_v_size;
  struct __pyx_obj_4cyac_4trie_Trie *__pyx_v_trie = NULL;
  struct __pyx_obj_4cyac_2ac_AC *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ac_from_buff", 0);

  /* "cyac/ac.pyx":453
 * cdef AC ac_from_buff(void* buf, int buf_size, bool copy):
 * 
 *     cdef char* buff = <char*>buf             # <<<<<<<<<<<<<<
 *     cdef int offset = 0
 *     cdef AC ac = new_object(AC)
 */
  __pyx_v_buff = ((char *)__pyx_v_buf);

  /* "cyac/ac.pyx":454
 * 
 *     cdef char* buff = <char*>buf
 *     cdef int offset = 0             # <<<<<<<<<<<<<<
 *     cdef AC ac = new_object(AC)
 *     cdef int magic, size
 */
  __pyx_v_offset = 0;

  /* "cyac/ac.pyx":455
 *     cdef char* buff = <char*>buf
 *     cdef int offset = 0
 *     cdef AC ac = new_object(AC)             # <<<<<<<<<<<<<<
 *     cdef int magic, size
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_new_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_ptype_4cyac_2ac_AC)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_ptype_4cyac_2ac_AC));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4cyac_2ac_AC))))) __PYX_ERR(0, 455, __pyx_L1_error)
  __pyx_v_ac = ((struct __pyx_obj_4cyac_2ac_AC *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/ac.pyx":457
 *     cdef AC ac = new_object(AC)
 *     cdef int magic, size
 *     memcpy(buff, <void*>&magic, sizeof(magic))             # <<<<<<<<<<<<<<
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")
 */
  (void)(memcpy(__pyx_v_buff, ((void *)(&__pyx_v_magic)), (sizeof(__pyx_v_magic))));

  /* "cyac/ac.pyx":458
 *     cdef int magic, size
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)
 */
  __pyx_t_4 = ((__pyx_v_magic != __pyx_v_4cyac_4util_magic_number) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "cyac/ac.pyx":459
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")             # <<<<<<<<<<<<<<
 *     offset += sizeof(magic)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 459, __pyx_L1_error)

    /* "cyac/ac.pyx":458
 *     cdef int magic, size
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)
 */
  }

  /* "cyac/ac.pyx":460
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")
 *     offset += sizeof(magic)             # <<<<<<<<<<<<<<
 * 
 *     memcpy(&size, buff + offset, sizeof(int))
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(__pyx_v_magic)));

  /* "cyac/ac.pyx":462
 *     offset += sizeof(magic)
 * 
 *     memcpy(&size, buff + offset, sizeof(int))             # <<<<<<<<<<<<<<
 *     offset += sizeof(int)
 *     if size > buf_size:
 */
  (void)(memcpy((&__pyx_v_size), (__pyx_v_buff + __pyx_v_offset), (sizeof(int))));

  /* "cyac/ac.pyx":463
 * 
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)             # <<<<<<<<<<<<<<
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")
 */
  __pyx_v_offset = (__pyx_v_offset + (sizeof(int)));

  /* "cyac/ac.pyx":464
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)
 *     if size > buf_size:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, buf size is not correct")
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 */
  __pyx_t_4 = ((__pyx_v_size > __pyx_v_buf_size) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "cyac/ac.pyx":465
 *     offset += sizeof(int)
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")             # <<<<<<<<<<<<<<
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 *     offset += trie.buff_size()
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 465, __pyx_L1_error)

    /* "cyac/ac.pyx":464
 *     memcpy(&size, buff + offset, sizeof(int))
 *     offset += sizeof(int)
 *     if size > buf_size:             # <<<<<<<<<<<<<<
 *         raise Exception("invalid data, buf size is not correct")
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 */
  }

  /* "cyac/ac.pyx":466
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)             # <<<<<<<<<<<<<<
 *     offset += trie.buff_size()
 *     if copy:
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_4cyac_4trie_trie_from_buff((__pyx_v_buff + __pyx_v_offset), (__pyx_v_buf_size - __pyx_v_offset), __pyx_v_copy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_trie = ((struct __pyx_obj_4cyac_4trie_Trie *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cyac/ac.pyx":467
 *         raise Exception("invalid data, buf size is not correct")
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 *     offset += trie.buff_size()             # <<<<<<<<<<<<<<
 *     if copy:
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_trie), __pyx_n_s_buff_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_offset = __pyx_t_6;

  /* "cyac/ac.pyx":468
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 *     offset += trie.buff_size()
 *     if copy:             # <<<<<<<<<<<<<<
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)
 *         memcpy(<void*>ac.output, buff + offset, sizeof(OutNode) * trie.array_size)
 */
  __pyx_t_4 = (__pyx_v_copy != 0);
  if (__pyx_t_4) {

    /* "cyac/ac.pyx":469
 *     offset += trie.buff_size()
 *     if copy:
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)             # <<<<<<<<<<<<<<
 *         memcpy(<void*>ac.output, buff + offset, sizeof(OutNode) * trie.array_size)
 *         offset += sizeof(OutNode) * trie.array_size
 */
    __pyx_v_ac->output = ((struct __pyx_t_4cyac_2ac_OutNode *)malloc(((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":470
 *     if copy:
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)
 *         memcpy(<void*>ac.output, buff + offset, sizeof(OutNode) * trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(OutNode) * trie.array_size
 * 
 */
    (void)(memcpy(((void *)__pyx_v_ac->output), (__pyx_v_buff + __pyx_v_offset), ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":471
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)
 *         memcpy(<void*>ac.output, buff + offset, sizeof(OutNode) * trie.array_size)
 *         offset += sizeof(OutNode) * trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         ac.fails = <int*>malloc(sizeof(int) * trie.array_size)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_trie->array_size));

    /* "cyac/ac.pyx":473
 *         offset += sizeof(OutNode) * trie.array_size
 * 
 *         ac.fails = <int*>malloc(sizeof(int) * trie.array_size)             # <<<<<<<<<<<<<<
 *         memcpy(<void*>ac.fails, buff + offset, sizeof(int) * trie.array_size)
 *         offset += sizeof(int) * trie.array_size
 */
    __pyx_v_ac->fails = ((int *)malloc(((sizeof(int)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":474
 * 
 *         ac.fails = <int*>malloc(sizeof(int) * trie.array_size)
 *         memcpy(<void*>ac.fails, buff + offset, sizeof(int) * trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * trie.array_size
 * 
 */
    (void)(memcpy(((void *)__pyx_v_ac->fails), (__pyx_v_buff + __pyx_v_offset), ((sizeof(int)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":475
 *         ac.fails = <int*>malloc(sizeof(int) * trie.array_size)
 *         memcpy(<void*>ac.fails, buff + offset, sizeof(int) * trie.array_size)
 *         offset += sizeof(int) * trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         ac.key_lens = <unsigned int*>malloc(sizeof(unsigned int) * trie.array_size)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_trie->array_size));

    /* "cyac/ac.pyx":477
 *         offset += sizeof(int) * trie.array_size
 * 
 *         ac.key_lens = <unsigned int*>malloc(sizeof(unsigned int) * trie.array_size)             # <<<<<<<<<<<<<<
 *         memcpy(<void*>ac.key_lens, buff + offset, sizeof(unsigned int) * trie.array_size)
 *         offset += sizeof(unsigned int) * trie.array_size
 */
    __pyx_v_ac->key_lens = ((unsigned int *)malloc(((sizeof(unsigned int)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":478
 * 
 *         ac.key_lens = <unsigned int*>malloc(sizeof(unsigned int) * trie.array_size)
 *         memcpy(<void*>ac.key_lens, buff + offset, sizeof(unsigned int) * trie.array_size)             # <<<<<<<<<<<<<<
 *         offset += sizeof(unsigned int) * trie.array_size
 *     else:
 */
    (void)(memcpy(((void *)__pyx_v_ac->key_lens), (__pyx_v_buff + __pyx_v_offset), ((sizeof(unsigned int)) * __pyx_v_trie->array_size)));

    /* "cyac/ac.pyx":479
 *         ac.key_lens = <unsigned int*>malloc(sizeof(unsigned int) * trie.array_size)
 *         memcpy(<void*>ac.key_lens, buff + offset, sizeof(unsigned int) * trie.array_size)
 *         offset += sizeof(unsigned int) * trie.array_size             # <<<<<<<<<<<<<<
 *     else:
 *         ac.output = <OutNode*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(unsigned int)) * __pyx_v_trie->array_size));

    /* "cyac/ac.pyx":468
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 *     offset += trie.buff_size()
 *     if copy:             # <<<<<<<<<<<<<<
 *         ac.output = <OutNode*>malloc(sizeof(OutNode) * trie.array_size)
 *         memcpy(<void*>ac.output, buff + offset, sizeof(OutNode) * trie.array_size)
 */
    goto __pyx_L5;
  }

  /* "cyac/ac.pyx":481
 *         offset += sizeof(unsigned int) * trie.array_size
 *     else:
 *         ac.output = <OutNode*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(OutNode) * trie.array_size
 * 
 */
  /*else*/ {
    __pyx_v_ac->output = ((struct __pyx_t_4cyac_2ac_OutNode *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/ac.pyx":482
 *     else:
 *         ac.output = <OutNode*>(buff + offset)
 *         offset += sizeof(OutNode) * trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         ac.fails = <int*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(struct __pyx_t_4cyac_2ac_OutNode)) * __pyx_v_trie->array_size));

    /* "cyac/ac.pyx":484
 *         offset += sizeof(OutNode) * trie.array_size
 * 
 *         ac.fails = <int*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(int) * trie.array_size
 * 
 */
    __pyx_v_ac->fails = ((int *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/ac.pyx":485
 * 
 *         ac.fails = <int*>(buff + offset)
 *         offset += sizeof(int) * trie.array_size             # <<<<<<<<<<<<<<
 * 
 *         ac.key_lens = <unsigned int*>(buff + offset)
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(int)) * __pyx_v_trie->array_size));

    /* "cyac/ac.pyx":487
 *         offset += sizeof(int) * trie.array_size
 * 
 *         ac.key_lens = <unsigned int*>(buff + offset)             # <<<<<<<<<<<<<<
 *         offset += sizeof(unsigned int) * trie.array_size
 * 
 */
    __pyx_v_ac->key_lens = ((unsigned int *)(__pyx_v_buff + __pyx_v_offset));

    /* "cyac/ac.pyx":488
 * 
 *         ac.key_lens = <unsigned int*>(buff + offset)
 *         offset += sizeof(unsigned int) * trie.array_size             # <<<<<<<<<<<<<<
 * 
 *     ac.trie = trie
 */
    __pyx_v_offset = (__pyx_v_offset + ((sizeof(unsigned int)) * __pyx_v_trie->array_size));
  }
  __pyx_L5:;

  /* "cyac/ac.pyx":490
 *         offset += sizeof(unsigned int) * trie.array_size
 * 
 *     ac.trie = trie             # <<<<<<<<<<<<<<
 *     return ac
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_trie));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_trie));
  __Pyx_GOTREF(__pyx_v_ac->trie);
  __Pyx_DECREF(((PyObject *)__pyx_v_ac->trie));
  __pyx_v_ac->trie = __pyx_v_trie;

  /* "cyac/ac.pyx":491
 * 
 *     ac.trie = trie
 *     return ac             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ac));
  __pyx_r = __pyx_v_ac;
  goto __pyx_L0;

  /* "cyac/ac.pyx":451
 * 
 * 
 * cdef AC ac_from_buff(void* buf, int buf_size, bool copy):             # <<<<<<<<<<<<<<
 * 
 *     cdef char* buff = <char*>buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cyac.ac.ac_from_buff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ac);
  __Pyx_XDECREF((PyObject *)__pyx_v_trie);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utf8.pxd":4
 * # distutils: language=c++
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 *     cdef int i
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4utf8_iter_unicode(__pyx_t_4cyac_4utf8_byte_t *__pyx_v_src, int *__pyx_v_ret, int *__pyx_v_char_byte_num) {
  int __pyx_v_result;
  CYTHON_UNUSED int __pyx_v_i;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_leading_byte;
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_c;
  int __pyx_v_len_;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("iter_unicode", 0);

  /* "utf8.pxd":5
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):
 *     cdef int result = 0             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef byte_t leading_byte, c
 */
  __pyx_v_result = 0;

  /* "utf8.pxd":9
 *     cdef byte_t leading_byte, c
 *     cdef int len_
 *     leading_byte = src[0]             # <<<<<<<<<<<<<<
 *     src += 1
 *     if leading_byte == 0:
 */
  __pyx_v_leading_byte = (__pyx_v_src[0]);

  /* "utf8.pxd":10
 *     cdef int len_
 *     leading_byte = src[0]
 *     src += 1             # <<<<<<<<<<<<<<
 *     if leading_byte == 0:
 *         ret[0] = 0
 */
  __pyx_v_src = (__pyx_v_src + 1);

  /* "utf8.pxd":11
 *     leading_byte = src[0]
 *     src += 1
 *     if leading_byte == 0:             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 */
  __pyx_t_1 = ((__pyx_v_leading_byte == 0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":12
 *     src += 1
 *     if leading_byte == 0:
 *         ret[0] = 0             # <<<<<<<<<<<<<<
 *         char_byte_num[0] = 1
 *         return src
 */
    (__pyx_v_ret[0]) = 0;

    /* "utf8.pxd":13
 *     if leading_byte == 0:
 *         ret[0] = 0
 *         char_byte_num[0] = 1             # <<<<<<<<<<<<<<
 *         return src
 *     if leading_byte < 0x80:
 */
    (__pyx_v_char_byte_num[0]) = 1;

    /* "utf8.pxd":14
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 *         return src             # <<<<<<<<<<<<<<
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte
 */
    __pyx_r = __pyx_v_src;
    goto __pyx_L0;

    /* "utf8.pxd":11
 *     leading_byte = src[0]
 *     src += 1
 *     if leading_byte == 0:             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         char_byte_num[0] = 1
 */
  }

  /* "utf8.pxd":15
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte < 0x80:             # <<<<<<<<<<<<<<
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 */
  __pyx_t_1 = ((__pyx_v_leading_byte < 0x80) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":16
 *         return src
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte             # <<<<<<<<<<<<<<
 *         char_byte_num[0] = 1
 *         return src
 */
    (__pyx_v_ret[0]) = __pyx_v_leading_byte;

    /* "utf8.pxd":17
 *     if leading_byte < 0x80:
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1             # <<<<<<<<<<<<<<
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:
 */
    (__pyx_v_char_byte_num[0]) = 1;

    /* "utf8.pxd":18
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 *         return src             # <<<<<<<<<<<<<<
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2
 */
    __pyx_r = __pyx_v_src;
    goto __pyx_L0;

    /* "utf8.pxd":15
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte < 0x80:             # <<<<<<<<<<<<<<
 *         ret[0] = leading_byte
 *         char_byte_num[0] = 1
 */
  }

  /* "utf8.pxd":19
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:             # <<<<<<<<<<<<<<
 *         len_ = 2
 *         result = leading_byte & 0x1f
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xe0) == 0xc0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":20
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:
 */
    __pyx_v_len_ = 2;

    /* "utf8.pxd":21
 *     if leading_byte & 0xe0 == 0xc0:
 *         len_ = 2
 *         result = leading_byte & 0x1f             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x1f);

    /* "utf8.pxd":19
 *         char_byte_num[0] = 1
 *         return src
 *     if leading_byte & 0xe0 == 0xc0:             # <<<<<<<<<<<<<<
 *         len_ = 2
 *         result = leading_byte & 0x1f
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":22
 *         len_ = 2
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:             # <<<<<<<<<<<<<<
 *         len_ = 3
 *         result = leading_byte & 0x0f
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xf0) == 0xe0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":23
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:
 */
    __pyx_v_len_ = 3;

    /* "utf8.pxd":24
 *     elif leading_byte & 0xf0 == 0xe0:
 *         len_ = 3
 *         result = leading_byte & 0x0f             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x0f);

    /* "utf8.pxd":22
 *         len_ = 2
 *         result = leading_byte & 0x1f
 *     elif leading_byte & 0xf0 == 0xe0:             # <<<<<<<<<<<<<<
 *         len_ = 3
 *         result = leading_byte & 0x0f
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":25
 *         len_ = 3
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:             # <<<<<<<<<<<<<<
 *         len_ = 4
 *         result = leading_byte & 0x07
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xf8) == 0xf0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":26
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:
 */
    __pyx_v_len_ = 4;

    /* "utf8.pxd":27
 *     elif leading_byte & 0xf8 == 0xf0:
 *         len_ = 4
 *         result = leading_byte & 0x07             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x07);

    /* "utf8.pxd":25
 *         len_ = 3
 *         result = leading_byte & 0x0f
 *     elif leading_byte & 0xf8 == 0xf0:             # <<<<<<<<<<<<<<
 *         len_ = 4
 *         result = leading_byte & 0x07
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":28
 *         len_ = 4
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:             # <<<<<<<<<<<<<<
 *         len_ = 5
 *         result = leading_byte & 0x03
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xfc) == 0xf8) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":29
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:
 */
    __pyx_v_len_ = 5;

    /* "utf8.pxd":30
 *     elif leading_byte & 0xfc == 0xf8:
 *         len_ = 5
 *         result = leading_byte & 0x03             # <<<<<<<<<<<<<<
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x03);

    /* "utf8.pxd":28
 *         len_ = 4
 *         result = leading_byte & 0x07
 *     elif leading_byte & 0xfc == 0xf8:             # <<<<<<<<<<<<<<
 *         len_ = 5
 *         result = leading_byte & 0x03
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":31
 *         len_ = 5
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:             # <<<<<<<<<<<<<<
 *         len_ = 6
 *         result = leading_byte & 0x01
 */
  __pyx_t_1 = (((__pyx_v_leading_byte & 0xfe) == 0xfc) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":32
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6             # <<<<<<<<<<<<<<
 *         result = leading_byte & 0x01
 *     else:
 */
    __pyx_v_len_ = 6;

    /* "utf8.pxd":33
 *     elif leading_byte & 0xfe == 0xfc:
 *         len_ = 6
 *         result = leading_byte & 0x01             # <<<<<<<<<<<<<<
 *     else:
 *         len_ = 1
 */
    __pyx_v_result = (__pyx_v_leading_byte & 0x01);

    /* "utf8.pxd":31
 *         len_ = 5
 *         result = leading_byte & 0x03
 *     elif leading_byte & 0xfe == 0xfc:             # <<<<<<<<<<<<<<
 *         len_ = 6
 *         result = leading_byte & 0x01
 */
    goto __pyx_L5;
  }

  /* "utf8.pxd":35
 *         result = leading_byte & 0x01
 *     else:
 *         len_ = 1             # <<<<<<<<<<<<<<
 *         ret[0] = 0
 *         return NULL
 */
  /*else*/ {
    __pyx_v_len_ = 1;

    /* "utf8.pxd":36
 *     else:
 *         len_ = 1
 *         ret[0] = 0             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
    (__pyx_v_ret[0]) = 0;

    /* "utf8.pxd":37
 *         len_ = 1
 *         ret[0] = 0
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     char_byte_num[0] = len_
 */
    __pyx_r = NULL;
    goto __pyx_L0;
  }
  __pyx_L5:;

  /* "utf8.pxd":39
 *         return NULL
 * 
 *     char_byte_num[0] = len_             # <<<<<<<<<<<<<<
 *     for i in range(len_ - 1):
 *         c = src[0]
 */
  (__pyx_v_char_byte_num[0]) = __pyx_v_len_;

  /* "utf8.pxd":40
 * 
 *     char_byte_num[0] = len_
 *     for i in range(len_ - 1):             # <<<<<<<<<<<<<<
 *         c = src[0]
 *         src += 1
 */
  __pyx_t_2 = (__pyx_v_len_ - 1);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "utf8.pxd":41
 *     char_byte_num[0] = len_
 *     for i in range(len_ - 1):
 *         c = src[0]             # <<<<<<<<<<<<<<
 *         src += 1
 *         result <<= 6
 */
    __pyx_v_c = (__pyx_v_src[0]);

    /* "utf8.pxd":42
 *     for i in range(len_ - 1):
 *         c = src[0]
 *         src += 1             # <<<<<<<<<<<<<<
 *         result <<= 6
 *         result += c & 0x3f
 */
    __pyx_v_src = (__pyx_v_src + 1);

    /* "utf8.pxd":43
 *         c = src[0]
 *         src += 1
 *         result <<= 6             # <<<<<<<<<<<<<<
 *         result += c & 0x3f
 *     ret[0] = result
 */
    __pyx_v_result = (__pyx_v_result << 6);

    /* "utf8.pxd":44
 *         src += 1
 *         result <<= 6
 *         result += c & 0x3f             # <<<<<<<<<<<<<<
 *     ret[0] = result
 *     return src
 */
    __pyx_v_result = (__pyx_v_result + (__pyx_v_c & 0x3f));
  }

  /* "utf8.pxd":45
 *         result <<= 6
 *         result += c & 0x3f
 *     ret[0] = result             # <<<<<<<<<<<<<<
 *     return src
 * 
 */
  (__pyx_v_ret[0]) = __pyx_v_result;

  /* "utf8.pxd":46
 *         result += c & 0x3f
 *     ret[0] = result
 *     return src             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_src;
  goto __pyx_L0;

  /* "utf8.pxd":4
 * # distutils: language=c++
 * ctypedef unsigned char byte_t
 * cdef inline byte_t* iter_unicode(byte_t *src, int* ret, int *char_byte_num):             # <<<<<<<<<<<<<<
 *     cdef int result = 0
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utf8.pxd":49
 * 
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):             # <<<<<<<<<<<<<<
 *     if c == 0:
 *         return utf8_dst
 */

static CYTHON_INLINE __pyx_t_4cyac_4utf8_byte_t *__pyx_f_4cyac_4utf8_encode_unicode(int __pyx_v_c, __pyx_t_4cyac_4utf8_byte_t *__pyx_v_utf8_dst) {
  __pyx_t_4cyac_4utf8_byte_t __pyx_v_ch;
  __pyx_t_4cyac_4utf8_byte_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("encode_unicode", 0);

  /* "utf8.pxd":50
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:             # <<<<<<<<<<<<<<
 *         return utf8_dst
 *     cdef byte_t ch
 */
  __pyx_t_1 = ((__pyx_v_c == 0) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":51
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:
 *         return utf8_dst             # <<<<<<<<<<<<<<
 *     cdef byte_t ch
 *     if c < 0x00080:
 */
    __pyx_r = __pyx_v_utf8_dst;
    goto __pyx_L0;

    /* "utf8.pxd":50
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):
 *     if c == 0:             # <<<<<<<<<<<<<<
 *         return utf8_dst
 *     cdef byte_t ch
 */
  }

  /* "utf8.pxd":53
 *         return utf8_dst
 *     cdef byte_t ch
 *     if c < 0x00080:             # <<<<<<<<<<<<<<
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x00080) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":54
 *     cdef byte_t ch
 *     if c < 0x00080:
 *         ch = (c & 0xFF);             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:
 */
    __pyx_v_ch = (__pyx_v_c & 0xFF);

    /* "utf8.pxd":55
 *     if c < 0x00080:
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":53
 *         return utf8_dst
 *     cdef byte_t ch
 *     if c < 0x00080:             # <<<<<<<<<<<<<<
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":56
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:             # <<<<<<<<<<<<<<
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x00800) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":57
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0xC0 + ((__pyx_v_c >> 6) & 0x1F));

    /* "utf8.pxd":58
 *     elif c < 0x00800:
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":59
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":60
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":56
 *         ch = (c & 0xFF);
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x00800:             # <<<<<<<<<<<<<<
 *         ch = (0xC0 + ((c >> 6) & 0x1F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":61
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:             # <<<<<<<<<<<<<<
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x10000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":62
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 */
    __pyx_v_ch = (0xE0 + ((__pyx_v_c >> 12) & 0x0F));

    /* "utf8.pxd":63
 *     elif c < 0x10000:
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":64
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":65
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":66
 *         ch = (0x80 + ((c >> 6) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":67
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":61
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x10000:             # <<<<<<<<<<<<<<
 *         ch = (0xE0 + ((c >> 12) & 0x0F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":68
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:             # <<<<<<<<<<<<<<
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x200000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":69
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0xF0 + ((__pyx_v_c >> 18) & 0x07));

    /* "utf8.pxd":70
 *     elif c < 0x200000:
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":71
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":72
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":73
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":74
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":75
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":76
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":68
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x200000:             # <<<<<<<<<<<<<<
 *         ch = (0xF0 + ((c >> 18) & 0x07))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":77
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:             # <<<<<<<<<<<<<<
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
  __pyx_t_1 = ((__pyx_v_c < 0x8000000) != 0);
  if (__pyx_t_1) {

    /* "utf8.pxd":78
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 */
    __pyx_v_ch = (0xF8 + ((__pyx_v_c >> 24) & 0x03));

    /* "utf8.pxd":79
 *     elif c < 0x8000000:
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":80
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 18) & 0x3F));

    /* "utf8.pxd":81
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":82
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":83
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":84
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":85
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":86
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     else:
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":87
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":77
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     elif c < 0x8000000:             # <<<<<<<<<<<<<<
 *         ch = (0xF8 + ((c >> 24) & 0x03))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    goto __pyx_L4;
  }

  /* "utf8.pxd":89
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 */
  /*else*/ {
    __pyx_v_ch = (0xFC + ((__pyx_v_c >> 30) & 0x01));

    /* "utf8.pxd":90
 *     else:
 *         ch = (0xFC + ((c >> 30) & 0x01))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":91
 *         ch = (0xFC + ((c >> 30) & 0x01))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 24) & 0x3F));

    /* "utf8.pxd":92
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":93
 *         ch = (0x80 + ((c >> 24) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 18) & 0x3F));

    /* "utf8.pxd":94
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":95
 *         ch = (0x80 + ((c >> 18) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 12) & 0x3F));

    /* "utf8.pxd":96
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":97
 *         ch = (0x80 + ((c >> 12) & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 */
    __pyx_v_ch = (0x80 + ((__pyx_v_c >> 6) & 0x3F));

    /* "utf8.pxd":98
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);

    /* "utf8.pxd":99
 *         ch = (0x80 + ((c >> 6)  & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))             # <<<<<<<<<<<<<<
 *         utf8_dst[0]=(ch); utf8_dst += 1
 * 
 */
    __pyx_v_ch = (0x80 + (__pyx_v_c & 0x3F));

    /* "utf8.pxd":100
 *         utf8_dst[0]=(ch); utf8_dst += 1
 *         ch = (0x80 + (c & 0x3F))
 *         utf8_dst[0]=(ch); utf8_dst += 1             # <<<<<<<<<<<<<<
 * 
 *     return utf8_dst
 */
    (__pyx_v_utf8_dst[0]) = __pyx_v_ch;
    __pyx_v_utf8_dst = (__pyx_v_utf8_dst + 1);
  }
  __pyx_L4:;

  /* "utf8.pxd":102
 *         utf8_dst[0]=(ch); utf8_dst += 1
 * 
 *     return utf8_dst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_utf8_dst;
  goto __pyx_L0;

  /* "utf8.pxd":49
 * 
 * 
 * cdef inline byte_t* encode_unicode(int c, byte_t *utf8_dst):             # <<<<<<<<<<<<<<
 *     if c == 0:
 *         return utf8_dst
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "xstring.pxd":28
 *     cpdef int char_at(self, int i)
 * 
 *     cdef inline int char_byte_num(self, int i):             # <<<<<<<<<<<<<<
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 */

static CYTHON_INLINE int __pyx_f_4cyac_7xstring_7xstring_char_byte_num(struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_byte_num", 0);

  /* "xstring.pxd":29
 * 
 *     cdef inline int char_byte_num(self, int i):
 *         return self.char_offsets[i+1] - self.char_offsets[i]             # <<<<<<<<<<<<<<
 * 
 * cdef class ignore_case_alignment(object):
 */
  __pyx_r = ((__pyx_v_self->char_offsets[(__pyx_v_i + 1)]) - (__pyx_v_self->char_offsets[__pyx_v_i]));
  goto __pyx_L0;

  /* "xstring.pxd":28
 *     cpdef int char_at(self, int i)
 * 
 *     cdef inline int char_byte_num(self, int i):             # <<<<<<<<<<<<<<
 *         return self.char_offsets[i+1] - self.char_offsets[i]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "trie.pxd":28
 *     unsigned short flags
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):             # <<<<<<<<<<<<<<
 *     return <bytes>ptr[:size]
 * 
 */

static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_4cyac_4trie_array_to_bytes(char *__pyx_v_ptr, int __pyx_v_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_to_bytes", 0);

  /* "trie.pxd":29
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):
 *     return <bytes>ptr[:size]             # <<<<<<<<<<<<<<
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_ptr + 0, __pyx_v_size - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "trie.pxd":28
 *     unsigned short flags
 * 
 * cpdef inline bytes array_to_bytes(char* ptr, int size):             # <<<<<<<<<<<<<<
 *     return <bytes>ptr[:size]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_1array_to_bytes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_ptr;
  int __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("array_to_bytes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("array_to_bytes", 1, 2, 2, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array_to_bytes") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ptr = __Pyx_PyObject_AsWritableString(values[0]); if (unlikely((!__pyx_v_ptr) && PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
    __pyx_v_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 28, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array_to_bytes", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4cyac_4trie_array_to_bytes(__pyx_self, __pyx_v_ptr, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_array_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_ptr, int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_to_bytes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4cyac_4trie_array_to_bytes(__pyx_v_ptr, __pyx_v_size, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.array_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "trie.pxd":31
 *     return <bytes>ptr[:size]
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):             # <<<<<<<<<<<<<<
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 */

static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE char *__pyx_f_4cyac_4trie_bytes_to_array(PyObject *__pyx_v_data, int __pyx_v_capacity, CYTHON_UNUSED int __pyx_skip_dispatch) {
  char *__pyx_v_ptr;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_array", 0);

  /* "trie.pxd":32
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 *     cdef char* ptr = <char*> malloc(capacity)             # <<<<<<<<<<<<<<
 *     memcpy(ptr, <char *>data, len(data))
 *     return ptr
 */
  __pyx_v_ptr = ((char *)malloc(__pyx_v_capacity));

  /* "trie.pxd":33
 * cpdef inline char* bytes_to_array(bytes data, int capacity):
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))             # <<<<<<<<<<<<<<
 *     return ptr
 * 
 */
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyBytes_AsWritableString(__pyx_v_data); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 33, __pyx_L1_error)
  if (unlikely(__pyx_v_data == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_t_2 = PyBytes_GET_SIZE(__pyx_v_data); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 33, __pyx_L1_error)
  (void)(memcpy(__pyx_v_ptr, ((char *)__pyx_t_1), __pyx_t_2));

  /* "trie.pxd":34
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 *     return ptr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ptr;
  goto __pyx_L0;

  /* "trie.pxd":31
 *     return <bytes>ptr[:size]
 * 
 * cpdef inline char* bytes_to_array(bytes data, int capacity):             # <<<<<<<<<<<<<<
 *     cdef char* ptr = <char*> malloc(capacity)
 *     memcpy(ptr, <char *>data, len(data))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4cyac_4trie_3bytes_to_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  int __pyx_v_capacity;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bytes_to_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_capacity,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_capacity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bytes_to_array", 1, 2, 2, 1); __PYX_ERR(1, 31, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bytes_to_array") < 0)) __PYX_ERR(1, 31, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_data = ((PyObject*)values[0]);
    __pyx_v_capacity = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_capacity == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bytes_to_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 31, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_4cyac_4trie_2bytes_to_array(__pyx_self, __pyx_v_data, __pyx_v_capacity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4cyac_4trie_2bytes_to_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, int __pyx_v_capacity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_array", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_f_4cyac_4trie_bytes_to_array(__pyx_v_data, __pyx_v_capacity, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cyac.trie.bytes_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "trie.pxd":37
 * 
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):             # <<<<<<<<<<<<<<
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 */

static CYTHON_INLINE int __pyx_f_4cyac_4trie_ignore_case_offset(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment *__pyx_v_align, struct __pyx_obj_4cyac_7xstring_xstring *__pyx_v_xs, int __pyx_v_byte_idx) {
  int __pyx_v_char_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("ignore_case_offset", 0);

  /* "trie.pxd":38
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]             # <<<<<<<<<<<<<<
 *     if align is None:
 *         return char_offset
 */
  __pyx_v_char_offset = (__pyx_v_xs->char_idx_of_byte[__pyx_v_byte_idx]);

  /* "trie.pxd":39
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_align) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "trie.pxd":40
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 *         return char_offset             # <<<<<<<<<<<<<<
 *     return align.lowercase_char_index_mapping[char_offset]
 * 
 */
    __pyx_r = __pyx_v_char_offset;
    goto __pyx_L0;

    /* "trie.pxd":39
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:             # <<<<<<<<<<<<<<
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]
 */
  }

  /* "trie.pxd":41
 *     if align is None:
 *         return char_offset
 *     return align.lowercase_char_index_mapping[char_offset]             # <<<<<<<<<<<<<<
 * 
 * cdef class Trie(object):
 */
  __pyx_r = (__pyx_v_align->lowercase_char_index_mapping[__pyx_v_char_offset]);
  goto __pyx_L0;

  /* "trie.pxd":37
 * 
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):             # <<<<<<<<<<<<<<
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4cyac_2ac_AC __pyx_vtable_4cyac_2ac_AC;

static PyObject *__pyx_tp_new_4cyac_2ac_AC(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cyac_2ac_AC *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4cyac_2ac_AC *)o);
  p->__pyx_vtab = __pyx_vtabptr_4cyac_2ac_AC;
  p->trie = ((struct __pyx_obj_4cyac_4trie_Trie *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4cyac_2ac_2AC_19__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4cyac_2ac_AC(PyObject *o) {
  struct __pyx_obj_4cyac_2ac_AC *p = (struct __pyx_obj_4cyac_2ac_AC *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_4cyac_2ac_2AC_21__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->trie);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4cyac_2ac_AC(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac_AC *p = (struct __pyx_obj_4cyac_2ac_AC *)o;
  if (p->trie) {
    e = (*v)(((PyObject *)p->trie), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4cyac_2ac_AC(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4cyac_2ac_AC *p = (struct __pyx_obj_4cyac_2ac_AC *)o;
  tmp = ((PyObject*)p->trie);
  p->trie = ((struct __pyx_obj_4cyac_4trie_Trie *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_4cyac_2ac_AC(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_4cyac_2ac_2AC_ignore_case(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cyac_2ac_2AC_11ignore_case_1__get__(o);
}

static PyObject *__pyx_getprop_4cyac_2ac_2AC_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4cyac_2ac_2AC_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_4cyac_2ac_AC[] = {
  {"prefix", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_3prefix, METH_O, __pyx_doc_4cyac_2ac_2AC_2prefix},
  {"predict", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_6predict, METH_O, __pyx_doc_4cyac_2ac_2AC_5predict},
  {"items", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_9items, METH_NOARGS, __pyx_doc_4cyac_2ac_2AC_8items},
  {"match_longest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_2ac_2AC_14match_longest, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_2ac_2AC_13match_longest},
  {"replace_longest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_2ac_2AC_17replace_longest, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_2ac_2AC_16replace_longest},
  {"build", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_2ac_2AC_23build, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_2ac_2AC_22build},
  {"match", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_2ac_2AC_25match, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_2ac_2AC_24match},
  {"__reduce__", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_28__reduce__, METH_NOARGS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_30__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_32__setstate__, METH_O, 0},
  {"save", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_34save, METH_O, __pyx_doc_4cyac_2ac_2AC_33save},
  {"buff_size", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_36buff_size, METH_NOARGS, __pyx_doc_4cyac_2ac_2AC_35buff_size},
  {"to_buff", (PyCFunction)__pyx_pw_4cyac_2ac_2AC_38to_buff, METH_O, __pyx_doc_4cyac_2ac_2AC_37to_buff},
  {"from_buff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4cyac_2ac_2AC_40from_buff, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4cyac_2ac_2AC_39from_buff},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4cyac_2ac_AC[] = {
  {(char *)"ignore_case", __pyx_getprop_4cyac_2ac_2AC_ignore_case, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop_4cyac_2ac_2AC_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_AC = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_4cyac_2ac_AC, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_4cyac_2ac_2AC_12__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AC = {
  0, /*mp_length*/
  __pyx_pw_4cyac_2ac_2AC_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_4cyac_2ac_AC = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.AC", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac_AC), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac_AC, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_AC, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AC, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac_AC, /*tp_traverse*/
  __pyx_tp_clear_4cyac_2ac_AC, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4cyac_2ac_AC, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4cyac_2ac_AC, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac_AC, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *__pyx_freelist_4cyac_2ac___pyx_scope_struct__prefix[8];
static int __pyx_freecount_4cyac_2ac___pyx_scope_struct__prefix = 0;

static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct__prefix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_2ac___pyx_scope_struct__prefix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix)))) {
    o = (PyObject*)__pyx_freelist_4cyac_2ac___pyx_scope_struct__prefix[--__pyx_freecount_4cyac_2ac___pyx_scope_struct__prefix];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct__prefix(PyObject *o) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_2ac___pyx_scope_struct__prefix < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix)))) {
    __pyx_freelist_4cyac_2ac___pyx_scope_struct__prefix[__pyx_freecount_4cyac_2ac___pyx_scope_struct__prefix++] = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct__prefix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_2ac___pyx_scope_struct__prefix = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.__pyx_scope_struct__prefix", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct__prefix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct__prefix, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct__prefix, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac___pyx_scope_struct__prefix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *__pyx_freelist_4cyac_2ac___pyx_scope_struct_1_predict[8];
static int __pyx_freecount_4cyac_2ac___pyx_scope_struct_1_predict = 0;

static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_1_predict(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_2ac___pyx_scope_struct_1_predict > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict)))) {
    o = (PyObject*)__pyx_freelist_4cyac_2ac___pyx_scope_struct_1_predict[--__pyx_freecount_4cyac_2ac___pyx_scope_struct_1_predict];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_1_predict(PyObject *o) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_2ac___pyx_scope_struct_1_predict < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict)))) {
    __pyx_freelist_4cyac_2ac___pyx_scope_struct_1_predict[__pyx_freecount_4cyac_2ac___pyx_scope_struct_1_predict++] = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_1_predict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_2ac___pyx_scope_struct_1_predict = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.__pyx_scope_struct_1_predict", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_1_predict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_1_predict, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_1_predict, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac___pyx_scope_struct_1_predict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *__pyx_freelist_4cyac_2ac___pyx_scope_struct_2_items[8];
static int __pyx_freecount_4cyac_2ac___pyx_scope_struct_2_items = 0;

static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_2_items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_2ac___pyx_scope_struct_2_items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items)))) {
    o = (PyObject*)__pyx_freelist_4cyac_2ac___pyx_scope_struct_2_items[--__pyx_freecount_4cyac_2ac___pyx_scope_struct_2_items];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_2_items(PyObject *o) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_2ac___pyx_scope_struct_2_items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items)))) {
    __pyx_freelist_4cyac_2ac___pyx_scope_struct_2_items[__pyx_freecount_4cyac_2ac___pyx_scope_struct_2_items++] = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_2_items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_2ac___pyx_scope_struct_2_items = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.__pyx_scope_struct_2_items", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_2_items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_2_items, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_2_items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac___pyx_scope_struct_2_items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *__pyx_freelist_4cyac_2ac___pyx_scope_struct_3_match_longest[8];
static int __pyx_freecount_4cyac_2ac___pyx_scope_struct_3_match_longest = 0;

static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_3_match_longest(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_2ac___pyx_scope_struct_3_match_longest > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest)))) {
    o = (PyObject*)__pyx_freelist_4cyac_2ac___pyx_scope_struct_3_match_longest[--__pyx_freecount_4cyac_2ac___pyx_scope_struct_3_match_longest];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_3_match_longest(PyObject *o) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_sep);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_2ac___pyx_scope_struct_3_match_longest < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest)))) {
    __pyx_freelist_4cyac_2ac___pyx_scope_struct_3_match_longest[__pyx_freecount_4cyac_2ac___pyx_scope_struct_3_match_longest++] = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_3_match_longest(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_sep) {
    e = (*v)(p->__pyx_v_sep, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.__pyx_scope_struct_3_match_longest", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_3_match_longest), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_3_match_longest, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_3_match_longest, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac___pyx_scope_struct_3_match_longest, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *__pyx_freelist_4cyac_2ac___pyx_scope_struct_4_match[8];
static int __pyx_freecount_4cyac_2ac___pyx_scope_struct_4_match = 0;

static PyObject *__pyx_tp_new_4cyac_2ac___pyx_scope_struct_4_match(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_4cyac_2ac___pyx_scope_struct_4_match > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match)))) {
    o = (PyObject*)__pyx_freelist_4cyac_2ac___pyx_scope_struct_4_match[--__pyx_freecount_4cyac_2ac___pyx_scope_struct_4_match];
    memset(o, 0, sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)o);
  new((void*)&(p->__pyx_v_vect)) std::vector<struct __pyx_t_4cyac_2ac_Matched> ();
  new((void*)&(p->__pyx_t_3)) std::vector<struct __pyx_t_4cyac_2ac_Matched> ::iterator();
  return o;
}

static void __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_4_match(PyObject *o) {
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_vect);
  __Pyx_call_destructor(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_v_align);
  Py_CLEAR(p->__pyx_v_prev_xstr);
  Py_CLEAR(p->__pyx_v_return_all);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_sep);
  Py_CLEAR(p->__pyx_v_text);
  Py_CLEAR(p->__pyx_v_xstr);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_4cyac_2ac___pyx_scope_struct_4_match < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match)))) {
    __pyx_freelist_4cyac_2ac___pyx_scope_struct_4_match[__pyx_freecount_4cyac_2ac___pyx_scope_struct_4_match++] = ((struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_4_match(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *p = (struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match *)o;
  if (p->__pyx_v_align) {
    e = (*v)(((PyObject *)p->__pyx_v_align), a); if (e) return e;
  }
  if (p->__pyx_v_prev_xstr) {
    e = (*v)(((PyObject *)p->__pyx_v_prev_xstr), a); if (e) return e;
  }
  if (p->__pyx_v_return_all) {
    e = (*v)(p->__pyx_v_return_all, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_sep) {
    e = (*v)(p->__pyx_v_sep, a); if (e) return e;
  }
  if (p->__pyx_v_xstr) {
    e = (*v)(((PyObject *)p->__pyx_v_xstr), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_4cyac_2ac___pyx_scope_struct_4_match = {
  PyVarObject_HEAD_INIT(0, 0)
  "cyac.ac.__pyx_scope_struct_4_match", /*tp_name*/
  sizeof(struct __pyx_obj_4cyac_2ac___pyx_scope_struct_4_match), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4cyac_2ac___pyx_scope_struct_4_match, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4cyac_2ac___pyx_scope_struct_4_match, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4cyac_2ac___pyx_scope_struct_4_match, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ac(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ac},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ac",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AC, __pyx_k_AC, sizeof(__pyx_k_AC), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_build_line_165, __pyx_k_AC_build_line_165, sizeof(__pyx_k_AC_build_line_165), 0, 1, 0, 0},
  {&__pyx_n_s_AC_items, __pyx_k_AC_items, sizeof(__pyx_k_AC_items), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_items_line_83, __pyx_k_AC_items_line_83, sizeof(__pyx_k_AC_items_line_83), 0, 1, 0, 0},
  {&__pyx_n_s_AC_match, __pyx_k_AC_match, sizeof(__pyx_k_AC_match), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_match_line_249, __pyx_k_AC_match_line_249, sizeof(__pyx_k_AC_match_line_249), 0, 1, 0, 0},
  {&__pyx_n_s_AC_match_longest, __pyx_k_AC_match_longest, sizeof(__pyx_k_AC_match_longest), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_match_longest_line_98, __pyx_k_AC_match_longest_line_98, sizeof(__pyx_k_AC_match_longest_line_98), 0, 1, 0, 0},
  {&__pyx_n_s_AC_predict, __pyx_k_AC_predict, sizeof(__pyx_k_AC_predict), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_predict_line_68, __pyx_k_AC_predict_line_68, sizeof(__pyx_k_AC_predict_line_68), 0, 1, 0, 0},
  {&__pyx_n_s_AC_prefix, __pyx_k_AC_prefix, sizeof(__pyx_k_AC_prefix), 0, 0, 1, 1},
  {&__pyx_kp_u_AC_prefix_line_52, __pyx_k_AC_prefix_line_52, sizeof(__pyx_k_AC_prefix_line_52), 0, 1, 0, 0},
  {&__pyx_kp_u_AC_replace_longest_line_115, __pyx_k_AC_replace_longest_line_115, sizeof(__pyx_k_AC_replace_longest_line_115), 0, 1, 0, 0},
  {&__pyx_kp_u_Build_AC_automata_Args_pats_lis, __pyx_k_Build_AC_automata_Args_pats_lis, sizeof(__pyx_k_Build_AC_automata_Args_pats_lis), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_open_file_s, __pyx_k_Cannot_open_file_s, sizeof(__pyx_k_Cannot_open_file_s), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_buff, __pyx_k_buff, sizeof(__pyx_k_buff), 0, 0, 1, 1},
  {&__pyx_n_s_buff_size, __pyx_k_buff_size, sizeof(__pyx_k_buff_size), 0, 0, 1, 1},
  {&__pyx_kp_u_buff_size_is_smaller_than_needed, __pyx_k_buff_size_is_smaller_than_needed, sizeof(__pyx_k_buff_size_is_smaller_than_needed), 0, 1, 0, 0},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_kp_u_cannot_get_readable_buffer_https, __pyx_k_cannot_get_readable_buffer_https, sizeof(__pyx_k_cannot_get_readable_buffer_https), 0, 1, 0, 0},
  {&__pyx_kp_u_cannot_get_writable_buffer_https, __pyx_k_cannot_get_writable_buffer_https, sizeof(__pyx_k_cannot_get_writable_buffer_https), 0, 1, 0, 0},
  {&__pyx_n_s_capacity, __pyx_k_capacity, sizeof(__pyx_k_capacity), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cyac_ac, __pyx_k_cyac_ac, sizeof(__pyx_k_cyac_ac), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_kp_u_extract_trie_s_keys_from_given, __pyx_k_extract_trie_s_keys_from_given, sizeof(__pyx_k_extract_trie_s_keys_from_given), 0, 1, 0, 0},
  {&__pyx_kp_u_extract_trie_s_keys_from_given_2, __pyx_k_extract_trie_s_keys_from_given_2, sizeof(__pyx_k_extract_trie_s_keys_from_given_2), 0, 1, 0, 0},
  {&__pyx_n_s_from_buff, __pyx_k_from_buff, sizeof(__pyx_k_from_buff), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ignore_case, __pyx_k_ignore_case, sizeof(__pyx_k_ignore_case), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_data_buf_size_is_not_cor, __pyx_k_invalid_data_buf_size_is_not_cor, sizeof(__pyx_k_invalid_data_buf_size_is_not_cor), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_data_magic_number_is_not, __pyx_k_invalid_data_magic_number_is_not, sizeof(__pyx_k_invalid_data_magic_number_is_not), 0, 1, 0, 0},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_kp_s_lib_cyac_ac_pyx, __pyx_k_lib_cyac_ac_pyx, sizeof(__pyx_k_lib_cyac_ac_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_match_longest, __pyx_k_match_longest, sizeof(__pyx_k_match_longest), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_object, __pyx_k_new_object, sizeof(__pyx_k_new_object), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_ordered, __pyx_k_ordered, sizeof(__pyx_k_ordered), 0, 0, 1, 1},
  {&__pyx_n_s_pats, __pyx_k_pats, sizeof(__pyx_k_pats), 0, 0, 1, 1},
  {&__pyx_n_s_predict, __pyx_k_predict, sizeof(__pyx_k_predict), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_replace_longest, __pyx_k_replace_longest, sizeof(__pyx_k_replace_longest), 0, 0, 1, 1},
  {&__pyx_kp_u_replace_trie_s_keys_from_given, __pyx_k_replace_trie_s_keys_from_given, sizeof(__pyx_k_replace_trie_s_keys_from_given), 0, 1, 0, 0},
  {&__pyx_n_s_return_all, __pyx_k_return_all, sizeof(__pyx_k_return_all), 0, 0, 1, 1},
  {&__pyx_kp_u_return_all_key_and_id_ordered_b, __pyx_k_return_all_key_and_id_ordered_b, sizeof(__pyx_k_return_all_key_and_id_ordered_b), 0, 1, 0, 0},
  {&__pyx_kp_u_return_the_prefix_of_given_stri, __pyx_k_return_the_prefix_of_given_stri, sizeof(__pyx_k_return_the_prefix_of_given_stri), 0, 1, 0, 0},
  {&__pyx_kp_u_return_the_string_in_the_trie_w, __pyx_k_return_the_string_in_the_trie_w, sizeof(__pyx_k_return_the_string_in_the_trie_w), 0, 1, 0, 0},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_u_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 1, 0, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 201, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cyac/ac.pyx":390
 *         cdef Py_buffer view
 *         if PyObject_GetBuffer(buff, &view, PyBUF_WRITABLE) != 0:
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_cannot_get_writable_buffer_https); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cyac/ac.pyx":392
 *             raise Exception("cannot get writable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")
 *         if self.buff_size() < view.len:
 *             raise Exception("buff size is smaller than needed.")             # <<<<<<<<<<<<<<
 *         cdef void* buf = view.buf
 *         self._to_buff(buf)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_buff_size_is_smaller_than_needed); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cyac/ac.pyx":412
 *             free(view)
 *             free(view2)
 *             raise Exception("cannot get readable buffer: https://docs.python.org/zh-cn/3/c-api/buffer.html")             # <<<<<<<<<<<<<<
 *         ac = ac_from_buff(view.buf, view.len, copy)
 *         if copy:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_cannot_get_readable_buffer_https); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cyac/ac.pyx":459
 *     memcpy(buff, <void*>&magic, sizeof(magic))
 *     if magic != magic_number:
 *         raise Exception("invalid data, magic number is not correct")             # <<<<<<<<<<<<<<
 *     offset += sizeof(magic)
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_invalid_data_magic_number_is_not); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cyac/ac.pyx":465
 *     offset += sizeof(int)
 *     if size > buf_size:
 *         raise Exception("invalid data, buf size is not correct")             # <<<<<<<<<<<<<<
 *     trie = trie_from_buff(buff + offset, buf_size - offset, copy)
 *     offset += trie.buff_size()
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_invalid_data_buf_size_is_not_cor); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cyac/ac.pyx":16
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_lib_cyac_ac_pyx, __pyx_n_s_new_object, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4cyac_2ac_AC = &__pyx_vtable_4cyac_2ac_AC;
  __pyx_vtable_4cyac_2ac_AC.__pyx___fetch = (void (*)(struct __pyx_obj_4cyac_2ac_AC *, int, int, std::vector<struct __pyx_t_4cyac_2ac_Matched>  &))__pyx_f_4cyac_2ac_2AC___fetch;
  __pyx_vtable_4cyac_2ac_AC.write = (PyObject *(*)(struct __pyx_obj_4cyac_2ac_AC *, FILE *))__pyx_f_4cyac_2ac_2AC_write;
  __pyx_vtable_4cyac_2ac_AC._to_buff = (void (*)(struct __pyx_obj_4cyac_2ac_AC *, void *))__pyx_f_4cyac_2ac_2AC__to_buff;
  if (PyType_Ready(&__pyx_type_4cyac_2ac_AC) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac_AC.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac_AC.tp_dictoffset && __pyx_type_4cyac_2ac_AC.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac_AC.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4cyac_2ac_AC.tp_dict, __pyx_vtabptr_4cyac_2ac_AC) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AC, (PyObject *)&__pyx_type_4cyac_2ac_AC) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_ptype_4cyac_2ac_AC = &__pyx_type_4cyac_2ac_AC;
  if (PyType_Ready(&__pyx_type_4cyac_2ac___pyx_scope_struct__prefix) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac___pyx_scope_struct__prefix.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac___pyx_scope_struct__prefix.tp_dictoffset && __pyx_type_4cyac_2ac___pyx_scope_struct__prefix.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac___pyx_scope_struct__prefix.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_2ac___pyx_scope_struct__prefix = &__pyx_type_4cyac_2ac___pyx_scope_struct__prefix;
  if (PyType_Ready(&__pyx_type_4cyac_2ac___pyx_scope_struct_1_predict) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac___pyx_scope_struct_1_predict.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac___pyx_scope_struct_1_predict.tp_dictoffset && __pyx_type_4cyac_2ac___pyx_scope_struct_1_predict.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac___pyx_scope_struct_1_predict.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_2ac___pyx_scope_struct_1_predict = &__pyx_type_4cyac_2ac___pyx_scope_struct_1_predict;
  if (PyType_Ready(&__pyx_type_4cyac_2ac___pyx_scope_struct_2_items) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac___pyx_scope_struct_2_items.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac___pyx_scope_struct_2_items.tp_dictoffset && __pyx_type_4cyac_2ac___pyx_scope_struct_2_items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac___pyx_scope_struct_2_items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_2ac___pyx_scope_struct_2_items = &__pyx_type_4cyac_2ac___pyx_scope_struct_2_items;
  if (PyType_Ready(&__pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest.tp_dictoffset && __pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_2ac___pyx_scope_struct_3_match_longest = &__pyx_type_4cyac_2ac___pyx_scope_struct_3_match_longest;
  if (PyType_Ready(&__pyx_type_4cyac_2ac___pyx_scope_struct_4_match) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4cyac_2ac___pyx_scope_struct_4_match.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4cyac_2ac___pyx_scope_struct_4_match.tp_dictoffset && __pyx_type_4cyac_2ac___pyx_scope_struct_4_match.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4cyac_2ac___pyx_scope_struct_4_match.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_4cyac_2ac___pyx_scope_struct_4_match = &__pyx_type_4cyac_2ac___pyx_scope_struct_4_match;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.xstring"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cyac_7xstring_xstring = __Pyx_ImportType(__pyx_t_1, "cyac.xstring", "xstring", sizeof(struct __pyx_obj_4cyac_7xstring_xstring), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cyac_7xstring_xstring) __PYX_ERR(2, 16, __pyx_L1_error)
  __pyx_vtabptr_4cyac_7xstring_xstring = (struct __pyx_vtabstruct_4cyac_7xstring_xstring*)__Pyx_GetVtable(__pyx_ptype_4cyac_7xstring_xstring->tp_dict); if (unlikely(!__pyx_vtabptr_4cyac_7xstring_xstring)) __PYX_ERR(2, 16, __pyx_L1_error)
  __pyx_ptype_4cyac_7xstring_ignore_case_alignment = __Pyx_ImportType(__pyx_t_1, "cyac.xstring", "ignore_case_alignment", sizeof(struct __pyx_obj_4cyac_7xstring_ignore_case_alignment), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cyac_7xstring_ignore_case_alignment) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cyac.trie"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cyac_4trie_Trie = __Pyx_ImportType(__pyx_t_1, "cyac.trie", "Trie", sizeof(struct __pyx_obj_4cyac_4trie_Trie), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_4cyac_4trie_Trie) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_vtabptr_4cyac_4trie_Trie = (struct __pyx_vtabstruct_4cyac_4trie_Trie*)__Pyx_GetVtable(__pyx_ptype_4cyac_4trie_Trie->tp_dict); if (unlikely(!__pyx_vtabptr_4cyac_4trie_Trie)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "magic_number", (void **)&__pyx_vp_4cyac_4util_magic_number, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cyac.trie"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "trie_from_buff", (void (**)(void))&__pyx_f_4cyac_4trie_trie_from_buff, "struct __pyx_obj_4cyac_4trie_Trie *(void *, int, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cyac.util"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "check_buffer", (void (**)(void))&__pyx_f_4cyac_4util_check_buffer, "void (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initac(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initac(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ac(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ac(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ac(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ac' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ac(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ac", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cyac__ac) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cyac.ac")) {
      if (unlikely(PyDict_SetItemString(modules, "cyac.ac", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cyac/ac.pyx":16
 * from cpython.buffer cimport PyObject_GetBuffer, PyObject_CheckBuffer, PyBuffer_Release, PyBuffer_GetPointer, Py_buffer, PyBUF_WRITABLE, PyBUF_SIMPLE
 * 
 * def new_object(obj):             # <<<<<<<<<<<<<<
 *     return obj.__new__(obj)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cyac_2ac_1new_object, NULL, __pyx_n_s_cyac_ac); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_object, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cyac/ac.pyx":165
 * 
 *     @classmethod
 *     def build(cls, pats, ignore_case=False, ordered=False):             # <<<<<<<<<<<<<<
 *         """
 *         Build AC automata
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_4cyac_2ac_AC, __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "cyac/ac.pyx":164
 *             e = &self.output[e[0].next_]
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def build(cls, pats, ignore_case=False, ordered=False):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cyac_2ac_AC->tp_dict, __pyx_n_s_build, __pyx_t_2) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_4cyac_2ac_AC);

  /* "cyac/ac.pyx":399
 * 
 *     @classmethod
 *     def from_buff(cls, buff, copy = True):             # <<<<<<<<<<<<<<
 *         """
 *         init ac from buff
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_4cyac_2ac_AC, __pyx_n_s_from_buff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "cyac/ac.pyx":398
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_buff(cls, buff, copy = True):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cyac_2ac_AC->tp_dict, __pyx_n_s_from_buff, __pyx_t_1) < 0) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_4cyac_2ac_AC);

  /* "cyac/ac.pyx":1
 * #cython: language_level=3, boundscheck=False, overflowcheck=False             # <<<<<<<<<<<<<<
 * #    , profile=True, linetrace=True
 * from .trie cimport Trie, ignore_case_alignment, ignore_case_offset, array_to_bytes, bytes_to_array, trie_from_buff
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_prefix_line_52, __pyx_kp_u_return_the_prefix_of_given_stri) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_predict_line_68, __pyx_kp_u_return_the_string_in_the_trie_w) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_items_line_83, __pyx_kp_u_return_all_key_and_id_ordered_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_match_longest_line_98, __pyx_kp_u_extract_trie_s_keys_from_given) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_replace_longest_line_115, __pyx_kp_u_replace_trie_s_keys_from_given) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_build_line_165, __pyx_kp_u_Build_AC_automata_Args_pats_lis) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_AC_match_line_249, __pyx_kp_u_extract_trie_s_keys_from_given_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "trie.pxd":37
 * 
 * 
 * cdef inline int ignore_case_offset(ignore_case_alignment align, xstring xs, int byte_idx):             # <<<<<<<<<<<<<<
 *     cdef int char_offset = xs.char_idx_of_byte[byte_idx]
 *     if align is None:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cyac.ac", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cyac.ac");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
